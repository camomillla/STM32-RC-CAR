
STM32-RC-Car.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001f8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000083fc  080001f8  080001f8  000011f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000002c0  080085f4  080085f4  000095f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080088b4  080088b4  0000a05c  2**0
                  CONTENTS
  4 .ARM          00000008  080088b4  080088b4  000098b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080088bc  080088bc  0000a05c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080088bc  080088bc  000098bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080088c0  080088c0  000098c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000005c  20000000  080088c4  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000aec  2000005c  08008920  0000a05c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000b48  08008920  0000ab48  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  0000a05c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001876d  00000000  00000000  0000a08a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000037ec  00000000  00000000  000227f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001458  00000000  00000000  00025fe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000fc8  00000000  00000000  00027440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002a046  00000000  00000000  00028408  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001a918  00000000  00000000  0005244e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ff4d4  00000000  00000000  0006cd66  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0016c23a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005944  00000000  00000000  0016c280  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004b  00000000  00000000  00171bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001f8 <__do_global_dtors_aux>:
 80001f8:	b510      	push	{r4, lr}
 80001fa:	4c05      	ldr	r4, [pc, #20]	@ (8000210 <__do_global_dtors_aux+0x18>)
 80001fc:	7823      	ldrb	r3, [r4, #0]
 80001fe:	b933      	cbnz	r3, 800020e <__do_global_dtors_aux+0x16>
 8000200:	4b04      	ldr	r3, [pc, #16]	@ (8000214 <__do_global_dtors_aux+0x1c>)
 8000202:	b113      	cbz	r3, 800020a <__do_global_dtors_aux+0x12>
 8000204:	4804      	ldr	r0, [pc, #16]	@ (8000218 <__do_global_dtors_aux+0x20>)
 8000206:	f3af 8000 	nop.w
 800020a:	2301      	movs	r3, #1
 800020c:	7023      	strb	r3, [r4, #0]
 800020e:	bd10      	pop	{r4, pc}
 8000210:	2000005c 	.word	0x2000005c
 8000214:	00000000 	.word	0x00000000
 8000218:	080085dc 	.word	0x080085dc

0800021c <frame_dummy>:
 800021c:	b508      	push	{r3, lr}
 800021e:	4b03      	ldr	r3, [pc, #12]	@ (800022c <frame_dummy+0x10>)
 8000220:	b11b      	cbz	r3, 800022a <frame_dummy+0xe>
 8000222:	4903      	ldr	r1, [pc, #12]	@ (8000230 <frame_dummy+0x14>)
 8000224:	4803      	ldr	r0, [pc, #12]	@ (8000234 <frame_dummy+0x18>)
 8000226:	f3af 8000 	nop.w
 800022a:	bd08      	pop	{r3, pc}
 800022c:	00000000 	.word	0x00000000
 8000230:	20000060 	.word	0x20000060
 8000234:	080085dc 	.word	0x080085dc

08000238 <strcmp>:
 8000238:	f810 2b01 	ldrb.w	r2, [r0], #1
 800023c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000240:	2a01      	cmp	r2, #1
 8000242:	bf28      	it	cs
 8000244:	429a      	cmpcs	r2, r3
 8000246:	d0f7      	beq.n	8000238 <strcmp>
 8000248:	1ad0      	subs	r0, r2, r3
 800024a:	4770      	bx	lr

0800024c <strlen>:
 800024c:	4603      	mov	r3, r0
 800024e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000252:	2a00      	cmp	r2, #0
 8000254:	d1fb      	bne.n	800024e <strlen+0x2>
 8000256:	1a18      	subs	r0, r3, r0
 8000258:	3801      	subs	r0, #1
 800025a:	4770      	bx	lr

0800025c <__aeabi_uldivmod>:
 800025c:	b953      	cbnz	r3, 8000274 <__aeabi_uldivmod+0x18>
 800025e:	b94a      	cbnz	r2, 8000274 <__aeabi_uldivmod+0x18>
 8000260:	2900      	cmp	r1, #0
 8000262:	bf08      	it	eq
 8000264:	2800      	cmpeq	r0, #0
 8000266:	bf1c      	itt	ne
 8000268:	f04f 31ff 	movne.w	r1, #4294967295
 800026c:	f04f 30ff 	movne.w	r0, #4294967295
 8000270:	f000 b96a 	b.w	8000548 <__aeabi_idiv0>
 8000274:	f1ad 0c08 	sub.w	ip, sp, #8
 8000278:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800027c:	f000 f806 	bl	800028c <__udivmoddi4>
 8000280:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000284:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000288:	b004      	add	sp, #16
 800028a:	4770      	bx	lr

0800028c <__udivmoddi4>:
 800028c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000290:	9d08      	ldr	r5, [sp, #32]
 8000292:	460c      	mov	r4, r1
 8000294:	2b00      	cmp	r3, #0
 8000296:	d14e      	bne.n	8000336 <__udivmoddi4+0xaa>
 8000298:	4694      	mov	ip, r2
 800029a:	458c      	cmp	ip, r1
 800029c:	4686      	mov	lr, r0
 800029e:	fab2 f282 	clz	r2, r2
 80002a2:	d962      	bls.n	800036a <__udivmoddi4+0xde>
 80002a4:	b14a      	cbz	r2, 80002ba <__udivmoddi4+0x2e>
 80002a6:	f1c2 0320 	rsb	r3, r2, #32
 80002aa:	4091      	lsls	r1, r2
 80002ac:	fa20 f303 	lsr.w	r3, r0, r3
 80002b0:	fa0c fc02 	lsl.w	ip, ip, r2
 80002b4:	4319      	orrs	r1, r3
 80002b6:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ba:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002be:	fa1f f68c 	uxth.w	r6, ip
 80002c2:	fbb1 f4f7 	udiv	r4, r1, r7
 80002c6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ca:	fb07 1114 	mls	r1, r7, r4, r1
 80002ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002d2:	fb04 f106 	mul.w	r1, r4, r6
 80002d6:	4299      	cmp	r1, r3
 80002d8:	d90a      	bls.n	80002f0 <__udivmoddi4+0x64>
 80002da:	eb1c 0303 	adds.w	r3, ip, r3
 80002de:	f104 30ff 	add.w	r0, r4, #4294967295
 80002e2:	f080 8112 	bcs.w	800050a <__udivmoddi4+0x27e>
 80002e6:	4299      	cmp	r1, r3
 80002e8:	f240 810f 	bls.w	800050a <__udivmoddi4+0x27e>
 80002ec:	3c02      	subs	r4, #2
 80002ee:	4463      	add	r3, ip
 80002f0:	1a59      	subs	r1, r3, r1
 80002f2:	fa1f f38e 	uxth.w	r3, lr
 80002f6:	fbb1 f0f7 	udiv	r0, r1, r7
 80002fa:	fb07 1110 	mls	r1, r7, r0, r1
 80002fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000302:	fb00 f606 	mul.w	r6, r0, r6
 8000306:	429e      	cmp	r6, r3
 8000308:	d90a      	bls.n	8000320 <__udivmoddi4+0x94>
 800030a:	eb1c 0303 	adds.w	r3, ip, r3
 800030e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000312:	f080 80fc 	bcs.w	800050e <__udivmoddi4+0x282>
 8000316:	429e      	cmp	r6, r3
 8000318:	f240 80f9 	bls.w	800050e <__udivmoddi4+0x282>
 800031c:	4463      	add	r3, ip
 800031e:	3802      	subs	r0, #2
 8000320:	1b9b      	subs	r3, r3, r6
 8000322:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000326:	2100      	movs	r1, #0
 8000328:	b11d      	cbz	r5, 8000332 <__udivmoddi4+0xa6>
 800032a:	40d3      	lsrs	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	e9c5 3200 	strd	r3, r2, [r5]
 8000332:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000336:	428b      	cmp	r3, r1
 8000338:	d905      	bls.n	8000346 <__udivmoddi4+0xba>
 800033a:	b10d      	cbz	r5, 8000340 <__udivmoddi4+0xb4>
 800033c:	e9c5 0100 	strd	r0, r1, [r5]
 8000340:	2100      	movs	r1, #0
 8000342:	4608      	mov	r0, r1
 8000344:	e7f5      	b.n	8000332 <__udivmoddi4+0xa6>
 8000346:	fab3 f183 	clz	r1, r3
 800034a:	2900      	cmp	r1, #0
 800034c:	d146      	bne.n	80003dc <__udivmoddi4+0x150>
 800034e:	42a3      	cmp	r3, r4
 8000350:	d302      	bcc.n	8000358 <__udivmoddi4+0xcc>
 8000352:	4290      	cmp	r0, r2
 8000354:	f0c0 80f0 	bcc.w	8000538 <__udivmoddi4+0x2ac>
 8000358:	1a86      	subs	r6, r0, r2
 800035a:	eb64 0303 	sbc.w	r3, r4, r3
 800035e:	2001      	movs	r0, #1
 8000360:	2d00      	cmp	r5, #0
 8000362:	d0e6      	beq.n	8000332 <__udivmoddi4+0xa6>
 8000364:	e9c5 6300 	strd	r6, r3, [r5]
 8000368:	e7e3      	b.n	8000332 <__udivmoddi4+0xa6>
 800036a:	2a00      	cmp	r2, #0
 800036c:	f040 8090 	bne.w	8000490 <__udivmoddi4+0x204>
 8000370:	eba1 040c 	sub.w	r4, r1, ip
 8000374:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000378:	fa1f f78c 	uxth.w	r7, ip
 800037c:	2101      	movs	r1, #1
 800037e:	fbb4 f6f8 	udiv	r6, r4, r8
 8000382:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000386:	fb08 4416 	mls	r4, r8, r6, r4
 800038a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800038e:	fb07 f006 	mul.w	r0, r7, r6
 8000392:	4298      	cmp	r0, r3
 8000394:	d908      	bls.n	80003a8 <__udivmoddi4+0x11c>
 8000396:	eb1c 0303 	adds.w	r3, ip, r3
 800039a:	f106 34ff 	add.w	r4, r6, #4294967295
 800039e:	d202      	bcs.n	80003a6 <__udivmoddi4+0x11a>
 80003a0:	4298      	cmp	r0, r3
 80003a2:	f200 80cd 	bhi.w	8000540 <__udivmoddi4+0x2b4>
 80003a6:	4626      	mov	r6, r4
 80003a8:	1a1c      	subs	r4, r3, r0
 80003aa:	fa1f f38e 	uxth.w	r3, lr
 80003ae:	fbb4 f0f8 	udiv	r0, r4, r8
 80003b2:	fb08 4410 	mls	r4, r8, r0, r4
 80003b6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ba:	fb00 f707 	mul.w	r7, r0, r7
 80003be:	429f      	cmp	r7, r3
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x148>
 80003c2:	eb1c 0303 	adds.w	r3, ip, r3
 80003c6:	f100 34ff 	add.w	r4, r0, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x146>
 80003cc:	429f      	cmp	r7, r3
 80003ce:	f200 80b0 	bhi.w	8000532 <__udivmoddi4+0x2a6>
 80003d2:	4620      	mov	r0, r4
 80003d4:	1bdb      	subs	r3, r3, r7
 80003d6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003da:	e7a5      	b.n	8000328 <__udivmoddi4+0x9c>
 80003dc:	f1c1 0620 	rsb	r6, r1, #32
 80003e0:	408b      	lsls	r3, r1
 80003e2:	fa22 f706 	lsr.w	r7, r2, r6
 80003e6:	431f      	orrs	r7, r3
 80003e8:	fa20 fc06 	lsr.w	ip, r0, r6
 80003ec:	fa04 f301 	lsl.w	r3, r4, r1
 80003f0:	ea43 030c 	orr.w	r3, r3, ip
 80003f4:	40f4      	lsrs	r4, r6
 80003f6:	fa00 f801 	lsl.w	r8, r0, r1
 80003fa:	0c38      	lsrs	r0, r7, #16
 80003fc:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000400:	fbb4 fef0 	udiv	lr, r4, r0
 8000404:	fa1f fc87 	uxth.w	ip, r7
 8000408:	fb00 441e 	mls	r4, r0, lr, r4
 800040c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000410:	fb0e f90c 	mul.w	r9, lr, ip
 8000414:	45a1      	cmp	r9, r4
 8000416:	fa02 f201 	lsl.w	r2, r2, r1
 800041a:	d90a      	bls.n	8000432 <__udivmoddi4+0x1a6>
 800041c:	193c      	adds	r4, r7, r4
 800041e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000422:	f080 8084 	bcs.w	800052e <__udivmoddi4+0x2a2>
 8000426:	45a1      	cmp	r9, r4
 8000428:	f240 8081 	bls.w	800052e <__udivmoddi4+0x2a2>
 800042c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000430:	443c      	add	r4, r7
 8000432:	eba4 0409 	sub.w	r4, r4, r9
 8000436:	fa1f f983 	uxth.w	r9, r3
 800043a:	fbb4 f3f0 	udiv	r3, r4, r0
 800043e:	fb00 4413 	mls	r4, r0, r3, r4
 8000442:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000446:	fb03 fc0c 	mul.w	ip, r3, ip
 800044a:	45a4      	cmp	ip, r4
 800044c:	d907      	bls.n	800045e <__udivmoddi4+0x1d2>
 800044e:	193c      	adds	r4, r7, r4
 8000450:	f103 30ff 	add.w	r0, r3, #4294967295
 8000454:	d267      	bcs.n	8000526 <__udivmoddi4+0x29a>
 8000456:	45a4      	cmp	ip, r4
 8000458:	d965      	bls.n	8000526 <__udivmoddi4+0x29a>
 800045a:	3b02      	subs	r3, #2
 800045c:	443c      	add	r4, r7
 800045e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000462:	fba0 9302 	umull	r9, r3, r0, r2
 8000466:	eba4 040c 	sub.w	r4, r4, ip
 800046a:	429c      	cmp	r4, r3
 800046c:	46ce      	mov	lr, r9
 800046e:	469c      	mov	ip, r3
 8000470:	d351      	bcc.n	8000516 <__udivmoddi4+0x28a>
 8000472:	d04e      	beq.n	8000512 <__udivmoddi4+0x286>
 8000474:	b155      	cbz	r5, 800048c <__udivmoddi4+0x200>
 8000476:	ebb8 030e 	subs.w	r3, r8, lr
 800047a:	eb64 040c 	sbc.w	r4, r4, ip
 800047e:	fa04 f606 	lsl.w	r6, r4, r6
 8000482:	40cb      	lsrs	r3, r1
 8000484:	431e      	orrs	r6, r3
 8000486:	40cc      	lsrs	r4, r1
 8000488:	e9c5 6400 	strd	r6, r4, [r5]
 800048c:	2100      	movs	r1, #0
 800048e:	e750      	b.n	8000332 <__udivmoddi4+0xa6>
 8000490:	f1c2 0320 	rsb	r3, r2, #32
 8000494:	fa20 f103 	lsr.w	r1, r0, r3
 8000498:	fa0c fc02 	lsl.w	ip, ip, r2
 800049c:	fa24 f303 	lsr.w	r3, r4, r3
 80004a0:	4094      	lsls	r4, r2
 80004a2:	430c      	orrs	r4, r1
 80004a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004a8:	fa00 fe02 	lsl.w	lr, r0, r2
 80004ac:	fa1f f78c 	uxth.w	r7, ip
 80004b0:	fbb3 f0f8 	udiv	r0, r3, r8
 80004b4:	fb08 3110 	mls	r1, r8, r0, r3
 80004b8:	0c23      	lsrs	r3, r4, #16
 80004ba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004be:	fb00 f107 	mul.w	r1, r0, r7
 80004c2:	4299      	cmp	r1, r3
 80004c4:	d908      	bls.n	80004d8 <__udivmoddi4+0x24c>
 80004c6:	eb1c 0303 	adds.w	r3, ip, r3
 80004ca:	f100 36ff 	add.w	r6, r0, #4294967295
 80004ce:	d22c      	bcs.n	800052a <__udivmoddi4+0x29e>
 80004d0:	4299      	cmp	r1, r3
 80004d2:	d92a      	bls.n	800052a <__udivmoddi4+0x29e>
 80004d4:	3802      	subs	r0, #2
 80004d6:	4463      	add	r3, ip
 80004d8:	1a5b      	subs	r3, r3, r1
 80004da:	b2a4      	uxth	r4, r4
 80004dc:	fbb3 f1f8 	udiv	r1, r3, r8
 80004e0:	fb08 3311 	mls	r3, r8, r1, r3
 80004e4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004e8:	fb01 f307 	mul.w	r3, r1, r7
 80004ec:	42a3      	cmp	r3, r4
 80004ee:	d908      	bls.n	8000502 <__udivmoddi4+0x276>
 80004f0:	eb1c 0404 	adds.w	r4, ip, r4
 80004f4:	f101 36ff 	add.w	r6, r1, #4294967295
 80004f8:	d213      	bcs.n	8000522 <__udivmoddi4+0x296>
 80004fa:	42a3      	cmp	r3, r4
 80004fc:	d911      	bls.n	8000522 <__udivmoddi4+0x296>
 80004fe:	3902      	subs	r1, #2
 8000500:	4464      	add	r4, ip
 8000502:	1ae4      	subs	r4, r4, r3
 8000504:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000508:	e739      	b.n	800037e <__udivmoddi4+0xf2>
 800050a:	4604      	mov	r4, r0
 800050c:	e6f0      	b.n	80002f0 <__udivmoddi4+0x64>
 800050e:	4608      	mov	r0, r1
 8000510:	e706      	b.n	8000320 <__udivmoddi4+0x94>
 8000512:	45c8      	cmp	r8, r9
 8000514:	d2ae      	bcs.n	8000474 <__udivmoddi4+0x1e8>
 8000516:	ebb9 0e02 	subs.w	lr, r9, r2
 800051a:	eb63 0c07 	sbc.w	ip, r3, r7
 800051e:	3801      	subs	r0, #1
 8000520:	e7a8      	b.n	8000474 <__udivmoddi4+0x1e8>
 8000522:	4631      	mov	r1, r6
 8000524:	e7ed      	b.n	8000502 <__udivmoddi4+0x276>
 8000526:	4603      	mov	r3, r0
 8000528:	e799      	b.n	800045e <__udivmoddi4+0x1d2>
 800052a:	4630      	mov	r0, r6
 800052c:	e7d4      	b.n	80004d8 <__udivmoddi4+0x24c>
 800052e:	46d6      	mov	lr, sl
 8000530:	e77f      	b.n	8000432 <__udivmoddi4+0x1a6>
 8000532:	4463      	add	r3, ip
 8000534:	3802      	subs	r0, #2
 8000536:	e74d      	b.n	80003d4 <__udivmoddi4+0x148>
 8000538:	4606      	mov	r6, r0
 800053a:	4623      	mov	r3, r4
 800053c:	4608      	mov	r0, r1
 800053e:	e70f      	b.n	8000360 <__udivmoddi4+0xd4>
 8000540:	3e02      	subs	r6, #2
 8000542:	4463      	add	r3, ip
 8000544:	e730      	b.n	80003a8 <__udivmoddi4+0x11c>
 8000546:	bf00      	nop

08000548 <__aeabi_idiv0>:
 8000548:	4770      	bx	lr
 800054a:	bf00      	nop

0800054c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800054c:	b580      	push	{r7, lr}
 800054e:	b082      	sub	sp, #8
 8000550:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000552:	4b10      	ldr	r3, [pc, #64]	@ (8000594 <MX_DMA_Init+0x48>)
 8000554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000556:	4a0f      	ldr	r2, [pc, #60]	@ (8000594 <MX_DMA_Init+0x48>)
 8000558:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800055c:	6313      	str	r3, [r2, #48]	@ 0x30
 800055e:	4b0d      	ldr	r3, [pc, #52]	@ (8000594 <MX_DMA_Init+0x48>)
 8000560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000562:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000566:	607b      	str	r3, [r7, #4]
 8000568:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800056a:	2200      	movs	r2, #0
 800056c:	2100      	movs	r1, #0
 800056e:	2010      	movs	r0, #16
 8000570:	f001 ff55 	bl	800241e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000574:	2010      	movs	r0, #16
 8000576:	f001 ff6e 	bl	8002456 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 800057a:	2200      	movs	r2, #0
 800057c:	2100      	movs	r1, #0
 800057e:	2011      	movs	r0, #17
 8000580:	f001 ff4d 	bl	800241e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000584:	2011      	movs	r0, #17
 8000586:	f001 ff66 	bl	8002456 <HAL_NVIC_EnableIRQ>

}
 800058a:	bf00      	nop
 800058c:	3708      	adds	r7, #8
 800058e:	46bd      	mov	sp, r7
 8000590:	bd80      	pop	{r7, pc}
 8000592:	bf00      	nop
 8000594:	40023800 	.word	0x40023800

08000598 <MX_GPIO_Init>:
     PB13   ------> ETH_TXD1
     PG11   ------> ETH_TX_EN
     PG13   ------> ETH_TXD0
*/
void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08c      	sub	sp, #48	@ 0x30
 800059c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 031c 	add.w	r3, r7, #28
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	4b77      	ldr	r3, [pc, #476]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005b2:	4a76      	ldr	r2, [pc, #472]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005b4:	f043 0304 	orr.w	r3, r3, #4
 80005b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ba:	4b74      	ldr	r3, [pc, #464]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005be:	f003 0304 	and.w	r3, r3, #4
 80005c2:	61bb      	str	r3, [r7, #24]
 80005c4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005c6:	4b71      	ldr	r3, [pc, #452]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ca:	4a70      	ldr	r2, [pc, #448]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005cc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80005d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80005d2:	4b6e      	ldr	r3, [pc, #440]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80005da:	617b      	str	r3, [r7, #20]
 80005dc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005de:	4b6b      	ldr	r3, [pc, #428]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005e2:	4a6a      	ldr	r2, [pc, #424]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005e4:	f043 0301 	orr.w	r3, r3, #1
 80005e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80005ea:	4b68      	ldr	r3, [pc, #416]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005ee:	f003 0301 	and.w	r3, r3, #1
 80005f2:	613b      	str	r3, [r7, #16]
 80005f4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005f6:	4b65      	ldr	r3, [pc, #404]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80005fa:	4a64      	ldr	r2, [pc, #400]	@ (800078c <MX_GPIO_Init+0x1f4>)
 80005fc:	f043 0302 	orr.w	r3, r3, #2
 8000600:	6313      	str	r3, [r2, #48]	@ 0x30
 8000602:	4b62      	ldr	r3, [pc, #392]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000604:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000606:	f003 0302 	and.w	r3, r3, #2
 800060a:	60fb      	str	r3, [r7, #12]
 800060c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800060e:	4b5f      	ldr	r3, [pc, #380]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000612:	4a5e      	ldr	r2, [pc, #376]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000614:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000618:	6313      	str	r3, [r2, #48]	@ 0x30
 800061a:	4b5c      	ldr	r3, [pc, #368]	@ (800078c <MX_GPIO_Init+0x1f4>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800061e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000626:	4b59      	ldr	r3, [pc, #356]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000628:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800062a:	4a58      	ldr	r2, [pc, #352]	@ (800078c <MX_GPIO_Init+0x1f4>)
 800062c:	f043 0310 	orr.w	r3, r3, #16
 8000630:	6313      	str	r3, [r2, #48]	@ 0x30
 8000632:	4b56      	ldr	r3, [pc, #344]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000636:	f003 0310 	and.w	r3, r3, #16
 800063a:	607b      	str	r3, [r7, #4]
 800063c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800063e:	4b53      	ldr	r3, [pc, #332]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000642:	4a52      	ldr	r2, [pc, #328]	@ (800078c <MX_GPIO_Init+0x1f4>)
 8000644:	f043 0308 	orr.w	r3, r3, #8
 8000648:	6313      	str	r3, [r2, #48]	@ 0x30
 800064a:	4b50      	ldr	r3, [pc, #320]	@ (800078c <MX_GPIO_Init+0x1f4>)
 800064c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800064e:	f003 0308 	and.w	r3, r3, #8
 8000652:	603b      	str	r3, [r7, #0]
 8000654:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000656:	2200      	movs	r2, #0
 8000658:	f244 0181 	movw	r1, #16513	@ 0x4081
 800065c:	484c      	ldr	r0, [pc, #304]	@ (8000790 <MX_GPIO_Init+0x1f8>)
 800065e:	f002 fcd7 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LIGHTS_Pin|GPIO_PIN_6, GPIO_PIN_RESET);
 8000662:	2200      	movs	r2, #0
 8000664:	2141      	movs	r1, #65	@ 0x41
 8000666:	484b      	ldr	r0, [pc, #300]	@ (8000794 <MX_GPIO_Init+0x1fc>)
 8000668:	f002 fcd2 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_4, GPIO_PIN_RESET);
 800066c:	2200      	movs	r2, #0
 800066e:	2110      	movs	r1, #16
 8000670:	4849      	ldr	r0, [pc, #292]	@ (8000798 <MX_GPIO_Init+0x200>)
 8000672:	f002 fccd 	bl	8003010 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000676:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800067a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800067c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000680:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000682:	2300      	movs	r3, #0
 8000684:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000686:	f107 031c 	add.w	r3, r7, #28
 800068a:	4619      	mov	r1, r3
 800068c:	4843      	ldr	r0, [pc, #268]	@ (800079c <MX_GPIO_Init+0x204>)
 800068e:	f002 fb13 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000692:	2332      	movs	r3, #50	@ 0x32
 8000694:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000696:	2302      	movs	r3, #2
 8000698:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069a:	2300      	movs	r3, #0
 800069c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800069e:	2303      	movs	r3, #3
 80006a0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006a2:	230b      	movs	r3, #11
 80006a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80006a6:	f107 031c 	add.w	r3, r7, #28
 80006aa:	4619      	mov	r1, r3
 80006ac:	483b      	ldr	r0, [pc, #236]	@ (800079c <MX_GPIO_Init+0x204>)
 80006ae:	f002 fb03 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_1|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 80006b2:	2386      	movs	r3, #134	@ 0x86
 80006b4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80006b6:	2302      	movs	r3, #2
 80006b8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006ba:	2300      	movs	r3, #0
 80006bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80006be:	2303      	movs	r3, #3
 80006c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80006c2:	230b      	movs	r3, #11
 80006c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006c6:	f107 031c 	add.w	r3, r7, #28
 80006ca:	4619      	mov	r1, r3
 80006cc:	4834      	ldr	r0, [pc, #208]	@ (80007a0 <MX_GPIO_Init+0x208>)
 80006ce:	f002 faf3 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80006d2:	f244 0381 	movw	r3, #16513	@ 0x4081
 80006d6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d8:	2301      	movs	r3, #1
 80006da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	2300      	movs	r3, #0
 80006de:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e0:	2300      	movs	r3, #0
 80006e2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006e4:	f107 031c 	add.w	r3, r7, #28
 80006e8:	4619      	mov	r1, r3
 80006ea:	4829      	ldr	r0, [pc, #164]	@ (8000790 <MX_GPIO_Init+0x1f8>)
 80006ec:	f002 fae4 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LIGHTS_Pin PG6 */
  GPIO_InitStruct.Pin = LIGHTS_Pin|GPIO_PIN_6;
 80006f0:	2341      	movs	r3, #65	@ 0x41
 80006f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006f4:	2301      	movs	r3, #1
 80006f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006fc:	2300      	movs	r3, #0
 80006fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000700:	f107 031c 	add.w	r3, r7, #28
 8000704:	4619      	mov	r1, r3
 8000706:	4823      	ldr	r0, [pc, #140]	@ (8000794 <MX_GPIO_Init+0x1fc>)
 8000708:	f002 fad6 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800070c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000710:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000712:	2302      	movs	r3, #2
 8000714:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000716:	2300      	movs	r3, #0
 8000718:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800071a:	2303      	movs	r3, #3
 800071c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800071e:	230b      	movs	r3, #11
 8000720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8000722:	f107 031c 	add.w	r3, r7, #28
 8000726:	4619      	mov	r1, r3
 8000728:	4819      	ldr	r0, [pc, #100]	@ (8000790 <MX_GPIO_Init+0x1f8>)
 800072a:	f002 fac5 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800072e:	2380      	movs	r3, #128	@ 0x80
 8000730:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000732:	2300      	movs	r3, #0
 8000734:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000736:	2300      	movs	r3, #0
 8000738:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	4619      	mov	r1, r3
 8000740:	4814      	ldr	r0, [pc, #80]	@ (8000794 <MX_GPIO_Init+0x1fc>)
 8000742:	f002 fab9 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000746:	2310      	movs	r3, #16
 8000748:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800074a:	2301      	movs	r3, #1
 800074c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800074e:	2300      	movs	r3, #0
 8000750:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000752:	2300      	movs	r3, #0
 8000754:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000756:	f107 031c 	add.w	r3, r7, #28
 800075a:	4619      	mov	r1, r3
 800075c:	480e      	ldr	r0, [pc, #56]	@ (8000798 <MX_GPIO_Init+0x200>)
 800075e:	f002 faab 	bl	8002cb8 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000762:	f44f 5320 	mov.w	r3, #10240	@ 0x2800
 8000766:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000768:	2302      	movs	r3, #2
 800076a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800076c:	2300      	movs	r3, #0
 800076e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000770:	2303      	movs	r3, #3
 8000772:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000774:	230b      	movs	r3, #11
 8000776:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000778:	f107 031c 	add.w	r3, r7, #28
 800077c:	4619      	mov	r1, r3
 800077e:	4805      	ldr	r0, [pc, #20]	@ (8000794 <MX_GPIO_Init+0x1fc>)
 8000780:	f002 fa9a 	bl	8002cb8 <HAL_GPIO_Init>

}
 8000784:	bf00      	nop
 8000786:	3730      	adds	r7, #48	@ 0x30
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	40023800 	.word	0x40023800
 8000790:	40020400 	.word	0x40020400
 8000794:	40021800 	.word	0x40021800
 8000798:	40020c00 	.word	0x40020c00
 800079c:	40020800 	.word	0x40020800
 80007a0:	40020000 	.word	0x40020000

080007a4 <HAL_UARTEx_RxEventCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size) {
 80007a4:	b580      	push	{r7, lr}
 80007a6:	b082      	sub	sp, #8
 80007a8:	af00      	add	r7, sp, #0
 80007aa:	6078      	str	r0, [r7, #4]
 80007ac:	460b      	mov	r3, r1
 80007ae:	807b      	strh	r3, [r7, #2]
	if (huart->Instance == USART2) {
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a05      	ldr	r2, [pc, #20]	@ (80007cc <HAL_UARTEx_RxEventCallback+0x28>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d104      	bne.n	80007c4 <HAL_UARTEx_RxEventCallback+0x20>
		ATC_IdleLineCallback(&ESP, Size);
 80007ba:	887b      	ldrh	r3, [r7, #2]
 80007bc:	4619      	mov	r1, r3
 80007be:	4804      	ldr	r0, [pc, #16]	@ (80007d0 <HAL_UARTEx_RxEventCallback+0x2c>)
 80007c0:	f007 fc6b 	bl	800809a <ATC_IdleLineCallback>
	}
}
 80007c4:	bf00      	nop
 80007c6:	3708      	adds	r7, #8
 80007c8:	46bd      	mov	sp, r7
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40004400 	.word	0x40004400
 80007d0:	20000078 	.word	0x20000078

080007d4 <pid_init>:
	float Kd;			//Wzmocnienie członu różniczkującego*/
	int anti_windup_limit;		//Anti-Windup - ograniczenie członu całkującego*/
} PID;

void pid_init(PID *pid_data, float kp_init, float ki_init, float kd_init, int anti_windup_limit_init)
{
 80007d4:	b480      	push	{r7}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6178      	str	r0, [r7, #20]
 80007dc:	ed87 0a04 	vstr	s0, [r7, #16]
 80007e0:	edc7 0a03 	vstr	s1, [r7, #12]
 80007e4:	ed87 1a02 	vstr	s2, [r7, #8]
 80007e8:	6079      	str	r1, [r7, #4]
	pid_data->previous_error = 0;
 80007ea:	697b      	ldr	r3, [r7, #20]
 80007ec:	2200      	movs	r2, #0
 80007ee:	601a      	str	r2, [r3, #0]
	pid_data->total_error = 0;
 80007f0:	697b      	ldr	r3, [r7, #20]
 80007f2:	2200      	movs	r2, #0
 80007f4:	605a      	str	r2, [r3, #4]

	pid_data->Kp = kp_init;
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	693a      	ldr	r2, [r7, #16]
 80007fa:	609a      	str	r2, [r3, #8]
	pid_data->Ki = ki_init;
 80007fc:	697b      	ldr	r3, [r7, #20]
 80007fe:	68fa      	ldr	r2, [r7, #12]
 8000800:	60da      	str	r2, [r3, #12]
	pid_data->Kd = kd_init;
 8000802:	697b      	ldr	r3, [r7, #20]
 8000804:	68ba      	ldr	r2, [r7, #8]
 8000806:	611a      	str	r2, [r3, #16]

	pid_data->anti_windup_limit = anti_windup_limit_init;
 8000808:	697b      	ldr	r3, [r7, #20]
 800080a:	687a      	ldr	r2, [r7, #4]
 800080c:	615a      	str	r2, [r3, #20]
}
 800080e:	bf00      	nop
 8000810:	371c      	adds	r7, #28
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr

0800081a <pid_reset>:

void pid_reset(PID *pid_data)
{
 800081a:	b480      	push	{r7}
 800081c:	b083      	sub	sp, #12
 800081e:	af00      	add	r7, sp, #0
 8000820:	6078      	str	r0, [r7, #4]
	pid_data->total_error = 0;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	2200      	movs	r2, #0
 8000826:	605a      	str	r2, [r3, #4]
	pid_data->previous_error = 0;
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	2200      	movs	r2, #0
 800082c:	601a      	str	r2, [r3, #0]
}
 800082e:	bf00      	nop
 8000830:	370c      	adds	r7, #12
 8000832:	46bd      	mov	sp, r7
 8000834:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000838:	4770      	bx	lr

0800083a <pid_calculate>:

int pid_calculate(PID *pid_data, int setpoint, int process_variable)
{
 800083a:	b480      	push	{r7}
 800083c:	b089      	sub	sp, #36	@ 0x24
 800083e:	af00      	add	r7, sp, #0
 8000840:	60f8      	str	r0, [r7, #12]
 8000842:	60b9      	str	r1, [r7, #8]
 8000844:	607a      	str	r2, [r7, #4]
	int error;
	float p_term, i_term, d_term;

	error = setpoint - process_variable;		//obliczenie uchybu
 8000846:	68ba      	ldr	r2, [r7, #8]
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	61bb      	str	r3, [r7, #24]
	pid_data->total_error += error;			//sumowanie uchybu
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	685a      	ldr	r2, [r3, #4]
 8000852:	69bb      	ldr	r3, [r7, #24]
 8000854:	441a      	add	r2, r3
 8000856:	68fb      	ldr	r3, [r7, #12]
 8000858:	605a      	str	r2, [r3, #4]

	p_term = (float)(pid_data->Kp * error);		//odpowiedź członu proporcjonalnego
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	ed93 7a02 	vldr	s14, [r3, #8]
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	ee07 3a90 	vmov	s15, r3
 8000866:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800086a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800086e:	edc7 7a05 	vstr	s15, [r7, #20]
	i_term = (float)(pid_data->Ki * pid_data->total_error);	//odpowiedź członu całkującego
 8000872:	68fb      	ldr	r3, [r7, #12]
 8000874:	ed93 7a03 	vldr	s14, [r3, #12]
 8000878:	68fb      	ldr	r3, [r7, #12]
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	ee07 3a90 	vmov	s15, r3
 8000880:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000884:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000888:	edc7 7a07 	vstr	s15, [r7, #28]
	d_term = (float)(pid_data->Kd * (error - pid_data->previous_error));//odpowiedź członu różniczkującego
 800088c:	68fb      	ldr	r3, [r7, #12]
 800088e:	ed93 7a04 	vldr	s14, [r3, #16]
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	681b      	ldr	r3, [r3, #0]
 8000896:	69ba      	ldr	r2, [r7, #24]
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	ee07 3a90 	vmov	s15, r3
 800089e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80008a6:	edc7 7a04 	vstr	s15, [r7, #16]

	if(i_term >= pid_data->anti_windup_limit) i_term = pid_data->anti_windup_limit;	//Anti-Windup - ograniczenie odpowiedzi członu całkującego
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	695b      	ldr	r3, [r3, #20]
 80008ae:	ee07 3a90 	vmov	s15, r3
 80008b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008b6:	ed97 7a07 	vldr	s14, [r7, #28]
 80008ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008c2:	db08      	blt.n	80008d6 <pid_calculate+0x9c>
 80008c4:	68fb      	ldr	r3, [r7, #12]
 80008c6:	695b      	ldr	r3, [r3, #20]
 80008c8:	ee07 3a90 	vmov	s15, r3
 80008cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008d0:	edc7 7a07 	vstr	s15, [r7, #28]
 80008d4:	e016      	b.n	8000904 <pid_calculate+0xca>
	else if(i_term <= -pid_data->anti_windup_limit) i_term = -pid_data->anti_windup_limit;
 80008d6:	68fb      	ldr	r3, [r7, #12]
 80008d8:	695b      	ldr	r3, [r3, #20]
 80008da:	425b      	negs	r3, r3
 80008dc:	ee07 3a90 	vmov	s15, r3
 80008e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80008e4:	ed97 7a07 	vldr	s14, [r7, #28]
 80008e8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80008ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80008f0:	d808      	bhi.n	8000904 <pid_calculate+0xca>
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	695b      	ldr	r3, [r3, #20]
 80008f6:	425b      	negs	r3, r3
 80008f8:	ee07 3a90 	vmov	s15, r3
 80008fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000900:	edc7 7a07 	vstr	s15, [r7, #28]

	pid_data->previous_error = error;	//aktualizacja zmiennej z poprzednią wartością błędu
 8000904:	68fb      	ldr	r3, [r7, #12]
 8000906:	69ba      	ldr	r2, [r7, #24]
 8000908:	601a      	str	r2, [r3, #0]

	return (int)(p_term + i_term + d_term);		//odpowiedź regulatora
 800090a:	ed97 7a05 	vldr	s14, [r7, #20]
 800090e:	edd7 7a07 	vldr	s15, [r7, #28]
 8000912:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000916:	edd7 7a04 	vldr	s15, [r7, #16]
 800091a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800091e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000922:	ee17 3a90 	vmov	r3, s15
}
 8000926:	4618      	mov	r0, r3
 8000928:	3724      	adds	r7, #36	@ 0x24
 800092a:	46bd      	mov	sp, r7
 800092c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000930:	4770      	bx	lr

08000932 <motor_init>:
} MOTOR;

MOTOR motorA;

void motor_init(MOTOR *m, TIM_HandleTypeDef *tim)
{
 8000932:	b480      	push	{r7}
 8000934:	b083      	sub	sp, #12
 8000936:	af00      	add	r7, sp, #0
 8000938:	6078      	str	r0, [r7, #4]
 800093a:	6039      	str	r1, [r7, #0]
	m->timer = tim;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	683a      	ldr	r2, [r7, #0]
 8000940:	601a      	str	r2, [r3, #0]
	m->resolution = ENCODER_RESOLUTION * TIMER_CONF_BOTH_EDGE_T1T2 * MOTOR_GEAR;
 8000942:	687b      	ldr	r3, [r7, #4]
 8000944:	f44f 7216 	mov.w	r2, #600	@ 0x258
 8000948:	809a      	strh	r2, [r3, #4]

	m->pulse_count = 0;
 800094a:	687b      	ldr	r3, [r7, #4]
 800094c:	2200      	movs	r2, #0
 800094e:	609a      	str	r2, [r3, #8]
	m->measured_speed = 0;
 8000950:	687b      	ldr	r3, [r7, #4]
 8000952:	2200      	movs	r2, #0
 8000954:	60da      	str	r2, [r3, #12]
	m->set_speed = 0;
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	2200      	movs	r2, #0
 800095a:	611a      	str	r2, [r3, #16]
    m->actual_PWM = 0;
 800095c:	687b      	ldr	r3, [r7, #4]
 800095e:	2200      	movs	r2, #0
 8000960:	615a      	str	r2, [r3, #20]
}
 8000962:	bf00      	nop
 8000964:	370c      	adds	r7, #12
 8000966:	46bd      	mov	sp, r7
 8000968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096c:	4770      	bx	lr

0800096e <motor_calculate_speed>:

void motor_calculate_speed(MOTOR *m)
{
 800096e:	b580      	push	{r7, lr}
 8000970:	b084      	sub	sp, #16
 8000972:	af00      	add	r7, sp, #0
 8000974:	6078      	str	r0, [r7, #4]
	motor_update_count(m);
 8000976:	6878      	ldr	r0, [r7, #4]
 8000978:	f000 f82a 	bl	80009d0 <motor_update_count>

	m->measured_speed = (m->pulse_count * TIMER_FREQENCY * SECOND_IN_MINUTE) / m->resolution;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	689b      	ldr	r3, [r3, #8]
 8000980:	f44f 6296 	mov.w	r2, #1200	@ 0x4b0
 8000984:	fb02 f303 	mul.w	r3, r2, r3
 8000988:	687a      	ldr	r2, [r7, #4]
 800098a:	8892      	ldrh	r2, [r2, #4]
 800098c:	fb93 f2f2 	sdiv	r2, r3, r2
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	60da      	str	r2, [r3, #12]

	int output = pid_calculate(&(m->pid_controller), m->set_speed, m->measured_speed);
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	f103 0018 	add.w	r0, r3, #24
 800099a:	687b      	ldr	r3, [r7, #4]
 800099c:	6919      	ldr	r1, [r3, #16]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	68db      	ldr	r3, [r3, #12]
 80009a2:	461a      	mov	r2, r3
 80009a4:	f7ff ff49 	bl	800083a <pid_calculate>
 80009a8:	60f8      	str	r0, [r7, #12]

	m->actual_PWM += output;
 80009aa:	687b      	ldr	r3, [r7, #4]
 80009ac:	695a      	ldr	r2, [r3, #20]
 80009ae:	68fb      	ldr	r3, [r7, #12]
 80009b0:	441a      	add	r2, r3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	615a      	str	r2, [r3, #20]

	if(m->actual_PWM >= 0)
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	695b      	ldr	r3, [r3, #20]
 80009ba:	2b00      	cmp	r3, #0
 80009bc:	db04      	blt.n	80009c8 <motor_calculate_speed+0x5a>
	{
		//drv8835_set_motorA_direction(CW);
		drv8835_set_motorA_speed(m->actual_PWM);
 80009be:	687b      	ldr	r3, [r7, #4]
 80009c0:	695b      	ldr	r3, [r3, #20]
 80009c2:	4618      	mov	r0, r3
 80009c4:	f000 f832 	bl	8000a2c <drv8835_set_motorA_speed>
	else
	{
		//drv8835_set_motorA_direction(CCW);
		//drv8835_set_motorA_speed(-m->actual_PWM);
	}
}
 80009c8:	bf00      	nop
 80009ca:	3710      	adds	r7, #16
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <motor_update_count>:

void motor_update_count(MOTOR *m)
{
 80009d0:	b480      	push	{r7}
 80009d2:	b083      	sub	sp, #12
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	6078      	str	r0, [r7, #4]
	m->pulse_count = (int16_t)__HAL_TIM_GET_COUNTER(m->timer);
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	681b      	ldr	r3, [r3, #0]
 80009de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80009e0:	b21b      	sxth	r3, r3
 80009e2:	461a      	mov	r2, r3
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COUNTER(m->timer, 0);
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	2200      	movs	r2, #0
 80009f0:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80009f2:	bf00      	nop
 80009f4:	370c      	adds	r7, #12
 80009f6:	46bd      	mov	sp, r7
 80009f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009fc:	4770      	bx	lr

080009fe <motor_set_speed>:

void motor_set_speed(MOTOR *m, int set_speed)
{
 80009fe:	b580      	push	{r7, lr}
 8000a00:	b082      	sub	sp, #8
 8000a02:	af00      	add	r7, sp, #0
 8000a04:	6078      	str	r0, [r7, #4]
 8000a06:	6039      	str	r1, [r7, #0]
	if(set_speed != m->set_speed)
 8000a08:	687b      	ldr	r3, [r7, #4]
 8000a0a:	691b      	ldr	r3, [r3, #16]
 8000a0c:	683a      	ldr	r2, [r7, #0]
 8000a0e:	429a      	cmp	r2, r3
 8000a10:	d004      	beq.n	8000a1c <motor_set_speed+0x1e>
		pid_reset(&(m->pid_controller));
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	3318      	adds	r3, #24
 8000a16:	4618      	mov	r0, r3
 8000a18:	f7ff feff 	bl	800081a <pid_reset>

	m->set_speed = set_speed;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	683a      	ldr	r2, [r7, #0]
 8000a20:	611a      	str	r2, [r3, #16]
}
 8000a22:	bf00      	nop
 8000a24:	3708      	adds	r7, #8
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
	...

08000a2c <drv8835_set_motorA_speed>:

void drv8835_set_motorA_speed(uint16_t speed)
{
 8000a2c:	b480      	push	{r7}
 8000a2e:	b083      	sub	sp, #12
 8000a30:	af00      	add	r7, sp, #0
 8000a32:	4603      	mov	r3, r0
 8000a34:	80fb      	strh	r3, [r7, #6]
	if(speed >= htim2.Instance->ARR)
 8000a36:	88fa      	ldrh	r2, [r7, #6]
 8000a38:	4b09      	ldr	r3, [pc, #36]	@ (8000a60 <drv8835_set_motorA_speed+0x34>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a3e:	429a      	cmp	r2, r3
 8000a40:	d303      	bcc.n	8000a4a <drv8835_set_motorA_speed+0x1e>
		speed = htim2.Instance->ARR;
 8000a42:	4b07      	ldr	r3, [pc, #28]	@ (8000a60 <drv8835_set_motorA_speed+0x34>)
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a48:	80fb      	strh	r3, [r7, #6]

	__HAL_TIM_SetCompare(&htim2, TIM_CHANNEL_1, speed);
 8000a4a:	4b05      	ldr	r3, [pc, #20]	@ (8000a60 <drv8835_set_motorA_speed+0x34>)
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	88fa      	ldrh	r2, [r7, #6]
 8000a50:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000a52:	bf00      	nop
 8000a54:	370c      	adds	r7, #12
 8000a56:	46bd      	mov	sp, r7
 8000a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5c:	4770      	bx	lr
 8000a5e:	bf00      	nop
 8000a60:	20000138 	.word	0x20000138

08000a64 <drv8835_init>:

void drv8835_init()
{
 8000a64:	b580      	push	{r7, lr}
 8000a66:	af00      	add	r7, sp, #0
	//drv8835_mode_control(Phase_Enable_Mode);
	//drv8835_set_motorA_direction(CCW);
	drv8835_set_motorA_speed(0);
 8000a68:	2000      	movs	r0, #0
 8000a6a:	f7ff ffdf 	bl	8000a2c <drv8835_set_motorA_speed>

	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000a6e:	2100      	movs	r1, #0
 8000a70:	4802      	ldr	r0, [pc, #8]	@ (8000a7c <drv8835_init+0x18>)
 8000a72:	f003 febf 	bl	80047f4 <HAL_TIM_PWM_Start>
}
 8000a76:	bf00      	nop
 8000a78:	bd80      	pop	{r7, pc}
 8000a7a:	bf00      	nop
 8000a7c:	20000138 	.word	0x20000138

08000a80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b082      	sub	sp, #8
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM6)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a04      	ldr	r2, [pc, #16]	@ (8000aa0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d102      	bne.n	8000a98 <HAL_TIM_PeriodElapsedCallback+0x18>
	{
		motor_calculate_speed(&motorA);
 8000a92:	4804      	ldr	r0, [pc, #16]	@ (8000aa4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000a94:	f7ff ff6b 	bl	800096e <motor_calculate_speed>
	}
}
 8000a98:	bf00      	nop
 8000a9a:	3708      	adds	r7, #8
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd80      	pop	{r7, pc}
 8000aa0:	40001000 	.word	0x40001000
 8000aa4:	200000b4 	.word	0x200000b4

08000aa8 <Set_PWM_Frequency>:


/*=================================*/

void Set_PWM_Frequency(uint32_t frequency) {
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b086      	sub	sp, #24
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	6078      	str	r0, [r7, #4]
    if (frequency == 0) {
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d104      	bne.n	8000ac0 <Set_PWM_Frequency+0x18>
        HAL_TIM_PWM_Stop(&htim12, TIM_CHANNEL_2); // Zatrzymanie PWM
 8000ab6:	2104      	movs	r1, #4
 8000ab8:	4812      	ldr	r0, [pc, #72]	@ (8000b04 <Set_PWM_Frequency+0x5c>)
 8000aba:	f003 ff95 	bl	80049e8 <HAL_TIM_PWM_Stop>
        return;
 8000abe:	e01e      	b.n	8000afe <Set_PWM_Frequency+0x56>
    }

    uint32_t timer_clock = 96000000; // 96 MHz zegar bazowy
 8000ac0:	4b11      	ldr	r3, [pc, #68]	@ (8000b08 <Set_PWM_Frequency+0x60>)
 8000ac2:	617b      	str	r3, [r7, #20]
    uint32_t prescaler = htim12.Init.Prescaler + 1;
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b04 <Set_PWM_Frequency+0x5c>)
 8000ac6:	685b      	ldr	r3, [r3, #4]
 8000ac8:	3301      	adds	r3, #1
 8000aca:	613b      	str	r3, [r7, #16]
    uint32_t period = (timer_clock / (prescaler * frequency)) - 1;
 8000acc:	693b      	ldr	r3, [r7, #16]
 8000ace:	687a      	ldr	r2, [r7, #4]
 8000ad0:	fb02 f303 	mul.w	r3, r2, r3
 8000ad4:	697a      	ldr	r2, [r7, #20]
 8000ad6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ada:	3b01      	subs	r3, #1
 8000adc:	60fb      	str	r3, [r7, #12]

    __HAL_TIM_SET_AUTORELOAD(&htim2, period);
 8000ade:	4b0b      	ldr	r3, [pc, #44]	@ (8000b0c <Set_PWM_Frequency+0x64>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	68fa      	ldr	r2, [r7, #12]
 8000ae4:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ae6:	4a09      	ldr	r2, [pc, #36]	@ (8000b0c <Set_PWM_Frequency+0x64>)
 8000ae8:	68fb      	ldr	r3, [r7, #12]
 8000aea:	60d3      	str	r3, [r2, #12]
    __HAL_TIM_SET_COMPARE(&htim12, TIM_CHANNEL_2, period / 2); // Wypełnienie 50%
 8000aec:	4b05      	ldr	r3, [pc, #20]	@ (8000b04 <Set_PWM_Frequency+0x5c>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	68fa      	ldr	r2, [r7, #12]
 8000af2:	0852      	lsrs	r2, r2, #1
 8000af4:	639a      	str	r2, [r3, #56]	@ 0x38
    HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2); // Start PWM
 8000af6:	2104      	movs	r1, #4
 8000af8:	4802      	ldr	r0, [pc, #8]	@ (8000b04 <Set_PWM_Frequency+0x5c>)
 8000afa:	f003 fe7b 	bl	80047f4 <HAL_TIM_PWM_Start>
}
 8000afe:	3718      	adds	r7, #24
 8000b00:	46bd      	mov	sp, r7
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	20000300 	.word	0x20000300
 8000b08:	05b8d800 	.word	0x05b8d800
 8000b0c:	20000138 	.word	0x20000138

08000b10 <ProcessCommand>:
    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY);  // Dodaj nową linię
}

int hornOn = 0;

void ProcessCommand(uint8_t* cmd) {
 8000b10:	b580      	push	{r7, lr}
 8000b12:	b084      	sub	sp, #16
 8000b14:	af00      	add	r7, sp, #0
 8000b16:	6078      	str	r0, [r7, #4]
	// Sprawdź, czy komenda to LIGHTS
	    if (strcmp((char*)cmd, "LIGHTS") == 0) {
 8000b18:	495e      	ldr	r1, [pc, #376]	@ (8000c94 <ProcessCommand+0x184>)
 8000b1a:	6878      	ldr	r0, [r7, #4]
 8000b1c:	f7ff fb8c 	bl	8000238 <strcmp>
 8000b20:	4603      	mov	r3, r0
 8000b22:	2b00      	cmp	r3, #0
 8000b24:	d104      	bne.n	8000b30 <ProcessCommand+0x20>
	        HAL_GPIO_TogglePin(LIGHTS_GPIO_Port, LIGHTS_Pin);
 8000b26:	2101      	movs	r1, #1
 8000b28:	485b      	ldr	r0, [pc, #364]	@ (8000c98 <ProcessCommand+0x188>)
 8000b2a:	f002 fa8a 	bl	8003042 <HAL_GPIO_TogglePin>
	    }
	    // Nieznana komenda
	    else {
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
	    }
}
 8000b2e:	e0ad      	b.n	8000c8c <ProcessCommand+0x17c>
	    else if (strcmp((char*)cmd, "HORN") == 0) {
 8000b30:	495a      	ldr	r1, [pc, #360]	@ (8000c9c <ProcessCommand+0x18c>)
 8000b32:	6878      	ldr	r0, [r7, #4]
 8000b34:	f7ff fb80 	bl	8000238 <strcmp>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d112      	bne.n	8000b64 <ProcessCommand+0x54>
	    	if (!hornOn) {
 8000b3e:	4b58      	ldr	r3, [pc, #352]	@ (8000ca0 <ProcessCommand+0x190>)
 8000b40:	681b      	ldr	r3, [r3, #0]
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d107      	bne.n	8000b56 <ProcessCommand+0x46>
		    	Set_PWM_Frequency(1000);
 8000b46:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000b4a:	f7ff ffad 	bl	8000aa8 <Set_PWM_Frequency>
		    	hornOn = 1;
 8000b4e:	4b54      	ldr	r3, [pc, #336]	@ (8000ca0 <ProcessCommand+0x190>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
}
 8000b54:	e09a      	b.n	8000c8c <ProcessCommand+0x17c>
	    		Set_PWM_Frequency(0);
 8000b56:	2000      	movs	r0, #0
 8000b58:	f7ff ffa6 	bl	8000aa8 <Set_PWM_Frequency>
	    		hornOn = 0;
 8000b5c:	4b50      	ldr	r3, [pc, #320]	@ (8000ca0 <ProcessCommand+0x190>)
 8000b5e:	2200      	movs	r2, #0
 8000b60:	601a      	str	r2, [r3, #0]
}
 8000b62:	e093      	b.n	8000c8c <ProcessCommand+0x17c>
	    else if (strncmp((char*)cmd, "MOTOR", 5) == 0) { // Sprawdź, czy zaczyna się od "MOTOR"
 8000b64:	2205      	movs	r2, #5
 8000b66:	494f      	ldr	r1, [pc, #316]	@ (8000ca4 <ProcessCommand+0x194>)
 8000b68:	6878      	ldr	r0, [r7, #4]
 8000b6a:	f007 fc60 	bl	800842e <strncmp>
 8000b6e:	4603      	mov	r3, r0
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	f040 8084 	bne.w	8000c7e <ProcessCommand+0x16e>
	        char* modeStr = (char*)cmd + 5; // Wskaźnik na część po "MOTOR"
 8000b76:	687b      	ldr	r3, [r7, #4]
 8000b78:	3305      	adds	r3, #5
 8000b7a:	60fb      	str	r3, [r7, #12]
	        int mode = atoi(modeStr);       // Zamiana cyfry trybu na liczbę całkowitą
 8000b7c:	68f8      	ldr	r0, [r7, #12]
 8000b7e:	f007 fafb 	bl	8008178 <atoi>
 8000b82:	60b8      	str	r0, [r7, #8]
	        if (mode >= 0 && mode <= 8) {   // Sprawdzenie, czy tryb mieści się w zakresie 0-8
 8000b84:	68bb      	ldr	r3, [r7, #8]
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	db71      	blt.n	8000c6e <ProcessCommand+0x15e>
 8000b8a:	68bb      	ldr	r3, [r7, #8]
 8000b8c:	2b08      	cmp	r3, #8
 8000b8e:	dc6e      	bgt.n	8000c6e <ProcessCommand+0x15e>
	            switch (mode) {
 8000b90:	68bb      	ldr	r3, [r7, #8]
 8000b92:	2b08      	cmp	r3, #8
 8000b94:	d868      	bhi.n	8000c68 <ProcessCommand+0x158>
 8000b96:	a201      	add	r2, pc, #4	@ (adr r2, 8000b9c <ProcessCommand+0x8c>)
 8000b98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000b9c:	08000bc1 	.word	0x08000bc1
 8000ba0:	08000bd9 	.word	0x08000bd9
 8000ba4:	08000bf1 	.word	0x08000bf1
 8000ba8:	08000c09 	.word	0x08000c09
 8000bac:	08000c19 	.word	0x08000c19
 8000bb0:	08000c29 	.word	0x08000c29
 8000bb4:	08000c39 	.word	0x08000c39
 8000bb8:	08000c49 	.word	0x08000c49
 8000bbc:	08000c59 	.word	0x08000c59
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR0 selected\r\n", 18, HAL_MAX_DELAY);
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bc4:	2212      	movs	r2, #18
 8000bc6:	4938      	ldr	r1, [pc, #224]	@ (8000ca8 <ProcessCommand+0x198>)
 8000bc8:	4838      	ldr	r0, [pc, #224]	@ (8000cac <ProcessCommand+0x19c>)
 8000bca:	f004 ff2f 	bl	8005a2c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 0);
 8000bce:	2100      	movs	r1, #0
 8000bd0:	4837      	ldr	r0, [pc, #220]	@ (8000cb0 <ProcessCommand+0x1a0>)
 8000bd2:	f7ff ff14 	bl	80009fe <motor_set_speed>
	                    break;
 8000bd6:	e048      	b.n	8000c6a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR1 selected\r\n", 18, HAL_MAX_DELAY);
 8000bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8000bdc:	2212      	movs	r2, #18
 8000bde:	4935      	ldr	r1, [pc, #212]	@ (8000cb4 <ProcessCommand+0x1a4>)
 8000be0:	4832      	ldr	r0, [pc, #200]	@ (8000cac <ProcessCommand+0x19c>)
 8000be2:	f004 ff23 	bl	8005a2c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 100);
 8000be6:	2164      	movs	r1, #100	@ 0x64
 8000be8:	4831      	ldr	r0, [pc, #196]	@ (8000cb0 <ProcessCommand+0x1a0>)
 8000bea:	f7ff ff08 	bl	80009fe <motor_set_speed>
	                    break;
 8000bee:	e03c      	b.n	8000c6a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR2 selected\r\n", 18, HAL_MAX_DELAY);
 8000bf0:	f04f 33ff 	mov.w	r3, #4294967295
 8000bf4:	2212      	movs	r2, #18
 8000bf6:	4930      	ldr	r1, [pc, #192]	@ (8000cb8 <ProcessCommand+0x1a8>)
 8000bf8:	482c      	ldr	r0, [pc, #176]	@ (8000cac <ProcessCommand+0x19c>)
 8000bfa:	f004 ff17 	bl	8005a2c <HAL_UART_Transmit>
	                    motor_set_speed(&motorA, 75);
 8000bfe:	214b      	movs	r1, #75	@ 0x4b
 8000c00:	482b      	ldr	r0, [pc, #172]	@ (8000cb0 <ProcessCommand+0x1a0>)
 8000c02:	f7ff fefc 	bl	80009fe <motor_set_speed>
	                    break;
 8000c06:	e030      	b.n	8000c6a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR3 selected\r\n", 18, HAL_MAX_DELAY);
 8000c08:	f04f 33ff 	mov.w	r3, #4294967295
 8000c0c:	2212      	movs	r2, #18
 8000c0e:	492b      	ldr	r1, [pc, #172]	@ (8000cbc <ProcessCommand+0x1ac>)
 8000c10:	4826      	ldr	r0, [pc, #152]	@ (8000cac <ProcessCommand+0x19c>)
 8000c12:	f004 ff0b 	bl	8005a2c <HAL_UART_Transmit>
	                    break;
 8000c16:	e028      	b.n	8000c6a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR4 selected\r\n", 18, HAL_MAX_DELAY);
 8000c18:	f04f 33ff 	mov.w	r3, #4294967295
 8000c1c:	2212      	movs	r2, #18
 8000c1e:	4928      	ldr	r1, [pc, #160]	@ (8000cc0 <ProcessCommand+0x1b0>)
 8000c20:	4822      	ldr	r0, [pc, #136]	@ (8000cac <ProcessCommand+0x19c>)
 8000c22:	f004 ff03 	bl	8005a2c <HAL_UART_Transmit>
	                    break;
 8000c26:	e020      	b.n	8000c6a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR5 selected\r\n", 18, HAL_MAX_DELAY);
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295
 8000c2c:	2212      	movs	r2, #18
 8000c2e:	4925      	ldr	r1, [pc, #148]	@ (8000cc4 <ProcessCommand+0x1b4>)
 8000c30:	481e      	ldr	r0, [pc, #120]	@ (8000cac <ProcessCommand+0x19c>)
 8000c32:	f004 fefb 	bl	8005a2c <HAL_UART_Transmit>
	                    break;
 8000c36:	e018      	b.n	8000c6a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR6 selected\r\n", 18, HAL_MAX_DELAY);
 8000c38:	f04f 33ff 	mov.w	r3, #4294967295
 8000c3c:	2212      	movs	r2, #18
 8000c3e:	4922      	ldr	r1, [pc, #136]	@ (8000cc8 <ProcessCommand+0x1b8>)
 8000c40:	481a      	ldr	r0, [pc, #104]	@ (8000cac <ProcessCommand+0x19c>)
 8000c42:	f004 fef3 	bl	8005a2c <HAL_UART_Transmit>
	                    break;
 8000c46:	e010      	b.n	8000c6a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR7 selected\r\n", 18, HAL_MAX_DELAY);
 8000c48:	f04f 33ff 	mov.w	r3, #4294967295
 8000c4c:	2212      	movs	r2, #18
 8000c4e:	491f      	ldr	r1, [pc, #124]	@ (8000ccc <ProcessCommand+0x1bc>)
 8000c50:	4816      	ldr	r0, [pc, #88]	@ (8000cac <ProcessCommand+0x19c>)
 8000c52:	f004 feeb 	bl	8005a2c <HAL_UART_Transmit>
	                    break;
 8000c56:	e008      	b.n	8000c6a <ProcessCommand+0x15a>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"MOTOR8 selected\r\n", 18, HAL_MAX_DELAY);
 8000c58:	f04f 33ff 	mov.w	r3, #4294967295
 8000c5c:	2212      	movs	r2, #18
 8000c5e:	491c      	ldr	r1, [pc, #112]	@ (8000cd0 <ProcessCommand+0x1c0>)
 8000c60:	4812      	ldr	r0, [pc, #72]	@ (8000cac <ProcessCommand+0x19c>)
 8000c62:	f004 fee3 	bl	8005a2c <HAL_UART_Transmit>
	                    break;
 8000c66:	e000      	b.n	8000c6a <ProcessCommand+0x15a>
	                    break; // Nie powinno wystąpić
 8000c68:	bf00      	nop
	            switch (mode) {
 8000c6a:	bf00      	nop
}
 8000c6c:	e00e      	b.n	8000c8c <ProcessCommand+0x17c>
	            HAL_UART_Transmit(&huart3, (uint8_t *)"Invalid MOTOR mode\r\n", 21, HAL_MAX_DELAY);
 8000c6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c72:	2215      	movs	r2, #21
 8000c74:	4917      	ldr	r1, [pc, #92]	@ (8000cd4 <ProcessCommand+0x1c4>)
 8000c76:	480d      	ldr	r0, [pc, #52]	@ (8000cac <ProcessCommand+0x19c>)
 8000c78:	f004 fed8 	bl	8005a2c <HAL_UART_Transmit>
}
 8000c7c:	e006      	b.n	8000c8c <ProcessCommand+0x17c>
	        HAL_UART_Transmit(&huart3, (uint8_t *)"Unknown command\r\n", 17, HAL_MAX_DELAY);
 8000c7e:	f04f 33ff 	mov.w	r3, #4294967295
 8000c82:	2211      	movs	r2, #17
 8000c84:	4914      	ldr	r1, [pc, #80]	@ (8000cd8 <ProcessCommand+0x1c8>)
 8000c86:	4809      	ldr	r0, [pc, #36]	@ (8000cac <ProcessCommand+0x19c>)
 8000c88:	f004 fed0 	bl	8005a2c <HAL_UART_Transmit>
}
 8000c8c:	bf00      	nop
 8000c8e:	3710      	adds	r7, #16
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	080085f8 	.word	0x080085f8
 8000c98:	40021800 	.word	0x40021800
 8000c9c:	08008600 	.word	0x08008600
 8000ca0:	200000e4 	.word	0x200000e4
 8000ca4:	08008608 	.word	0x08008608
 8000ca8:	08008610 	.word	0x08008610
 8000cac:	200003d4 	.word	0x200003d4
 8000cb0:	200000b4 	.word	0x200000b4
 8000cb4:	08008624 	.word	0x08008624
 8000cb8:	08008638 	.word	0x08008638
 8000cbc:	0800864c 	.word	0x0800864c
 8000cc0:	08008660 	.word	0x08008660
 8000cc4:	08008674 	.word	0x08008674
 8000cc8:	08008688 	.word	0x08008688
 8000ccc:	0800869c 	.word	0x0800869c
 8000cd0:	080086b0 	.word	0x080086b0
 8000cd4:	080086c4 	.word	0x080086c4
 8000cd8:	080086dc 	.word	0x080086dc

08000cdc <ProcessIncomingData>:

// Funkcja obsługująca przetwarzanie danych przychodzących przez ESP
void ProcessIncomingData() {
 8000cdc:	b580      	push	{r7, lr}
 8000cde:	b086      	sub	sp, #24
 8000ce0:	af02      	add	r7, sp, #8
	char *response = NULL; // Wskaźnik na odebrane dane
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	603b      	str	r3, [r7, #0]
	    while (1) {
	        // Oczekiwanie na odpowiedź zawierającą +IPD
	        int result = ATC_Receive(&ESP, &response, 5000, 1, "+IPD,");
 8000ce6:	4639      	mov	r1, r7
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	@ (8000d68 <ProcessIncomingData+0x8c>)
 8000cea:	9300      	str	r3, [sp, #0]
 8000cec:	2301      	movs	r3, #1
 8000cee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000cf2:	481e      	ldr	r0, [pc, #120]	@ (8000d6c <ProcessIncomingData+0x90>)
 8000cf4:	f007 f920 	bl	8007f38 <ATC_Receive>
 8000cf8:	60f8      	str	r0, [r7, #12]
	        if (result > 0 && response != NULL) {
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	2b00      	cmp	r3, #0
 8000cfe:	dd2e      	ble.n	8000d5e <ProcessIncomingData+0x82>
 8000d00:	683b      	ldr	r3, [r7, #0]
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d02b      	beq.n	8000d5e <ProcessIncomingData+0x82>
	            // Przetwarzanie odpowiedzi zawierającej +IPD
	            char *ipdStart = strstr(response, "+IPD,");
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	4917      	ldr	r1, [pc, #92]	@ (8000d68 <ProcessIncomingData+0x8c>)
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	f007 fbb4 	bl	8008478 <strstr>
 8000d10:	60b8      	str	r0, [r7, #8]
	            if (ipdStart != NULL) {
 8000d12:	68bb      	ldr	r3, [r7, #8]
 8000d14:	2b00      	cmp	r3, #0
 8000d16:	d01f      	beq.n	8000d58 <ProcessIncomingData+0x7c>
	                // Znajdź początek danych (po dwukropku ':')
	                char *dataStart = strchr(ipdStart, ':');
 8000d18:	213a      	movs	r1, #58	@ 0x3a
 8000d1a:	68b8      	ldr	r0, [r7, #8]
 8000d1c:	f007 fb7a 	bl	8008414 <strchr>
 8000d20:	6078      	str	r0, [r7, #4]
	                if (dataStart != NULL) {
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b00      	cmp	r3, #0
 8000d26:	d017      	beq.n	8000d58 <ProcessIncomingData+0x7c>
	                    dataStart++; // Przesuń za dwukropek, aby przejść do danych
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	3301      	adds	r3, #1
 8000d2c:	607b      	str	r3, [r7, #4]
	                    // Wyślij dane na UART3
	                    HAL_UART_Transmit(&huart3, (uint8_t *)dataStart, strlen(dataStart), HAL_MAX_DELAY);
 8000d2e:	6878      	ldr	r0, [r7, #4]
 8000d30:	f7ff fa8c 	bl	800024c <strlen>
 8000d34:	4603      	mov	r3, r0
 8000d36:	b29a      	uxth	r2, r3
 8000d38:	f04f 33ff 	mov.w	r3, #4294967295
 8000d3c:	6879      	ldr	r1, [r7, #4]
 8000d3e:	480c      	ldr	r0, [pc, #48]	@ (8000d70 <ProcessIncomingData+0x94>)
 8000d40:	f004 fe74 	bl	8005a2c <HAL_UART_Transmit>
	                    HAL_UART_Transmit(&huart3, (uint8_t *)"\r\n", 2, HAL_MAX_DELAY); // Nowa linia dla przejrzystości
 8000d44:	f04f 33ff 	mov.w	r3, #4294967295
 8000d48:	2202      	movs	r2, #2
 8000d4a:	490a      	ldr	r1, [pc, #40]	@ (8000d74 <ProcessIncomingData+0x98>)
 8000d4c:	4808      	ldr	r0, [pc, #32]	@ (8000d70 <ProcessIncomingData+0x94>)
 8000d4e:	f004 fe6d 	bl	8005a2c <HAL_UART_Transmit>
	                    ProcessCommand((uint8_t *)dataStart);
 8000d52:	6878      	ldr	r0, [r7, #4]
 8000d54:	f7ff fedc 	bl	8000b10 <ProcessCommand>
	                }
	            }
	            ATC_RxFlush(&ESP); // Wyczyść bufor dla nowych danych
 8000d58:	4804      	ldr	r0, [pc, #16]	@ (8000d6c <ProcessIncomingData+0x90>)
 8000d5a:	f006 fe07 	bl	800796c <ATC_RxFlush>
	        }

	        // Wywołanie głównej pętli ATC
	        ATC_Loop(&ESP);
 8000d5e:	4803      	ldr	r0, [pc, #12]	@ (8000d6c <ProcessIncomingData+0x90>)
 8000d60:	f006 fffd 	bl	8007d5e <ATC_Loop>
	    while (1) {
 8000d64:	e7bf      	b.n	8000ce6 <ProcessIncomingData+0xa>
 8000d66:	bf00      	nop
 8000d68:	080086f0 	.word	0x080086f0
 8000d6c:	20000078 	.word	0x20000078
 8000d70:	200003d4 	.word	0x200003d4
 8000d74:	080085f4 	.word	0x080085f4

08000d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b084      	sub	sp, #16
 8000d7c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d7e:	f001 f9f2 	bl	8002166 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d82:	f000 f8d3 	bl	8000f2c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d86:	f7ff fc07 	bl	8000598 <MX_GPIO_Init>
  MX_DMA_Init();
 8000d8a:	f7ff fbdf 	bl	800054c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000d8e:	f000 ffd1 	bl	8001d34 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000d92:	f001 f917 	bl	8001fc4 <MX_USB_OTG_FS_PCD_Init>
  MX_USART2_UART_Init();
 8000d96:	f000 ff9d 	bl	8001cd4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000d9a:	f000 fa89 	bl	80012b0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000d9e:	f000 fb45 	bl	800142c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000da2:	f000 fb99 	bl	80014d8 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000da6:	f000 fc8b 	bl	80016c0 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000daa:	f000 fadb 	bl	8001364 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000dae:	f000 fc4f 	bl	8001650 <MX_TIM6_Init>
  MX_TIM5_Init();
 8000db2:	f000 fbe7 	bl	8001584 <MX_TIM5_Init>
  MX_TIM12_Init();
 8000db6:	f000 fcdd 	bl	8001774 <MX_TIM12_Init>
  /* USER CODE BEGIN 2 */

  ATC_Init(&ESP, &huart2, 512, "ESP");
 8000dba:	4b47      	ldr	r3, [pc, #284]	@ (8000ed8 <main+0x160>)
 8000dbc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000dc0:	4946      	ldr	r1, [pc, #280]	@ (8000edc <main+0x164>)
 8000dc2:	4847      	ldr	r0, [pc, #284]	@ (8000ee0 <main+0x168>)
 8000dc4:	f006 ff26 	bl	8007c14 <ATC_Init>
  ATC_SendReceive(&ESP, "AT\r\n", 1000, NULL, 1000, 0);
 8000dc8:	2300      	movs	r3, #0
 8000dca:	9301      	str	r3, [sp, #4]
 8000dcc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dd0:	9300      	str	r3, [sp, #0]
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000dd8:	4942      	ldr	r1, [pc, #264]	@ (8000ee4 <main+0x16c>)
 8000dda:	4841      	ldr	r0, [pc, #260]	@ (8000ee0 <main+0x168>)
 8000ddc:	f006 ffcd 	bl	8007d7a <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWMODE=1\r\n", 1000, NULL, 1000, 0);
 8000de0:	2300      	movs	r3, #0
 8000de2:	9301      	str	r3, [sp, #4]
 8000de4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000de8:	9300      	str	r3, [sp, #0]
 8000dea:	2300      	movs	r3, #0
 8000dec:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000df0:	493d      	ldr	r1, [pc, #244]	@ (8000ee8 <main+0x170>)
 8000df2:	483b      	ldr	r0, [pc, #236]	@ (8000ee0 <main+0x168>)
 8000df4:	f006 ffc1 	bl	8007d7a <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMUX=1\r\n", 1000, NULL, 1000, 0);
 8000df8:	2300      	movs	r3, #0
 8000dfa:	9301      	str	r3, [sp, #4]
 8000dfc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e00:	9300      	str	r3, [sp, #0]
 8000e02:	2300      	movs	r3, #0
 8000e04:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e08:	4938      	ldr	r1, [pc, #224]	@ (8000eec <main+0x174>)
 8000e0a:	4835      	ldr	r0, [pc, #212]	@ (8000ee0 <main+0x168>)
 8000e0c:	f006 ffb5 	bl	8007d7a <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPMODE=1\r\n", 1000, NULL, 1000, 0);
 8000e10:	2300      	movs	r3, #0
 8000e12:	9301      	str	r3, [sp, #4]
 8000e14:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e18:	9300      	str	r3, [sp, #0]
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e20:	4933      	ldr	r1, [pc, #204]	@ (8000ef0 <main+0x178>)
 8000e22:	482f      	ldr	r0, [pc, #188]	@ (8000ee0 <main+0x168>)
 8000e24:	f006 ffa9 	bl	8007d7a <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CIPSERVER=1,80\r\n", 1000, NULL, 1000, 0);
 8000e28:	2300      	movs	r3, #0
 8000e2a:	9301      	str	r3, [sp, #4]
 8000e2c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e30:	9300      	str	r3, [sp, #0]
 8000e32:	2300      	movs	r3, #0
 8000e34:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8000e38:	492e      	ldr	r1, [pc, #184]	@ (8000ef4 <main+0x17c>)
 8000e3a:	4829      	ldr	r0, [pc, #164]	@ (8000ee0 <main+0x168>)
 8000e3c:	f006 ff9d 	bl	8007d7a <ATC_SendReceive>
  ATC_SendReceive(&ESP, "AT+CWJAP=\"DeathLock\",\"\"\r\n", 10000, NULL, 10000, 0);
 8000e40:	2300      	movs	r3, #0
 8000e42:	9301      	str	r3, [sp, #4]
 8000e44:	f242 7310 	movw	r3, #10000	@ 0x2710
 8000e48:	9300      	str	r3, [sp, #0]
 8000e4a:	2300      	movs	r3, #0
 8000e4c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8000e50:	4929      	ldr	r1, [pc, #164]	@ (8000ef8 <main+0x180>)
 8000e52:	4823      	ldr	r0, [pc, #140]	@ (8000ee0 <main+0x168>)
 8000e54:	f006 ff91 	bl	8007d7a <ATC_SendReceive>

  const char *readyMsg = "STM32 ready to receive data from ESP...\r\n";
 8000e58:	4b28      	ldr	r3, [pc, #160]	@ (8000efc <main+0x184>)
 8000e5a:	607b      	str	r3, [r7, #4]
  HAL_UART_Transmit(&huart3, (uint8_t *)readyMsg, strlen(readyMsg), HAL_MAX_DELAY);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff f9f5 	bl	800024c <strlen>
 8000e62:	4603      	mov	r3, r0
 8000e64:	b29a      	uxth	r2, r3
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295
 8000e6a:	6879      	ldr	r1, [r7, #4]
 8000e6c:	4824      	ldr	r0, [pc, #144]	@ (8000f00 <main+0x188>)
 8000e6e:	f004 fddd 	bl	8005a2c <HAL_UART_Transmit>

  HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8000e72:	213c      	movs	r1, #60	@ 0x3c
 8000e74:	4823      	ldr	r0, [pc, #140]	@ (8000f04 <main+0x18c>)
 8000e76:	f003 fedd 	bl	8004c34 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000e7a:	213c      	movs	r1, #60	@ 0x3c
 8000e7c:	4822      	ldr	r0, [pc, #136]	@ (8000f08 <main+0x190>)
 8000e7e:	f003 fed9 	bl	8004c34 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim4, TIM_CHANNEL_ALL);
 8000e82:	213c      	movs	r1, #60	@ 0x3c
 8000e84:	4821      	ldr	r0, [pc, #132]	@ (8000f0c <main+0x194>)
 8000e86:	f003 fed5 	bl	8004c34 <HAL_TIM_Encoder_Start>
  HAL_TIM_Encoder_Start(&htim8, TIM_CHANNEL_ALL);
 8000e8a:	213c      	movs	r1, #60	@ 0x3c
 8000e8c:	4820      	ldr	r0, [pc, #128]	@ (8000f10 <main+0x198>)
 8000e8e:	f003 fed1 	bl	8004c34 <HAL_TIM_Encoder_Start>

  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000e92:	2100      	movs	r1, #0
 8000e94:	481f      	ldr	r0, [pc, #124]	@ (8000f14 <main+0x19c>)
 8000e96:	f003 fcad 	bl	80047f4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_4);
 8000e9a:	210c      	movs	r1, #12
 8000e9c:	481d      	ldr	r0, [pc, #116]	@ (8000f14 <main+0x19c>)
 8000e9e:	f003 fca9 	bl	80047f4 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim6);
 8000ea2:	481d      	ldr	r0, [pc, #116]	@ (8000f18 <main+0x1a0>)
 8000ea4:	f003 fbd6 	bl	8004654 <HAL_TIM_Base_Start_IT>

  HAL_TIM_PWM_Start(&htim12, TIM_CHANNEL_2);
 8000ea8:	2104      	movs	r1, #4
 8000eaa:	481c      	ldr	r0, [pc, #112]	@ (8000f1c <main+0x1a4>)
 8000eac:	f003 fca2 	bl	80047f4 <HAL_TIM_PWM_Start>

  drv8835_init();
 8000eb0:	f7ff fdd8 	bl	8000a64 <drv8835_init>
  motor_init(&motorA, &htim4);
 8000eb4:	4915      	ldr	r1, [pc, #84]	@ (8000f0c <main+0x194>)
 8000eb6:	481a      	ldr	r0, [pc, #104]	@ (8000f20 <main+0x1a8>)
 8000eb8:	f7ff fd3b 	bl	8000932 <motor_init>
  pid_init(&(motorA.pid_controller), MOTOR_A_Kp, MOTOR_A_Ki, MOTOR_A_Kd, MOTOR_A_ANTI_WINDUP);
 8000ebc:	2101      	movs	r1, #1
 8000ebe:	ed9f 1a19 	vldr	s2, [pc, #100]	@ 8000f24 <main+0x1ac>
 8000ec2:	eddf 0a18 	vldr	s1, [pc, #96]	@ 8000f24 <main+0x1ac>
 8000ec6:	eeb0 0a08 	vmov.f32	s0, #8	@ 0x40400000  3.0
 8000eca:	4817      	ldr	r0, [pc, #92]	@ (8000f28 <main+0x1b0>)
 8000ecc:	f7ff fc82 	bl	80007d4 <pid_init>
  ProcessIncomingData();
 8000ed0:	f7ff ff04 	bl	8000cdc <ProcessIncomingData>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000ed4:	bf00      	nop
 8000ed6:	e7fd      	b.n	8000ed4 <main+0x15c>
 8000ed8:	080086f8 	.word	0x080086f8
 8000edc:	2000034c 	.word	0x2000034c
 8000ee0:	20000078 	.word	0x20000078
 8000ee4:	080086fc 	.word	0x080086fc
 8000ee8:	08008704 	.word	0x08008704
 8000eec:	08008714 	.word	0x08008714
 8000ef0:	08008724 	.word	0x08008724
 8000ef4:	08008734 	.word	0x08008734
 8000ef8:	08008748 	.word	0x08008748
 8000efc:	08008764 	.word	0x08008764
 8000f00:	200003d4 	.word	0x200003d4
 8000f04:	200000ec 	.word	0x200000ec
 8000f08:	20000184 	.word	0x20000184
 8000f0c:	200001d0 	.word	0x200001d0
 8000f10:	200002b4 	.word	0x200002b4
 8000f14:	20000138 	.word	0x20000138
 8000f18:	20000268 	.word	0x20000268
 8000f1c:	20000300 	.word	0x20000300
 8000f20:	200000b4 	.word	0x200000b4
 8000f24:	3d4ccccd 	.word	0x3d4ccccd
 8000f28:	200000cc 	.word	0x200000cc

08000f2c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b094      	sub	sp, #80	@ 0x50
 8000f30:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f32:	f107 031c 	add.w	r3, r7, #28
 8000f36:	2234      	movs	r2, #52	@ 0x34
 8000f38:	2100      	movs	r1, #0
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	f007 fa62 	bl	8008404 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f40:	f107 0308 	add.w	r3, r7, #8
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f50:	f002 f9cc 	bl	80032ec <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f54:	4b2c      	ldr	r3, [pc, #176]	@ (8001008 <SystemClock_Config+0xdc>)
 8000f56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f58:	4a2b      	ldr	r2, [pc, #172]	@ (8001008 <SystemClock_Config+0xdc>)
 8000f5a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000f5e:	6413      	str	r3, [r2, #64]	@ 0x40
 8000f60:	4b29      	ldr	r3, [pc, #164]	@ (8001008 <SystemClock_Config+0xdc>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f6c:	4b27      	ldr	r3, [pc, #156]	@ (800100c <SystemClock_Config+0xe0>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8000f74:	4a25      	ldr	r2, [pc, #148]	@ (800100c <SystemClock_Config+0xe0>)
 8000f76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000f7a:	6013      	str	r3, [r2, #0]
 8000f7c:	4b23      	ldr	r3, [pc, #140]	@ (800100c <SystemClock_Config+0xe0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000f8c:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8000f90:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f92:	2302      	movs	r3, #2
 8000f94:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f96:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000f9a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 96;
 8000fa0:	2360      	movs	r3, #96	@ 0x60
 8000fa2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000fac:	2302      	movs	r3, #2
 8000fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb0:	f107 031c 	add.w	r3, r7, #28
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	f002 f9f9 	bl	80033ac <HAL_RCC_OscConfig>
 8000fba:	4603      	mov	r3, r0
 8000fbc:	2b00      	cmp	r3, #0
 8000fbe:	d001      	beq.n	8000fc4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000fc0:	f000 f826 	bl	8001010 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000fc4:	f002 f9a2 	bl	800330c <HAL_PWREx_EnableOverDrive>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8000fce:	f000 f81f 	bl	8001010 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fd2:	230f      	movs	r3, #15
 8000fd4:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd6:	2302      	movs	r3, #2
 8000fd8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fde:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fe2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8000fe8:	f107 0308 	add.w	r3, r7, #8
 8000fec:	2103      	movs	r1, #3
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f002 fc8a 	bl	8003908 <HAL_RCC_ClockConfig>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <SystemClock_Config+0xd2>
  {
    Error_Handler();
 8000ffa:	f000 f809 	bl	8001010 <Error_Handler>
  }
}
 8000ffe:	bf00      	nop
 8001000:	3750      	adds	r7, #80	@ 0x50
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023800 	.word	0x40023800
 800100c:	40007000 	.word	0x40007000

08001010 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001010:	b480      	push	{r7}
 8001012:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001014:	b672      	cpsid	i
}
 8001016:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001018:	bf00      	nop
 800101a:	e7fd      	b.n	8001018 <Error_Handler+0x8>

0800101c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800101c:	b480      	push	{r7}
 800101e:	b083      	sub	sp, #12
 8001020:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001022:	4b0f      	ldr	r3, [pc, #60]	@ (8001060 <HAL_MspInit+0x44>)
 8001024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001026:	4a0e      	ldr	r2, [pc, #56]	@ (8001060 <HAL_MspInit+0x44>)
 8001028:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800102c:	6413      	str	r3, [r2, #64]	@ 0x40
 800102e:	4b0c      	ldr	r3, [pc, #48]	@ (8001060 <HAL_MspInit+0x44>)
 8001030:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001032:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001036:	607b      	str	r3, [r7, #4]
 8001038:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800103a:	4b09      	ldr	r3, [pc, #36]	@ (8001060 <HAL_MspInit+0x44>)
 800103c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800103e:	4a08      	ldr	r2, [pc, #32]	@ (8001060 <HAL_MspInit+0x44>)
 8001040:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001044:	6453      	str	r3, [r2, #68]	@ 0x44
 8001046:	4b06      	ldr	r3, [pc, #24]	@ (8001060 <HAL_MspInit+0x44>)
 8001048:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800104a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800104e:	603b      	str	r3, [r7, #0]
 8001050:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001052:	bf00      	nop
 8001054:	370c      	adds	r7, #12
 8001056:	46bd      	mov	sp, r7
 8001058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105c:	4770      	bx	lr
 800105e:	bf00      	nop
 8001060:	40023800 	.word	0x40023800

08001064 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001064:	b480      	push	{r7}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001068:	bf00      	nop
 800106a:	e7fd      	b.n	8001068 <NMI_Handler+0x4>

0800106c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001070:	bf00      	nop
 8001072:	e7fd      	b.n	8001070 <HardFault_Handler+0x4>

08001074 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001074:	b480      	push	{r7}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001078:	bf00      	nop
 800107a:	e7fd      	b.n	8001078 <MemManage_Handler+0x4>

0800107c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800107c:	b480      	push	{r7}
 800107e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001080:	bf00      	nop
 8001082:	e7fd      	b.n	8001080 <BusFault_Handler+0x4>

08001084 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001084:	b480      	push	{r7}
 8001086:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001088:	bf00      	nop
 800108a:	e7fd      	b.n	8001088 <UsageFault_Handler+0x4>

0800108c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001090:	bf00      	nop
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr

0800109a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800109a:	b480      	push	{r7}
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800109e:	bf00      	nop
 80010a0:	46bd      	mov	sp, r7
 80010a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a6:	4770      	bx	lr

080010a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80010a8:	b480      	push	{r7}
 80010aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80010ac:	bf00      	nop
 80010ae:	46bd      	mov	sp, r7
 80010b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b4:	4770      	bx	lr

080010b6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80010b6:	b580      	push	{r7, lr}
 80010b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80010ba:	f001 f891 	bl	80021e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80010be:	bf00      	nop
 80010c0:	bd80      	pop	{r7, pc}
	...

080010c4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <DMA1_Stream5_IRQHandler+0x10>)
 80010ca:	f001 fb7f 	bl	80027cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	2000045c 	.word	0x2000045c

080010d8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 80010dc:	4802      	ldr	r0, [pc, #8]	@ (80010e8 <DMA1_Stream6_IRQHandler+0x10>)
 80010de:	f001 fb75 	bl	80027cc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 80010e2:	bf00      	nop
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	200004bc 	.word	0x200004bc

080010ec <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80010f0:	4802      	ldr	r0, [pc, #8]	@ (80010fc <TIM1_BRK_TIM9_IRQHandler+0x10>)
 80010f2:	f003 fe2d 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	200000ec 	.word	0x200000ec

08001100 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001104:	4802      	ldr	r0, [pc, #8]	@ (8001110 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001106:	f003 fe23 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 800110a:	bf00      	nop
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	200000ec 	.word	0x200000ec

08001114 <TIM1_TRG_COM_TIM11_IRQHandler>:

/**
  * @brief This function handles TIM1 trigger and commutation interrupts and TIM11 global interrupt.
  */
void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 0 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001118:	4802      	ldr	r0, [pc, #8]	@ (8001124 <TIM1_TRG_COM_TIM11_IRQHandler+0x10>)
 800111a:	f003 fe19 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_TRG_COM_TIM11_IRQn 1 */

  /* USER CODE END TIM1_TRG_COM_TIM11_IRQn 1 */
}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	200000ec 	.word	0x200000ec

08001128 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800112c:	4802      	ldr	r0, [pc, #8]	@ (8001138 <TIM1_CC_IRQHandler+0x10>)
 800112e:	f003 fe0f 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001132:	bf00      	nop
 8001134:	bd80      	pop	{r7, pc}
 8001136:	bf00      	nop
 8001138:	200000ec 	.word	0x200000ec

0800113c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001140:	4802      	ldr	r0, [pc, #8]	@ (800114c <TIM2_IRQHandler+0x10>)
 8001142:	f003 fe05 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001146:	bf00      	nop
 8001148:	bd80      	pop	{r7, pc}
 800114a:	bf00      	nop
 800114c:	20000138 	.word	0x20000138

08001150 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001154:	4802      	ldr	r0, [pc, #8]	@ (8001160 <TIM3_IRQHandler+0x10>)
 8001156:	f003 fdfb 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800115a:	bf00      	nop
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000184 	.word	0x20000184

08001164 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001164:	b580      	push	{r7, lr}
 8001166:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001168:	4802      	ldr	r0, [pc, #8]	@ (8001174 <TIM4_IRQHandler+0x10>)
 800116a:	f003 fdf1 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 800116e:	bf00      	nop
 8001170:	bd80      	pop	{r7, pc}
 8001172:	bf00      	nop
 8001174:	200001d0 	.word	0x200001d0

08001178 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800117c:	4802      	ldr	r0, [pc, #8]	@ (8001188 <USART2_IRQHandler+0x10>)
 800117e:	f004 fe73 	bl	8005e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001182:	bf00      	nop
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	2000034c 	.word	0x2000034c

0800118c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800118c:	b580      	push	{r7, lr}
 800118e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001190:	4802      	ldr	r0, [pc, #8]	@ (800119c <USART3_IRQHandler+0x10>)
 8001192:	f004 fe69 	bl	8005e68 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001196:	bf00      	nop
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	200003d4 	.word	0x200003d4

080011a0 <TIM8_BRK_TIM12_IRQHandler>:

/**
  * @brief This function handles TIM8 break interrupt and TIM12 global interrupt.
  */
void TIM8_BRK_TIM12_IRQHandler(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 0 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80011a4:	4803      	ldr	r0, [pc, #12]	@ (80011b4 <TIM8_BRK_TIM12_IRQHandler+0x14>)
 80011a6:	f003 fdd3 	bl	8004d50 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim12);
 80011aa:	4803      	ldr	r0, [pc, #12]	@ (80011b8 <TIM8_BRK_TIM12_IRQHandler+0x18>)
 80011ac:	f003 fdd0 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_BRK_TIM12_IRQn 1 */

  /* USER CODE END TIM8_BRK_TIM12_IRQn 1 */
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	200002b4 	.word	0x200002b4
 80011b8:	20000300 	.word	0x20000300

080011bc <TIM8_UP_TIM13_IRQHandler>:

/**
  * @brief This function handles TIM8 update interrupt and TIM13 global interrupt.
  */
void TIM8_UP_TIM13_IRQHandler(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 0 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80011c0:	4802      	ldr	r0, [pc, #8]	@ (80011cc <TIM8_UP_TIM13_IRQHandler+0x10>)
 80011c2:	f003 fdc5 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_UP_TIM13_IRQn 1 */

  /* USER CODE END TIM8_UP_TIM13_IRQn 1 */
}
 80011c6:	bf00      	nop
 80011c8:	bd80      	pop	{r7, pc}
 80011ca:	bf00      	nop
 80011cc:	200002b4 	.word	0x200002b4

080011d0 <TIM8_TRG_COM_TIM14_IRQHandler>:

/**
  * @brief This function handles TIM8 trigger and commutation interrupts and TIM14 global interrupt.
  */
void TIM8_TRG_COM_TIM14_IRQHandler(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 0 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80011d4:	4802      	ldr	r0, [pc, #8]	@ (80011e0 <TIM8_TRG_COM_TIM14_IRQHandler+0x10>)
 80011d6:	f003 fdbb 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_TRG_COM_TIM14_IRQn 1 */

  /* USER CODE END TIM8_TRG_COM_TIM14_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	bd80      	pop	{r7, pc}
 80011de:	bf00      	nop
 80011e0:	200002b4 	.word	0x200002b4

080011e4 <TIM8_CC_IRQHandler>:

/**
  * @brief This function handles TIM8 capture compare interrupt.
  */
void TIM8_CC_IRQHandler(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM8_CC_IRQn 0 */

  /* USER CODE END TIM8_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim8);
 80011e8:	4802      	ldr	r0, [pc, #8]	@ (80011f4 <TIM8_CC_IRQHandler+0x10>)
 80011ea:	f003 fdb1 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM8_CC_IRQn 1 */

  /* USER CODE END TIM8_CC_IRQn 1 */
}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200002b4 	.word	0x200002b4

080011f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80011fc:	4802      	ldr	r0, [pc, #8]	@ (8001208 <TIM5_IRQHandler+0x10>)
 80011fe:	f003 fda7 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	2000021c 	.word	0x2000021c

0800120c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001210:	4802      	ldr	r0, [pc, #8]	@ (800121c <TIM6_DAC_IRQHandler+0x10>)
 8001212:	f003 fd9d 	bl	8004d50 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000268 	.word	0x20000268

08001220 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	b086      	sub	sp, #24
 8001224:	af00      	add	r7, sp, #0
 8001226:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001228:	4a14      	ldr	r2, [pc, #80]	@ (800127c <_sbrk+0x5c>)
 800122a:	4b15      	ldr	r3, [pc, #84]	@ (8001280 <_sbrk+0x60>)
 800122c:	1ad3      	subs	r3, r2, r3
 800122e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001230:	697b      	ldr	r3, [r7, #20]
 8001232:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <_sbrk+0x64>)
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	2b00      	cmp	r3, #0
 800123a:	d102      	bne.n	8001242 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800123c:	4b11      	ldr	r3, [pc, #68]	@ (8001284 <_sbrk+0x64>)
 800123e:	4a12      	ldr	r2, [pc, #72]	@ (8001288 <_sbrk+0x68>)
 8001240:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <_sbrk+0x64>)
 8001244:	681a      	ldr	r2, [r3, #0]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	4413      	add	r3, r2
 800124a:	693a      	ldr	r2, [r7, #16]
 800124c:	429a      	cmp	r2, r3
 800124e:	d207      	bcs.n	8001260 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001250:	f007 f938 	bl	80084c4 <__errno>
 8001254:	4603      	mov	r3, r0
 8001256:	220c      	movs	r2, #12
 8001258:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800125a:	f04f 33ff 	mov.w	r3, #4294967295
 800125e:	e009      	b.n	8001274 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <_sbrk+0x64>)
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001266:	4b07      	ldr	r3, [pc, #28]	@ (8001284 <_sbrk+0x64>)
 8001268:	681a      	ldr	r2, [r3, #0]
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	4a05      	ldr	r2, [pc, #20]	@ (8001284 <_sbrk+0x64>)
 8001270:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001272:	68fb      	ldr	r3, [r7, #12]
}
 8001274:	4618      	mov	r0, r3
 8001276:	3718      	adds	r7, #24
 8001278:	46bd      	mov	sp, r7
 800127a:	bd80      	pop	{r7, pc}
 800127c:	20080000 	.word	0x20080000
 8001280:	00000400 	.word	0x00000400
 8001284:	200000e8 	.word	0x200000e8
 8001288:	20000b48 	.word	0x20000b48

0800128c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	@ (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	@ (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim8;
TIM_HandleTypeDef htim12;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012b0:	b580      	push	{r7, lr}
 80012b2:	b08c      	sub	sp, #48	@ 0x30
 80012b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012b6:	f107 030c 	add.w	r3, r7, #12
 80012ba:	2224      	movs	r2, #36	@ 0x24
 80012bc:	2100      	movs	r1, #0
 80012be:	4618      	mov	r0, r3
 80012c0:	f007 f8a0 	bl	8008404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012c4:	463b      	mov	r3, r7
 80012c6:	2200      	movs	r2, #0
 80012c8:	601a      	str	r2, [r3, #0]
 80012ca:	605a      	str	r2, [r3, #4]
 80012cc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012ce:	4b23      	ldr	r3, [pc, #140]	@ (800135c <MX_TIM1_Init+0xac>)
 80012d0:	4a23      	ldr	r2, [pc, #140]	@ (8001360 <MX_TIM1_Init+0xb0>)
 80012d2:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012d4:	4b21      	ldr	r3, [pc, #132]	@ (800135c <MX_TIM1_Init+0xac>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80012da:	4b20      	ldr	r3, [pc, #128]	@ (800135c <MX_TIM1_Init+0xac>)
 80012dc:	2210      	movs	r2, #16
 80012de:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 80012e0:	4b1e      	ldr	r3, [pc, #120]	@ (800135c <MX_TIM1_Init+0xac>)
 80012e2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80012e6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012e8:	4b1c      	ldr	r3, [pc, #112]	@ (800135c <MX_TIM1_Init+0xac>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012ee:	4b1b      	ldr	r3, [pc, #108]	@ (800135c <MX_TIM1_Init+0xac>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012f4:	4b19      	ldr	r3, [pc, #100]	@ (800135c <MX_TIM1_Init+0xac>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012fa:	2303      	movs	r3, #3
 80012fc:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012fe:	2300      	movs	r3, #0
 8001300:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001302:	2301      	movs	r3, #1
 8001304:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001306:	2300      	movs	r3, #0
 8001308:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800130a:	230f      	movs	r3, #15
 800130c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800130e:	2300      	movs	r3, #0
 8001310:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001312:	2301      	movs	r3, #1
 8001314:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001316:	2300      	movs	r3, #0
 8001318:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800131a:	230f      	movs	r3, #15
 800131c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800131e:	f107 030c 	add.w	r3, r7, #12
 8001322:	4619      	mov	r1, r3
 8001324:	480d      	ldr	r0, [pc, #52]	@ (800135c <MX_TIM1_Init+0xac>)
 8001326:	f003 fbdf 	bl	8004ae8 <HAL_TIM_Encoder_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_TIM1_Init+0x84>
  {
    Error_Handler();
 8001330:	f7ff fe6e 	bl	8001010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001334:	2300      	movs	r3, #0
 8001336:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001338:	2300      	movs	r3, #0
 800133a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001340:	463b      	mov	r3, r7
 8001342:	4619      	mov	r1, r3
 8001344:	4805      	ldr	r0, [pc, #20]	@ (800135c <MX_TIM1_Init+0xac>)
 8001346:	f004 fa77 	bl	8005838 <HAL_TIMEx_MasterConfigSynchronization>
 800134a:	4603      	mov	r3, r0
 800134c:	2b00      	cmp	r3, #0
 800134e:	d001      	beq.n	8001354 <MX_TIM1_Init+0xa4>
  {
    Error_Handler();
 8001350:	f7ff fe5e 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001354:	bf00      	nop
 8001356:	3730      	adds	r7, #48	@ 0x30
 8001358:	46bd      	mov	sp, r7
 800135a:	bd80      	pop	{r7, pc}
 800135c:	200000ec 	.word	0x200000ec
 8001360:	40010000 	.word	0x40010000

08001364 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	@ 0x28
 8001368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136a:	f107 031c 	add.w	r3, r7, #28
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001376:	463b      	mov	r3, r7
 8001378:	2200      	movs	r2, #0
 800137a:	601a      	str	r2, [r3, #0]
 800137c:	605a      	str	r2, [r3, #4]
 800137e:	609a      	str	r2, [r3, #8]
 8001380:	60da      	str	r2, [r3, #12]
 8001382:	611a      	str	r2, [r3, #16]
 8001384:	615a      	str	r2, [r3, #20]
 8001386:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001388:	4b27      	ldr	r3, [pc, #156]	@ (8001428 <MX_TIM2_Init+0xc4>)
 800138a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800138e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 47;
 8001390:	4b25      	ldr	r3, [pc, #148]	@ (8001428 <MX_TIM2_Init+0xc4>)
 8001392:	222f      	movs	r2, #47	@ 0x2f
 8001394:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b24      	ldr	r3, [pc, #144]	@ (8001428 <MX_TIM2_Init+0xc4>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 800139c:	4b22      	ldr	r3, [pc, #136]	@ (8001428 <MX_TIM2_Init+0xc4>)
 800139e:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80013a2:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <MX_TIM2_Init+0xc4>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013aa:	4b1f      	ldr	r3, [pc, #124]	@ (8001428 <MX_TIM2_Init+0xc4>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80013b0:	481d      	ldr	r0, [pc, #116]	@ (8001428 <MX_TIM2_Init+0xc4>)
 80013b2:	f003 f9c7 	bl	8004744 <HAL_TIM_PWM_Init>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0x5c>
  {
    Error_Handler();
 80013bc:	f7ff fe28 	bl	8001010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c8:	f107 031c 	add.w	r3, r7, #28
 80013cc:	4619      	mov	r1, r3
 80013ce:	4816      	ldr	r0, [pc, #88]	@ (8001428 <MX_TIM2_Init+0xc4>)
 80013d0:	f004 fa32 	bl	8005838 <HAL_TIMEx_MasterConfigSynchronization>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 80013da:	f7ff fe19 	bl	8001010 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80013de:	2360      	movs	r3, #96	@ 0x60
 80013e0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80013e2:	2300      	movs	r3, #0
 80013e4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e6:	2300      	movs	r3, #0
 80013e8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80013ee:	463b      	mov	r3, r7
 80013f0:	2200      	movs	r2, #0
 80013f2:	4619      	mov	r1, r3
 80013f4:	480c      	ldr	r0, [pc, #48]	@ (8001428 <MX_TIM2_Init+0xc4>)
 80013f6:	f003 fdb3 	bl	8004f60 <HAL_TIM_PWM_ConfigChannel>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MX_TIM2_Init+0xa0>
  {
    Error_Handler();
 8001400:	f7ff fe06 	bl	8001010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001404:	463b      	mov	r3, r7
 8001406:	220c      	movs	r2, #12
 8001408:	4619      	mov	r1, r3
 800140a:	4807      	ldr	r0, [pc, #28]	@ (8001428 <MX_TIM2_Init+0xc4>)
 800140c:	f003 fda8 	bl	8004f60 <HAL_TIM_PWM_ConfigChannel>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 8001416:	f7ff fdfb 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800141a:	4803      	ldr	r0, [pc, #12]	@ (8001428 <MX_TIM2_Init+0xc4>)
 800141c:	f000 fbbc 	bl	8001b98 <HAL_TIM_MspPostInit>

}
 8001420:	bf00      	nop
 8001422:	3728      	adds	r7, #40	@ 0x28
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000138 	.word	0x20000138

0800142c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b08c      	sub	sp, #48	@ 0x30
 8001430:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001432:	f107 030c 	add.w	r3, r7, #12
 8001436:	2224      	movs	r2, #36	@ 0x24
 8001438:	2100      	movs	r1, #0
 800143a:	4618      	mov	r0, r3
 800143c:	f006 ffe2 	bl	8008404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001440:	463b      	mov	r3, r7
 8001442:	2200      	movs	r2, #0
 8001444:	601a      	str	r2, [r3, #0]
 8001446:	605a      	str	r2, [r3, #4]
 8001448:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800144a:	4b21      	ldr	r3, [pc, #132]	@ (80014d0 <MX_TIM3_Init+0xa4>)
 800144c:	4a21      	ldr	r2, [pc, #132]	@ (80014d4 <MX_TIM3_Init+0xa8>)
 800144e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001450:	4b1f      	ldr	r3, [pc, #124]	@ (80014d0 <MX_TIM3_Init+0xa4>)
 8001452:	2200      	movs	r2, #0
 8001454:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001456:	4b1e      	ldr	r3, [pc, #120]	@ (80014d0 <MX_TIM3_Init+0xa4>)
 8001458:	2210      	movs	r2, #16
 800145a:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800145c:	4b1c      	ldr	r3, [pc, #112]	@ (80014d0 <MX_TIM3_Init+0xa4>)
 800145e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001462:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001464:	4b1a      	ldr	r3, [pc, #104]	@ (80014d0 <MX_TIM3_Init+0xa4>)
 8001466:	2200      	movs	r2, #0
 8001468:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800146a:	4b19      	ldr	r3, [pc, #100]	@ (80014d0 <MX_TIM3_Init+0xa4>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001470:	2303      	movs	r3, #3
 8001472:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001478:	2301      	movs	r3, #1
 800147a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800147c:	2300      	movs	r3, #0
 800147e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 8001480:	230f      	movs	r3, #15
 8001482:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001484:	2300      	movs	r3, #0
 8001486:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001488:	2301      	movs	r3, #1
 800148a:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800148c:	2300      	movs	r3, #0
 800148e:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 8001490:	230f      	movs	r3, #15
 8001492:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001494:	f107 030c 	add.w	r3, r7, #12
 8001498:	4619      	mov	r1, r3
 800149a:	480d      	ldr	r0, [pc, #52]	@ (80014d0 <MX_TIM3_Init+0xa4>)
 800149c:	f003 fb24 	bl	8004ae8 <HAL_TIM_Encoder_Init>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d001      	beq.n	80014aa <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 80014a6:	f7ff fdb3 	bl	8001010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014aa:	2300      	movs	r3, #0
 80014ac:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014ae:	2300      	movs	r3, #0
 80014b0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014b2:	463b      	mov	r3, r7
 80014b4:	4619      	mov	r1, r3
 80014b6:	4806      	ldr	r0, [pc, #24]	@ (80014d0 <MX_TIM3_Init+0xa4>)
 80014b8:	f004 f9be 	bl	8005838 <HAL_TIMEx_MasterConfigSynchronization>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d001      	beq.n	80014c6 <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 80014c2:	f7ff fda5 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014c6:	bf00      	nop
 80014c8:	3730      	adds	r7, #48	@ 0x30
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bd80      	pop	{r7, pc}
 80014ce:	bf00      	nop
 80014d0:	20000184 	.word	0x20000184
 80014d4:	40000400 	.word	0x40000400

080014d8 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	b08c      	sub	sp, #48	@ 0x30
 80014dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014de:	f107 030c 	add.w	r3, r7, #12
 80014e2:	2224      	movs	r2, #36	@ 0x24
 80014e4:	2100      	movs	r1, #0
 80014e6:	4618      	mov	r0, r3
 80014e8:	f006 ff8c 	bl	8008404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ec:	463b      	mov	r3, r7
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014f6:	4b21      	ldr	r3, [pc, #132]	@ (800157c <MX_TIM4_Init+0xa4>)
 80014f8:	4a21      	ldr	r2, [pc, #132]	@ (8001580 <MX_TIM4_Init+0xa8>)
 80014fa:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014fc:	4b1f      	ldr	r3, [pc, #124]	@ (800157c <MX_TIM4_Init+0xa4>)
 80014fe:	2200      	movs	r2, #0
 8001500:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 8001502:	4b1e      	ldr	r3, [pc, #120]	@ (800157c <MX_TIM4_Init+0xa4>)
 8001504:	2210      	movs	r2, #16
 8001506:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001508:	4b1c      	ldr	r3, [pc, #112]	@ (800157c <MX_TIM4_Init+0xa4>)
 800150a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800150e:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001510:	4b1a      	ldr	r3, [pc, #104]	@ (800157c <MX_TIM4_Init+0xa4>)
 8001512:	2200      	movs	r2, #0
 8001514:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001516:	4b19      	ldr	r3, [pc, #100]	@ (800157c <MX_TIM4_Init+0xa4>)
 8001518:	2200      	movs	r2, #0
 800151a:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800151c:	2303      	movs	r3, #3
 800151e:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001520:	2300      	movs	r3, #0
 8001522:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001524:	2301      	movs	r3, #1
 8001526:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001528:	2300      	movs	r3, #0
 800152a:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800152c:	230f      	movs	r3, #15
 800152e:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001530:	2300      	movs	r3, #0
 8001532:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001534:	2301      	movs	r3, #1
 8001536:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001538:	2300      	movs	r3, #0
 800153a:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800153c:	230f      	movs	r3, #15
 800153e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim4, &sConfig) != HAL_OK)
 8001540:	f107 030c 	add.w	r3, r7, #12
 8001544:	4619      	mov	r1, r3
 8001546:	480d      	ldr	r0, [pc, #52]	@ (800157c <MX_TIM4_Init+0xa4>)
 8001548:	f003 face 	bl	8004ae8 <HAL_TIM_Encoder_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM4_Init+0x7e>
  {
    Error_Handler();
 8001552:	f7ff fd5d 	bl	8001010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800155e:	463b      	mov	r3, r7
 8001560:	4619      	mov	r1, r3
 8001562:	4806      	ldr	r0, [pc, #24]	@ (800157c <MX_TIM4_Init+0xa4>)
 8001564:	f004 f968 	bl	8005838 <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM4_Init+0x9a>
  {
    Error_Handler();
 800156e:	f7ff fd4f 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	3730      	adds	r7, #48	@ 0x30
 8001576:	46bd      	mov	sp, r7
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	200001d0 	.word	0x200001d0
 8001580:	40000800 	.word	0x40000800

08001584 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b08a      	sub	sp, #40	@ 0x28
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800158a:	f107 031c 	add.w	r3, r7, #28
 800158e:	2200      	movs	r2, #0
 8001590:	601a      	str	r2, [r3, #0]
 8001592:	605a      	str	r2, [r3, #4]
 8001594:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001596:	463b      	mov	r3, r7
 8001598:	2200      	movs	r2, #0
 800159a:	601a      	str	r2, [r3, #0]
 800159c:	605a      	str	r2, [r3, #4]
 800159e:	609a      	str	r2, [r3, #8]
 80015a0:	60da      	str	r2, [r3, #12]
 80015a2:	611a      	str	r2, [r3, #16]
 80015a4:	615a      	str	r2, [r3, #20]
 80015a6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80015a8:	4b27      	ldr	r3, [pc, #156]	@ (8001648 <MX_TIM5_Init+0xc4>)
 80015aa:	4a28      	ldr	r2, [pc, #160]	@ (800164c <MX_TIM5_Init+0xc8>)
 80015ac:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 47;
 80015ae:	4b26      	ldr	r3, [pc, #152]	@ (8001648 <MX_TIM5_Init+0xc4>)
 80015b0:	222f      	movs	r2, #47	@ 0x2f
 80015b2:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015b4:	4b24      	ldr	r3, [pc, #144]	@ (8001648 <MX_TIM5_Init+0xc4>)
 80015b6:	2200      	movs	r2, #0
 80015b8:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 999;
 80015ba:	4b23      	ldr	r3, [pc, #140]	@ (8001648 <MX_TIM5_Init+0xc4>)
 80015bc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80015c0:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015c2:	4b21      	ldr	r3, [pc, #132]	@ (8001648 <MX_TIM5_Init+0xc4>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001648 <MX_TIM5_Init+0xc4>)
 80015ca:	2200      	movs	r2, #0
 80015cc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim5) != HAL_OK)
 80015ce:	481e      	ldr	r0, [pc, #120]	@ (8001648 <MX_TIM5_Init+0xc4>)
 80015d0:	f003 f8b8 	bl	8004744 <HAL_TIM_PWM_Init>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM5_Init+0x5a>
  {
    Error_Handler();
 80015da:	f7ff fd19 	bl	8001010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015de:	2300      	movs	r3, #0
 80015e0:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015e2:	2300      	movs	r3, #0
 80015e4:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015e6:	f107 031c 	add.w	r3, r7, #28
 80015ea:	4619      	mov	r1, r3
 80015ec:	4816      	ldr	r0, [pc, #88]	@ (8001648 <MX_TIM5_Init+0xc4>)
 80015ee:	f004 f923 	bl	8005838 <HAL_TIMEx_MasterConfigSynchronization>
 80015f2:	4603      	mov	r3, r0
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d001      	beq.n	80015fc <MX_TIM5_Init+0x78>
  {
    Error_Handler();
 80015f8:	f7ff fd0a 	bl	8001010 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80015fc:	2360      	movs	r3, #96	@ 0x60
 80015fe:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 8001600:	2300      	movs	r3, #0
 8001602:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001604:	2300      	movs	r3, #0
 8001606:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001608:	2300      	movs	r3, #0
 800160a:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800160c:	463b      	mov	r3, r7
 800160e:	2200      	movs	r2, #0
 8001610:	4619      	mov	r1, r3
 8001612:	480d      	ldr	r0, [pc, #52]	@ (8001648 <MX_TIM5_Init+0xc4>)
 8001614:	f003 fca4 	bl	8004f60 <HAL_TIM_PWM_ConfigChannel>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <MX_TIM5_Init+0x9e>
  {
    Error_Handler();
 800161e:	f7ff fcf7 	bl	8001010 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim5, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001622:	463b      	mov	r3, r7
 8001624:	220c      	movs	r2, #12
 8001626:	4619      	mov	r1, r3
 8001628:	4807      	ldr	r0, [pc, #28]	@ (8001648 <MX_TIM5_Init+0xc4>)
 800162a:	f003 fc99 	bl	8004f60 <HAL_TIM_PWM_ConfigChannel>
 800162e:	4603      	mov	r3, r0
 8001630:	2b00      	cmp	r3, #0
 8001632:	d001      	beq.n	8001638 <MX_TIM5_Init+0xb4>
  {
    Error_Handler();
 8001634:	f7ff fcec 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */
  HAL_TIM_MspPostInit(&htim5);
 8001638:	4803      	ldr	r0, [pc, #12]	@ (8001648 <MX_TIM5_Init+0xc4>)
 800163a:	f000 faad 	bl	8001b98 <HAL_TIM_MspPostInit>

}
 800163e:	bf00      	nop
 8001640:	3728      	adds	r7, #40	@ 0x28
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}
 8001646:	bf00      	nop
 8001648:	2000021c 	.word	0x2000021c
 800164c:	40000c00 	.word	0x40000c00

08001650 <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 8001650:	b580      	push	{r7, lr}
 8001652:	b084      	sub	sp, #16
 8001654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001656:	1d3b      	adds	r3, r7, #4
 8001658:	2200      	movs	r2, #0
 800165a:	601a      	str	r2, [r3, #0]
 800165c:	605a      	str	r2, [r3, #4]
 800165e:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001660:	4b15      	ldr	r3, [pc, #84]	@ (80016b8 <MX_TIM6_Init+0x68>)
 8001662:	4a16      	ldr	r2, [pc, #88]	@ (80016bc <MX_TIM6_Init+0x6c>)
 8001664:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 9599;
 8001666:	4b14      	ldr	r3, [pc, #80]	@ (80016b8 <MX_TIM6_Init+0x68>)
 8001668:	f242 527f 	movw	r2, #9599	@ 0x257f
 800166c:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800166e:	4b12      	ldr	r3, [pc, #72]	@ (80016b8 <MX_TIM6_Init+0x68>)
 8001670:	2200      	movs	r2, #0
 8001672:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 999;
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <MX_TIM6_Init+0x68>)
 8001676:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800167a:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800167c:	4b0e      	ldr	r3, [pc, #56]	@ (80016b8 <MX_TIM6_Init+0x68>)
 800167e:	2200      	movs	r2, #0
 8001680:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001682:	480d      	ldr	r0, [pc, #52]	@ (80016b8 <MX_TIM6_Init+0x68>)
 8001684:	f002 ff8e 	bl	80045a4 <HAL_TIM_Base_Init>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800168e:	f7ff fcbf 	bl	8001010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001692:	2300      	movs	r3, #0
 8001694:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001696:	2300      	movs	r3, #0
 8001698:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800169a:	1d3b      	adds	r3, r7, #4
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	@ (80016b8 <MX_TIM6_Init+0x68>)
 80016a0:	f004 f8ca 	bl	8005838 <HAL_TIMEx_MasterConfigSynchronization>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <MX_TIM6_Init+0x5e>
  {
    Error_Handler();
 80016aa:	f7ff fcb1 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 80016ae:	bf00      	nop
 80016b0:	3710      	adds	r7, #16
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}
 80016b6:	bf00      	nop
 80016b8:	20000268 	.word	0x20000268
 80016bc:	40001000 	.word	0x40001000

080016c0 <MX_TIM8_Init>:
/* TIM8 init function */
void MX_TIM8_Init(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b08c      	sub	sp, #48	@ 0x30
 80016c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80016c6:	f107 030c 	add.w	r3, r7, #12
 80016ca:	2224      	movs	r2, #36	@ 0x24
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f006 fe98 	bl	8008404 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016d4:	463b      	mov	r3, r7
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80016de:	4b23      	ldr	r3, [pc, #140]	@ (800176c <MX_TIM8_Init+0xac>)
 80016e0:	4a23      	ldr	r2, [pc, #140]	@ (8001770 <MX_TIM8_Init+0xb0>)
 80016e2:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80016e4:	4b21      	ldr	r3, [pc, #132]	@ (800176c <MX_TIM8_Init+0xac>)
 80016e6:	2200      	movs	r2, #0
 80016e8:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_DOWN;
 80016ea:	4b20      	ldr	r3, [pc, #128]	@ (800176c <MX_TIM8_Init+0xac>)
 80016ec:	2210      	movs	r2, #16
 80016ee:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80016f0:	4b1e      	ldr	r3, [pc, #120]	@ (800176c <MX_TIM8_Init+0xac>)
 80016f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016f6:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80016f8:	4b1c      	ldr	r3, [pc, #112]	@ (800176c <MX_TIM8_Init+0xac>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80016fe:	4b1b      	ldr	r3, [pc, #108]	@ (800176c <MX_TIM8_Init+0xac>)
 8001700:	2200      	movs	r2, #0
 8001702:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001704:	4b19      	ldr	r3, [pc, #100]	@ (800176c <MX_TIM8_Init+0xac>)
 8001706:	2200      	movs	r2, #0
 8001708:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800170a:	2303      	movs	r3, #3
 800170c:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800170e:	2300      	movs	r3, #0
 8001710:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001712:	2301      	movs	r3, #1
 8001714:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 15;
 800171a:	230f      	movs	r3, #15
 800171c:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800171e:	2300      	movs	r3, #0
 8001720:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001722:	2301      	movs	r3, #1
 8001724:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001726:	2300      	movs	r3, #0
 8001728:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 15;
 800172a:	230f      	movs	r3, #15
 800172c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim8, &sConfig) != HAL_OK)
 800172e:	f107 030c 	add.w	r3, r7, #12
 8001732:	4619      	mov	r1, r3
 8001734:	480d      	ldr	r0, [pc, #52]	@ (800176c <MX_TIM8_Init+0xac>)
 8001736:	f003 f9d7 	bl	8004ae8 <HAL_TIM_Encoder_Init>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM8_Init+0x84>
  {
    Error_Handler();
 8001740:	f7ff fc66 	bl	8001010 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001744:	2300      	movs	r3, #0
 8001746:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001748:	2300      	movs	r3, #0
 800174a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800174c:	2300      	movs	r3, #0
 800174e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001750:	463b      	mov	r3, r7
 8001752:	4619      	mov	r1, r3
 8001754:	4805      	ldr	r0, [pc, #20]	@ (800176c <MX_TIM8_Init+0xac>)
 8001756:	f004 f86f 	bl	8005838 <HAL_TIMEx_MasterConfigSynchronization>
 800175a:	4603      	mov	r3, r0
 800175c:	2b00      	cmp	r3, #0
 800175e:	d001      	beq.n	8001764 <MX_TIM8_Init+0xa4>
  {
    Error_Handler();
 8001760:	f7ff fc56 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001764:	bf00      	nop
 8001766:	3730      	adds	r7, #48	@ 0x30
 8001768:	46bd      	mov	sp, r7
 800176a:	bd80      	pop	{r7, pc}
 800176c:	200002b4 	.word	0x200002b4
 8001770:	40010400 	.word	0x40010400

08001774 <MX_TIM12_Init>:
/* TIM12 init function */
void MX_TIM12_Init(void)
{
 8001774:	b580      	push	{r7, lr}
 8001776:	b088      	sub	sp, #32
 8001778:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM12_Init 0 */

  /* USER CODE END TIM12_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	2200      	movs	r2, #0
 800177e:	601a      	str	r2, [r3, #0]
 8001780:	605a      	str	r2, [r3, #4]
 8001782:	609a      	str	r2, [r3, #8]
 8001784:	60da      	str	r2, [r3, #12]
 8001786:	611a      	str	r2, [r3, #16]
 8001788:	615a      	str	r2, [r3, #20]
 800178a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM12_Init 1 */

  /* USER CODE END TIM12_Init 1 */
  htim12.Instance = TIM12;
 800178c:	4b1a      	ldr	r3, [pc, #104]	@ (80017f8 <MX_TIM12_Init+0x84>)
 800178e:	4a1b      	ldr	r2, [pc, #108]	@ (80017fc <MX_TIM12_Init+0x88>)
 8001790:	601a      	str	r2, [r3, #0]
  htim12.Init.Prescaler = 95;
 8001792:	4b19      	ldr	r3, [pc, #100]	@ (80017f8 <MX_TIM12_Init+0x84>)
 8001794:	225f      	movs	r2, #95	@ 0x5f
 8001796:	605a      	str	r2, [r3, #4]
  htim12.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001798:	4b17      	ldr	r3, [pc, #92]	@ (80017f8 <MX_TIM12_Init+0x84>)
 800179a:	2200      	movs	r2, #0
 800179c:	609a      	str	r2, [r3, #8]
  htim12.Init.Period = 999;
 800179e:	4b16      	ldr	r3, [pc, #88]	@ (80017f8 <MX_TIM12_Init+0x84>)
 80017a0:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80017a4:	60da      	str	r2, [r3, #12]
  htim12.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a6:	4b14      	ldr	r3, [pc, #80]	@ (80017f8 <MX_TIM12_Init+0x84>)
 80017a8:	2200      	movs	r2, #0
 80017aa:	611a      	str	r2, [r3, #16]
  htim12.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ac:	4b12      	ldr	r3, [pc, #72]	@ (80017f8 <MX_TIM12_Init+0x84>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim12) != HAL_OK)
 80017b2:	4811      	ldr	r0, [pc, #68]	@ (80017f8 <MX_TIM12_Init+0x84>)
 80017b4:	f002 ffc6 	bl	8004744 <HAL_TIM_PWM_Init>
 80017b8:	4603      	mov	r3, r0
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d001      	beq.n	80017c2 <MX_TIM12_Init+0x4e>
  {
    Error_Handler();
 80017be:	f7ff fc27 	bl	8001010 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017c2:	2360      	movs	r3, #96	@ 0x60
 80017c4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017c6:	2300      	movs	r3, #0
 80017c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017ca:	2300      	movs	r3, #0
 80017cc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017ce:	2300      	movs	r3, #0
 80017d0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim12, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80017d2:	1d3b      	adds	r3, r7, #4
 80017d4:	2204      	movs	r2, #4
 80017d6:	4619      	mov	r1, r3
 80017d8:	4807      	ldr	r0, [pc, #28]	@ (80017f8 <MX_TIM12_Init+0x84>)
 80017da:	f003 fbc1 	bl	8004f60 <HAL_TIM_PWM_ConfigChannel>
 80017de:	4603      	mov	r3, r0
 80017e0:	2b00      	cmp	r3, #0
 80017e2:	d001      	beq.n	80017e8 <MX_TIM12_Init+0x74>
  {
    Error_Handler();
 80017e4:	f7ff fc14 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN TIM12_Init 2 */

  /* USER CODE END TIM12_Init 2 */
  HAL_TIM_MspPostInit(&htim12);
 80017e8:	4803      	ldr	r0, [pc, #12]	@ (80017f8 <MX_TIM12_Init+0x84>)
 80017ea:	f000 f9d5 	bl	8001b98 <HAL_TIM_MspPostInit>

}
 80017ee:	bf00      	nop
 80017f0:	3720      	adds	r7, #32
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}
 80017f6:	bf00      	nop
 80017f8:	20000300 	.word	0x20000300
 80017fc:	40001800 	.word	0x40001800

08001800 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001800:	b580      	push	{r7, lr}
 8001802:	b090      	sub	sp, #64	@ 0x40
 8001804:	af00      	add	r7, sp, #0
 8001806:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001808:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
 8001812:	609a      	str	r2, [r3, #8]
 8001814:	60da      	str	r2, [r3, #12]
 8001816:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM1)
 8001818:	687b      	ldr	r3, [r7, #4]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a93      	ldr	r2, [pc, #588]	@ (8001a6c <HAL_TIM_Encoder_MspInit+0x26c>)
 800181e:	4293      	cmp	r3, r2
 8001820:	d149      	bne.n	80018b6 <HAL_TIM_Encoder_MspInit+0xb6>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001822:	4b93      	ldr	r3, [pc, #588]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001824:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001826:	4a92      	ldr	r2, [pc, #584]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001828:	f043 0301 	orr.w	r3, r3, #1
 800182c:	6453      	str	r3, [r2, #68]	@ 0x44
 800182e:	4b90      	ldr	r3, [pc, #576]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001830:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001838:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800183a:	4b8d      	ldr	r3, [pc, #564]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 800183c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800183e:	4a8c      	ldr	r2, [pc, #560]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001840:	f043 0310 	orr.w	r3, r3, #16
 8001844:	6313      	str	r3, [r2, #48]	@ 0x30
 8001846:	4b8a      	ldr	r3, [pc, #552]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001848:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184a:	f003 0310 	and.w	r3, r3, #16
 800184e:	627b      	str	r3, [r7, #36]	@ 0x24
 8001850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = ENCODER_LF1_Pin|ENCODER_LF2_Pin;
 8001852:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8001856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001858:	2302      	movs	r3, #2
 800185a:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800185c:	2300      	movs	r3, #0
 800185e:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001860:	2300      	movs	r3, #0
 8001862:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001864:	2301      	movs	r3, #1
 8001866:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001868:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800186c:	4619      	mov	r1, r3
 800186e:	4881      	ldr	r0, [pc, #516]	@ (8001a74 <HAL_TIM_Encoder_MspInit+0x274>)
 8001870:	f001 fa22 	bl	8002cb8 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 0, 0);
 8001874:	2200      	movs	r2, #0
 8001876:	2100      	movs	r1, #0
 8001878:	2018      	movs	r0, #24
 800187a:	f000 fdd0 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 800187e:	2018      	movs	r0, #24
 8001880:	f000 fde9 	bl	8002456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001884:	2200      	movs	r2, #0
 8001886:	2100      	movs	r1, #0
 8001888:	2019      	movs	r0, #25
 800188a:	f000 fdc8 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800188e:	2019      	movs	r0, #25
 8001890:	f000 fde1 	bl	8002456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_TRG_COM_TIM11_IRQn, 0, 0);
 8001894:	2200      	movs	r2, #0
 8001896:	2100      	movs	r1, #0
 8001898:	201a      	movs	r0, #26
 800189a:	f000 fdc0 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn);
 800189e:	201a      	movs	r0, #26
 80018a0:	f000 fdd9 	bl	8002456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 80018a4:	2200      	movs	r2, #0
 80018a6:	2100      	movs	r1, #0
 80018a8:	201b      	movs	r0, #27
 80018aa:	f000 fdb8 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 80018ae:	201b      	movs	r0, #27
 80018b0:	f000 fdd1 	bl	8002456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }
}
 80018b4:	e0d5      	b.n	8001a62 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM3)
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	681b      	ldr	r3, [r3, #0]
 80018ba:	4a6f      	ldr	r2, [pc, #444]	@ (8001a78 <HAL_TIM_Encoder_MspInit+0x278>)
 80018bc:	4293      	cmp	r3, r2
 80018be:	d14c      	bne.n	800195a <HAL_TIM_Encoder_MspInit+0x15a>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80018c0:	4b6b      	ldr	r3, [pc, #428]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80018c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018c4:	4a6a      	ldr	r2, [pc, #424]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80018c6:	f043 0302 	orr.w	r3, r3, #2
 80018ca:	6413      	str	r3, [r2, #64]	@ 0x40
 80018cc:	4b68      	ldr	r3, [pc, #416]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	f003 0302 	and.w	r3, r3, #2
 80018d4:	623b      	str	r3, [r7, #32]
 80018d6:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80018d8:	4b65      	ldr	r3, [pc, #404]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80018da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018dc:	4a64      	ldr	r2, [pc, #400]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6313      	str	r3, [r2, #48]	@ 0x30
 80018e4:	4b62      	ldr	r3, [pc, #392]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80018e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018e8:	f003 0301 	and.w	r3, r3, #1
 80018ec:	61fb      	str	r3, [r7, #28]
 80018ee:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018f0:	4b5f      	ldr	r3, [pc, #380]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80018f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80018f4:	4a5e      	ldr	r2, [pc, #376]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80018f6:	f043 0302 	orr.w	r3, r3, #2
 80018fa:	6313      	str	r3, [r2, #48]	@ 0x30
 80018fc:	4b5c      	ldr	r3, [pc, #368]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80018fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001900:	f003 0302 	and.w	r3, r3, #2
 8001904:	61bb      	str	r3, [r7, #24]
 8001906:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = ENCODER_LB1_Pin;
 8001908:	2340      	movs	r3, #64	@ 0x40
 800190a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800190c:	2302      	movs	r3, #2
 800190e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001910:	2300      	movs	r3, #0
 8001912:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001914:	2300      	movs	r3, #0
 8001916:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001918:	2302      	movs	r3, #2
 800191a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB1_GPIO_Port, &GPIO_InitStruct);
 800191c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001920:	4619      	mov	r1, r3
 8001922:	4856      	ldr	r0, [pc, #344]	@ (8001a7c <HAL_TIM_Encoder_MspInit+0x27c>)
 8001924:	f001 f9c8 	bl	8002cb8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = ENCODER_LB2_Pin;
 8001928:	2320      	movs	r3, #32
 800192a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800192c:	2302      	movs	r3, #2
 800192e:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001930:	2300      	movs	r3, #0
 8001932:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001934:	2300      	movs	r3, #0
 8001936:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001938:	2302      	movs	r3, #2
 800193a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(ENCODER_LB2_GPIO_Port, &GPIO_InitStruct);
 800193c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001940:	4619      	mov	r1, r3
 8001942:	484f      	ldr	r0, [pc, #316]	@ (8001a80 <HAL_TIM_Encoder_MspInit+0x280>)
 8001944:	f001 f9b8 	bl	8002cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8001948:	2200      	movs	r2, #0
 800194a:	2100      	movs	r1, #0
 800194c:	201d      	movs	r0, #29
 800194e:	f000 fd66 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001952:	201d      	movs	r0, #29
 8001954:	f000 fd7f 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 8001958:	e083      	b.n	8001a62 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM4)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	4a49      	ldr	r2, [pc, #292]	@ (8001a84 <HAL_TIM_Encoder_MspInit+0x284>)
 8001960:	4293      	cmp	r3, r2
 8001962:	d131      	bne.n	80019c8 <HAL_TIM_Encoder_MspInit+0x1c8>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001964:	4b42      	ldr	r3, [pc, #264]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001966:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001968:	4a41      	ldr	r2, [pc, #260]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 800196a:	f043 0304 	orr.w	r3, r3, #4
 800196e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001970:	4b3f      	ldr	r3, [pc, #252]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001972:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001974:	f003 0304 	and.w	r3, r3, #4
 8001978:	617b      	str	r3, [r7, #20]
 800197a:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800197c:	4b3c      	ldr	r3, [pc, #240]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 800197e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001980:	4a3b      	ldr	r2, [pc, #236]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 8001982:	f043 0308 	orr.w	r3, r3, #8
 8001986:	6313      	str	r3, [r2, #48]	@ 0x30
 8001988:	4b39      	ldr	r3, [pc, #228]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 800198a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800198c:	f003 0308 	and.w	r3, r3, #8
 8001990:	613b      	str	r3, [r7, #16]
 8001992:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = ENCODER_RF1_Pin|ENCODER_RF2_Pin;
 8001994:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001998:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80019a6:	2302      	movs	r3, #2
 80019a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019aa:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 80019ae:	4619      	mov	r1, r3
 80019b0:	4835      	ldr	r0, [pc, #212]	@ (8001a88 <HAL_TIM_Encoder_MspInit+0x288>)
 80019b2:	f001 f981 	bl	8002cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 80019b6:	2200      	movs	r2, #0
 80019b8:	2100      	movs	r1, #0
 80019ba:	201e      	movs	r0, #30
 80019bc:	f000 fd2f 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 80019c0:	201e      	movs	r0, #30
 80019c2:	f000 fd48 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 80019c6:	e04c      	b.n	8001a62 <HAL_TIM_Encoder_MspInit+0x262>
  else if(tim_encoderHandle->Instance==TIM8)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a2f      	ldr	r2, [pc, #188]	@ (8001a8c <HAL_TIM_Encoder_MspInit+0x28c>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d147      	bne.n	8001a62 <HAL_TIM_Encoder_MspInit+0x262>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80019d2:	4b27      	ldr	r3, [pc, #156]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80019d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019d6:	4a26      	ldr	r2, [pc, #152]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80019d8:	f043 0302 	orr.w	r3, r3, #2
 80019dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80019de:	4b24      	ldr	r3, [pc, #144]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80019e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019e2:	f003 0302 	and.w	r3, r3, #2
 80019e6:	60fb      	str	r3, [r7, #12]
 80019e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ea:	4b21      	ldr	r3, [pc, #132]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80019ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ee:	4a20      	ldr	r2, [pc, #128]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80019f0:	f043 0304 	orr.w	r3, r3, #4
 80019f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80019f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001a70 <HAL_TIM_Encoder_MspInit+0x270>)
 80019f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fa:	f003 0304 	and.w	r3, r3, #4
 80019fe:	60bb      	str	r3, [r7, #8]
 8001a00:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = ENCODER_RB1_Pin|ENCODER_RB2_Pin;
 8001a02:	23c0      	movs	r3, #192	@ 0xc0
 8001a04:	62fb      	str	r3, [r7, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a06:	2302      	movs	r3, #2
 8001a08:	633b      	str	r3, [r7, #48]	@ 0x30
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a0a:	2300      	movs	r3, #0
 8001a0c:	637b      	str	r3, [r7, #52]	@ 0x34
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a0e:	2300      	movs	r3, #0
 8001a10:	63bb      	str	r3, [r7, #56]	@ 0x38
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8001a12:	2303      	movs	r3, #3
 8001a14:	63fb      	str	r3, [r7, #60]	@ 0x3c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a16:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	481c      	ldr	r0, [pc, #112]	@ (8001a90 <HAL_TIM_Encoder_MspInit+0x290>)
 8001a1e:	f001 f94b 	bl	8002cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001a22:	2200      	movs	r2, #0
 8001a24:	2100      	movs	r1, #0
 8001a26:	202b      	movs	r0, #43	@ 0x2b
 8001a28:	f000 fcf9 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001a2c:	202b      	movs	r0, #43	@ 0x2b
 8001a2e:	f000 fd12 	bl	8002456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_UP_TIM13_IRQn, 0, 0);
 8001a32:	2200      	movs	r2, #0
 8001a34:	2100      	movs	r1, #0
 8001a36:	202c      	movs	r0, #44	@ 0x2c
 8001a38:	f000 fcf1 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_UP_TIM13_IRQn);
 8001a3c:	202c      	movs	r0, #44	@ 0x2c
 8001a3e:	f000 fd0a 	bl	8002456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_TRG_COM_TIM14_IRQn, 0, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2100      	movs	r1, #0
 8001a46:	202d      	movs	r0, #45	@ 0x2d
 8001a48:	f000 fce9 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_TRG_COM_TIM14_IRQn);
 8001a4c:	202d      	movs	r0, #45	@ 0x2d
 8001a4e:	f000 fd02 	bl	8002456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM8_CC_IRQn, 0, 0);
 8001a52:	2200      	movs	r2, #0
 8001a54:	2100      	movs	r1, #0
 8001a56:	202e      	movs	r0, #46	@ 0x2e
 8001a58:	f000 fce1 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_CC_IRQn);
 8001a5c:	202e      	movs	r0, #46	@ 0x2e
 8001a5e:	f000 fcfa 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 8001a62:	bf00      	nop
 8001a64:	3740      	adds	r7, #64	@ 0x40
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	40010000 	.word	0x40010000
 8001a70:	40023800 	.word	0x40023800
 8001a74:	40021000 	.word	0x40021000
 8001a78:	40000400 	.word	0x40000400
 8001a7c:	40020000 	.word	0x40020000
 8001a80:	40020400 	.word	0x40020400
 8001a84:	40000800 	.word	0x40000800
 8001a88:	40020c00 	.word	0x40020c00
 8001a8c:	40010400 	.word	0x40010400
 8001a90:	40020800 	.word	0x40020800

08001a94 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b086      	sub	sp, #24
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001aa4:	d114      	bne.n	8001ad0 <HAL_TIM_PWM_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001aa6:	4b26      	ldr	r3, [pc, #152]	@ (8001b40 <HAL_TIM_PWM_MspInit+0xac>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aaa:	4a25      	ldr	r2, [pc, #148]	@ (8001b40 <HAL_TIM_PWM_MspInit+0xac>)
 8001aac:	f043 0301 	orr.w	r3, r3, #1
 8001ab0:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ab2:	4b23      	ldr	r3, [pc, #140]	@ (8001b40 <HAL_TIM_PWM_MspInit+0xac>)
 8001ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ab6:	f003 0301 	and.w	r3, r3, #1
 8001aba:	617b      	str	r3, [r7, #20]
 8001abc:	697b      	ldr	r3, [r7, #20]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001abe:	2200      	movs	r2, #0
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	201c      	movs	r0, #28
 8001ac4:	f000 fcab 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001ac8:	201c      	movs	r0, #28
 8001aca:	f000 fcc4 	bl	8002456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
  /* USER CODE BEGIN TIM12_MspInit 1 */

  /* USER CODE END TIM12_MspInit 1 */
  }
}
 8001ace:	e032      	b.n	8001b36 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM5)
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a1b      	ldr	r2, [pc, #108]	@ (8001b44 <HAL_TIM_PWM_MspInit+0xb0>)
 8001ad6:	4293      	cmp	r3, r2
 8001ad8:	d114      	bne.n	8001b04 <HAL_TIM_PWM_MspInit+0x70>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001ada:	4b19      	ldr	r3, [pc, #100]	@ (8001b40 <HAL_TIM_PWM_MspInit+0xac>)
 8001adc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ade:	4a18      	ldr	r2, [pc, #96]	@ (8001b40 <HAL_TIM_PWM_MspInit+0xac>)
 8001ae0:	f043 0308 	orr.w	r3, r3, #8
 8001ae4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ae6:	4b16      	ldr	r3, [pc, #88]	@ (8001b40 <HAL_TIM_PWM_MspInit+0xac>)
 8001ae8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	613b      	str	r3, [r7, #16]
 8001af0:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001af2:	2200      	movs	r2, #0
 8001af4:	2100      	movs	r1, #0
 8001af6:	2032      	movs	r0, #50	@ 0x32
 8001af8:	f000 fc91 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001afc:	2032      	movs	r0, #50	@ 0x32
 8001afe:	f000 fcaa 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 8001b02:	e018      	b.n	8001b36 <HAL_TIM_PWM_MspInit+0xa2>
  else if(tim_pwmHandle->Instance==TIM12)
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0f      	ldr	r2, [pc, #60]	@ (8001b48 <HAL_TIM_PWM_MspInit+0xb4>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d113      	bne.n	8001b36 <HAL_TIM_PWM_MspInit+0xa2>
    __HAL_RCC_TIM12_CLK_ENABLE();
 8001b0e:	4b0c      	ldr	r3, [pc, #48]	@ (8001b40 <HAL_TIM_PWM_MspInit+0xac>)
 8001b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b12:	4a0b      	ldr	r2, [pc, #44]	@ (8001b40 <HAL_TIM_PWM_MspInit+0xac>)
 8001b14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001b18:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b1a:	4b09      	ldr	r3, [pc, #36]	@ (8001b40 <HAL_TIM_PWM_MspInit+0xac>)
 8001b1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b1e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001b22:	60fb      	str	r3, [r7, #12]
 8001b24:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM8_BRK_TIM12_IRQn, 0, 0);
 8001b26:	2200      	movs	r2, #0
 8001b28:	2100      	movs	r1, #0
 8001b2a:	202b      	movs	r0, #43	@ 0x2b
 8001b2c:	f000 fc77 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM8_BRK_TIM12_IRQn);
 8001b30:	202b      	movs	r0, #43	@ 0x2b
 8001b32:	f000 fc90 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 8001b36:	bf00      	nop
 8001b38:	3718      	adds	r7, #24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	bd80      	pop	{r7, pc}
 8001b3e:	bf00      	nop
 8001b40:	40023800 	.word	0x40023800
 8001b44:	40000c00 	.word	0x40000c00
 8001b48:	40001800 	.word	0x40001800

08001b4c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	4a0d      	ldr	r2, [pc, #52]	@ (8001b90 <HAL_TIM_Base_MspInit+0x44>)
 8001b5a:	4293      	cmp	r3, r2
 8001b5c:	d113      	bne.n	8001b86 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 8001b5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001b94 <HAL_TIM_Base_MspInit+0x48>)
 8001b60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b62:	4a0c      	ldr	r2, [pc, #48]	@ (8001b94 <HAL_TIM_Base_MspInit+0x48>)
 8001b64:	f043 0310 	orr.w	r3, r3, #16
 8001b68:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b6a:	4b0a      	ldr	r3, [pc, #40]	@ (8001b94 <HAL_TIM_Base_MspInit+0x48>)
 8001b6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b6e:	f003 0310 	and.w	r3, r3, #16
 8001b72:	60fb      	str	r3, [r7, #12]
 8001b74:	68fb      	ldr	r3, [r7, #12]

    /* TIM6 interrupt Init */
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8001b76:	2200      	movs	r2, #0
 8001b78:	2100      	movs	r1, #0
 8001b7a:	2036      	movs	r0, #54	@ 0x36
 8001b7c:	f000 fc4f 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001b80:	2036      	movs	r0, #54	@ 0x36
 8001b82:	f000 fc68 	bl	8002456 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	40001000 	.word	0x40001000
 8001b94:	40023800 	.word	0x40023800

08001b98 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b08c      	sub	sp, #48	@ 0x30
 8001b9c:	af00      	add	r7, sp, #0
 8001b9e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ba0:	f107 031c 	add.w	r3, r7, #28
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	601a      	str	r2, [r3, #0]
 8001ba8:	605a      	str	r2, [r3, #4]
 8001baa:	609a      	str	r2, [r3, #8]
 8001bac:	60da      	str	r2, [r3, #12]
 8001bae:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM2)
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bb8:	d139      	bne.n	8001c2e <HAL_TIM_MspPostInit+0x96>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bba:	4b41      	ldr	r3, [pc, #260]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bbe:	4a40      	ldr	r2, [pc, #256]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001bc0:	f043 0301 	orr.w	r3, r3, #1
 8001bc4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bc6:	4b3e      	ldr	r3, [pc, #248]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001bc8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bca:	f003 0301 	and.w	r3, r3, #1
 8001bce:	61bb      	str	r3, [r7, #24]
 8001bd0:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd2:	4b3b      	ldr	r3, [pc, #236]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001bd4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bd6:	4a3a      	ldr	r2, [pc, #232]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001bd8:	f043 0302 	orr.w	r3, r3, #2
 8001bdc:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bde:	4b38      	ldr	r3, [pc, #224]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001be0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001be2:	f003 0302 	and.w	r3, r3, #2
 8001be6:	617b      	str	r3, [r7, #20]
 8001be8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    PB11     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MOTOR_RF_Pin;
 8001bea:	2320      	movs	r3, #32
 8001bec:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bee:	2302      	movs	r3, #2
 8001bf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bf2:	2300      	movs	r3, #0
 8001bf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bf6:	2300      	movs	r3, #0
 8001bf8:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_RF_GPIO_Port, &GPIO_InitStruct);
 8001bfe:	f107 031c 	add.w	r3, r7, #28
 8001c02:	4619      	mov	r1, r3
 8001c04:	482f      	ldr	r0, [pc, #188]	@ (8001cc4 <HAL_TIM_MspPostInit+0x12c>)
 8001c06:	f001 f857 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = MOTOR_LF_Pin;
 8001c0a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001c0e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c10:	2302      	movs	r3, #2
 8001c12:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c18:	2300      	movs	r3, #0
 8001c1a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(MOTOR_LF_GPIO_Port, &GPIO_InitStruct);
 8001c20:	f107 031c 	add.w	r3, r7, #28
 8001c24:	4619      	mov	r1, r3
 8001c26:	4828      	ldr	r0, [pc, #160]	@ (8001cc8 <HAL_TIM_MspPostInit+0x130>)
 8001c28:	f001 f846 	bl	8002cb8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM12_MspPostInit 1 */

  /* USER CODE END TIM12_MspPostInit 1 */
  }

}
 8001c2c:	e043      	b.n	8001cb6 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM5)
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4a26      	ldr	r2, [pc, #152]	@ (8001ccc <HAL_TIM_MspPostInit+0x134>)
 8001c34:	4293      	cmp	r3, r2
 8001c36:	d11c      	bne.n	8001c72 <HAL_TIM_MspPostInit+0xda>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c38:	4b21      	ldr	r3, [pc, #132]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001c3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c3c:	4a20      	ldr	r2, [pc, #128]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001c3e:	f043 0301 	orr.w	r3, r3, #1
 8001c42:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c44:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001c46:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c48:	f003 0301 	and.w	r3, r3, #1
 8001c4c:	613b      	str	r3, [r7, #16]
 8001c4e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MOTOR_RB_Pin|MOTOR_LB_Pin;
 8001c50:	2309      	movs	r3, #9
 8001c52:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c54:	2302      	movs	r3, #2
 8001c56:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c58:	2300      	movs	r3, #0
 8001c5a:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 8001c60:	2302      	movs	r3, #2
 8001c62:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c64:	f107 031c 	add.w	r3, r7, #28
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4816      	ldr	r0, [pc, #88]	@ (8001cc4 <HAL_TIM_MspPostInit+0x12c>)
 8001c6c:	f001 f824 	bl	8002cb8 <HAL_GPIO_Init>
}
 8001c70:	e021      	b.n	8001cb6 <HAL_TIM_MspPostInit+0x11e>
  else if(timHandle->Instance==TIM12)
 8001c72:	687b      	ldr	r3, [r7, #4]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4a16      	ldr	r2, [pc, #88]	@ (8001cd0 <HAL_TIM_MspPostInit+0x138>)
 8001c78:	4293      	cmp	r3, r2
 8001c7a:	d11c      	bne.n	8001cb6 <HAL_TIM_MspPostInit+0x11e>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c7c:	4b10      	ldr	r3, [pc, #64]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001c7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c80:	4a0f      	ldr	r2, [pc, #60]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001c82:	f043 0302 	orr.w	r3, r3, #2
 8001c86:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c88:	4b0d      	ldr	r3, [pc, #52]	@ (8001cc0 <HAL_TIM_MspPostInit+0x128>)
 8001c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8c:	f003 0302 	and.w	r3, r3, #2
 8001c90:	60fb      	str	r3, [r7, #12]
 8001c92:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = BUZZER_Pin;
 8001c94:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8001c98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c9a:	2302      	movs	r3, #2
 8001c9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c9e:	2300      	movs	r3, #0
 8001ca0:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca2:	2300      	movs	r3, #0
 8001ca4:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_TIM12;
 8001ca6:	2309      	movs	r3, #9
 8001ca8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(BUZZER_GPIO_Port, &GPIO_InitStruct);
 8001caa:	f107 031c 	add.w	r3, r7, #28
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4805      	ldr	r0, [pc, #20]	@ (8001cc8 <HAL_TIM_MspPostInit+0x130>)
 8001cb2:	f001 f801 	bl	8002cb8 <HAL_GPIO_Init>
}
 8001cb6:	bf00      	nop
 8001cb8:	3730      	adds	r7, #48	@ 0x30
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bd80      	pop	{r7, pc}
 8001cbe:	bf00      	nop
 8001cc0:	40023800 	.word	0x40023800
 8001cc4:	40020000 	.word	0x40020000
 8001cc8:	40020400 	.word	0x40020400
 8001ccc:	40000c00 	.word	0x40000c00
 8001cd0:	40001800 	.word	0x40001800

08001cd4 <MX_USART2_UART_Init>:
DMA_HandleTypeDef hdma_usart2_tx;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001cd8:	4b14      	ldr	r3, [pc, #80]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001cda:	4a15      	ldr	r2, [pc, #84]	@ (8001d30 <MX_USART2_UART_Init+0x5c>)
 8001cdc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001cde:	4b13      	ldr	r3, [pc, #76]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001ce0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ce4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001ce8:	2200      	movs	r2, #0
 8001cea:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001cfa:	220c      	movs	r2, #12
 8001cfc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001cfe:	4b0b      	ldr	r3, [pc, #44]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d04:	4b09      	ldr	r3, [pc, #36]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d0a:	4b08      	ldr	r3, [pc, #32]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d10:	4b06      	ldr	r3, [pc, #24]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001d16:	4805      	ldr	r0, [pc, #20]	@ (8001d2c <MX_USART2_UART_Init+0x58>)
 8001d18:	f003 fe3a 	bl	8005990 <HAL_UART_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8001d22:	f7ff f975 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001d26:	bf00      	nop
 8001d28:	bd80      	pop	{r7, pc}
 8001d2a:	bf00      	nop
 8001d2c:	2000034c 	.word	0x2000034c
 8001d30:	40004400 	.word	0x40004400

08001d34 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001d38:	4b14      	ldr	r3, [pc, #80]	@ (8001d8c <MX_USART3_UART_Init+0x58>)
 8001d3a:	4a15      	ldr	r2, [pc, #84]	@ (8001d90 <MX_USART3_UART_Init+0x5c>)
 8001d3c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001d3e:	4b13      	ldr	r3, [pc, #76]	@ (8001d8c <MX_USART3_UART_Init+0x58>)
 8001d40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001d44:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001d46:	4b11      	ldr	r3, [pc, #68]	@ (8001d8c <MX_USART3_UART_Init+0x58>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d8c <MX_USART3_UART_Init+0x58>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001d52:	4b0e      	ldr	r3, [pc, #56]	@ (8001d8c <MX_USART3_UART_Init+0x58>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001d58:	4b0c      	ldr	r3, [pc, #48]	@ (8001d8c <MX_USART3_UART_Init+0x58>)
 8001d5a:	220c      	movs	r2, #12
 8001d5c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001d5e:	4b0b      	ldr	r3, [pc, #44]	@ (8001d8c <MX_USART3_UART_Init+0x58>)
 8001d60:	2200      	movs	r2, #0
 8001d62:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001d64:	4b09      	ldr	r3, [pc, #36]	@ (8001d8c <MX_USART3_UART_Init+0x58>)
 8001d66:	2200      	movs	r2, #0
 8001d68:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001d6a:	4b08      	ldr	r3, [pc, #32]	@ (8001d8c <MX_USART3_UART_Init+0x58>)
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001d70:	4b06      	ldr	r3, [pc, #24]	@ (8001d8c <MX_USART3_UART_Init+0x58>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001d76:	4805      	ldr	r0, [pc, #20]	@ (8001d8c <MX_USART3_UART_Init+0x58>)
 8001d78:	f003 fe0a 	bl	8005990 <HAL_UART_Init>
 8001d7c:	4603      	mov	r3, r0
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d001      	beq.n	8001d86 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8001d82:	f7ff f945 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001d86:	bf00      	nop
 8001d88:	bd80      	pop	{r7, pc}
 8001d8a:	bf00      	nop
 8001d8c:	200003d4 	.word	0x200003d4
 8001d90:	40004800 	.word	0x40004800

08001d94 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b0b0      	sub	sp, #192	@ 0xc0
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d9c:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001da0:	2200      	movs	r2, #0
 8001da2:	601a      	str	r2, [r3, #0]
 8001da4:	605a      	str	r2, [r3, #4]
 8001da6:	609a      	str	r2, [r3, #8]
 8001da8:	60da      	str	r2, [r3, #12]
 8001daa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001dac:	f107 031c 	add.w	r3, r7, #28
 8001db0:	2290      	movs	r2, #144	@ 0x90
 8001db2:	2100      	movs	r1, #0
 8001db4:	4618      	mov	r0, r3
 8001db6:	f006 fb25 	bl	8008404 <memset>
  if(uartHandle->Instance==USART2)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a79      	ldr	r2, [pc, #484]	@ (8001fa4 <HAL_UART_MspInit+0x210>)
 8001dc0:	4293      	cmp	r3, r2
 8001dc2:	f040 80a0 	bne.w	8001f06 <HAL_UART_MspInit+0x172>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001dc6:	2380      	movs	r3, #128	@ 0x80
 8001dc8:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001dca:	2300      	movs	r3, #0
 8001dcc:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001dce:	f107 031c 	add.w	r3, r7, #28
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f001 ffbe 	bl	8003d54 <HAL_RCCEx_PeriphCLKConfig>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d001      	beq.n	8001de2 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8001dde:	f7ff f917 	bl	8001010 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001de2:	4b71      	ldr	r3, [pc, #452]	@ (8001fa8 <HAL_UART_MspInit+0x214>)
 8001de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001de6:	4a70      	ldr	r2, [pc, #448]	@ (8001fa8 <HAL_UART_MspInit+0x214>)
 8001de8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001dec:	6413      	str	r3, [r2, #64]	@ 0x40
 8001dee:	4b6e      	ldr	r3, [pc, #440]	@ (8001fa8 <HAL_UART_MspInit+0x214>)
 8001df0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001df2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001df6:	61bb      	str	r3, [r7, #24]
 8001df8:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001dfa:	4b6b      	ldr	r3, [pc, #428]	@ (8001fa8 <HAL_UART_MspInit+0x214>)
 8001dfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001dfe:	4a6a      	ldr	r2, [pc, #424]	@ (8001fa8 <HAL_UART_MspInit+0x214>)
 8001e00:	f043 0308 	orr.w	r3, r3, #8
 8001e04:	6313      	str	r3, [r2, #48]	@ 0x30
 8001e06:	4b68      	ldr	r3, [pc, #416]	@ (8001fa8 <HAL_UART_MspInit+0x214>)
 8001e08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e0a:	f003 0308 	and.w	r3, r3, #8
 8001e0e:	617b      	str	r3, [r7, #20]
 8001e10:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001e12:	2360      	movs	r3, #96	@ 0x60
 8001e14:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e18:	2302      	movs	r3, #2
 8001e1a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e24:	2303      	movs	r3, #3
 8001e26:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001e2a:	2307      	movs	r3, #7
 8001e2c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001e30:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001e34:	4619      	mov	r1, r3
 8001e36:	485d      	ldr	r0, [pc, #372]	@ (8001fac <HAL_UART_MspInit+0x218>)
 8001e38:	f000 ff3e 	bl	8002cb8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001e3c:	4b5c      	ldr	r3, [pc, #368]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e3e:	4a5d      	ldr	r2, [pc, #372]	@ (8001fb4 <HAL_UART_MspInit+0x220>)
 8001e40:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001e42:	4b5b      	ldr	r3, [pc, #364]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e44:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001e48:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001e4a:	4b59      	ldr	r3, [pc, #356]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001e50:	4b57      	ldr	r3, [pc, #348]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e52:	2200      	movs	r2, #0
 8001e54:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001e56:	4b56      	ldr	r3, [pc, #344]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e58:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001e5c:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001e5e:	4b54      	ldr	r3, [pc, #336]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e60:	2200      	movs	r2, #0
 8001e62:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001e64:	4b52      	ldr	r3, [pc, #328]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001e6a:	4b51      	ldr	r3, [pc, #324]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001e70:	4b4f      	ldr	r3, [pc, #316]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001e76:	4b4e      	ldr	r3, [pc, #312]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e78:	2200      	movs	r2, #0
 8001e7a:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001e7c:	484c      	ldr	r0, [pc, #304]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e7e:	f000 fb05 	bl	800248c <HAL_DMA_Init>
 8001e82:	4603      	mov	r3, r0
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <HAL_UART_MspInit+0xf8>
    {
      Error_Handler();
 8001e88:	f7ff f8c2 	bl	8001010 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	4a48      	ldr	r2, [pc, #288]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e90:	675a      	str	r2, [r3, #116]	@ 0x74
 8001e92:	4a47      	ldr	r2, [pc, #284]	@ (8001fb0 <HAL_UART_MspInit+0x21c>)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8001e98:	4b47      	ldr	r3, [pc, #284]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001e9a:	4a48      	ldr	r2, [pc, #288]	@ (8001fbc <HAL_UART_MspInit+0x228>)
 8001e9c:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8001e9e:	4b46      	ldr	r3, [pc, #280]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001ea0:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8001ea4:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001ea6:	4b44      	ldr	r3, [pc, #272]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001ea8:	2240      	movs	r2, #64	@ 0x40
 8001eaa:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001eac:	4b42      	ldr	r3, [pc, #264]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001eb2:	4b41      	ldr	r3, [pc, #260]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001eb4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8001eb8:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001eba:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001ec0:	4b3d      	ldr	r3, [pc, #244]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8001ec6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001ecc:	4b3a      	ldr	r3, [pc, #232]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001ece:	2200      	movs	r2, #0
 8001ed0:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ed2:	4b39      	ldr	r3, [pc, #228]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8001ed8:	4837      	ldr	r0, [pc, #220]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001eda:	f000 fad7 	bl	800248c <HAL_DMA_Init>
 8001ede:	4603      	mov	r3, r0
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d001      	beq.n	8001ee8 <HAL_UART_MspInit+0x154>
    {
      Error_Handler();
 8001ee4:	f7ff f894 	bl	8001010 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart2_tx);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	4a33      	ldr	r2, [pc, #204]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001eec:	671a      	str	r2, [r3, #112]	@ 0x70
 8001eee:	4a32      	ldr	r2, [pc, #200]	@ (8001fb8 <HAL_UART_MspInit+0x224>)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	2100      	movs	r1, #0
 8001ef8:	2026      	movs	r0, #38	@ 0x26
 8001efa:	f000 fa90 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001efe:	2026      	movs	r0, #38	@ 0x26
 8001f00:	f000 faa9 	bl	8002456 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001f04:	e049      	b.n	8001f9a <HAL_UART_MspInit+0x206>
  else if(uartHandle->Instance==USART3)
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4a2d      	ldr	r2, [pc, #180]	@ (8001fc0 <HAL_UART_MspInit+0x22c>)
 8001f0c:	4293      	cmp	r3, r2
 8001f0e:	d144      	bne.n	8001f9a <HAL_UART_MspInit+0x206>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001f10:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001f14:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001f16:	2300      	movs	r3, #0
 8001f18:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001f1a:	f107 031c 	add.w	r3, r7, #28
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f001 ff18 	bl	8003d54 <HAL_RCCEx_PeriphCLKConfig>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <HAL_UART_MspInit+0x19a>
      Error_Handler();
 8001f2a:	f7ff f871 	bl	8001010 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8001f2e:	4b1e      	ldr	r3, [pc, #120]	@ (8001fa8 <HAL_UART_MspInit+0x214>)
 8001f30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f32:	4a1d      	ldr	r2, [pc, #116]	@ (8001fa8 <HAL_UART_MspInit+0x214>)
 8001f34:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f38:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f3a:	4b1b      	ldr	r3, [pc, #108]	@ (8001fa8 <HAL_UART_MspInit+0x214>)
 8001f3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001f42:	613b      	str	r3, [r7, #16]
 8001f44:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001f46:	4b18      	ldr	r3, [pc, #96]	@ (8001fa8 <HAL_UART_MspInit+0x214>)
 8001f48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f4a:	4a17      	ldr	r2, [pc, #92]	@ (8001fa8 <HAL_UART_MspInit+0x214>)
 8001f4c:	f043 0308 	orr.w	r3, r3, #8
 8001f50:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f52:	4b15      	ldr	r3, [pc, #84]	@ (8001fa8 <HAL_UART_MspInit+0x214>)
 8001f54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f56:	f003 0308 	and.w	r3, r3, #8
 8001f5a:	60fb      	str	r3, [r7, #12]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8001f5e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001f62:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f66:	2302      	movs	r3, #2
 8001f68:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f6c:	2300      	movs	r3, #0
 8001f6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f72:	2303      	movs	r3, #3
 8001f74:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001f78:	2307      	movs	r3, #7
 8001f7a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001f7e:	f107 03ac 	add.w	r3, r7, #172	@ 0xac
 8001f82:	4619      	mov	r1, r3
 8001f84:	4809      	ldr	r0, [pc, #36]	@ (8001fac <HAL_UART_MspInit+0x218>)
 8001f86:	f000 fe97 	bl	8002cb8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2100      	movs	r1, #0
 8001f8e:	2027      	movs	r0, #39	@ 0x27
 8001f90:	f000 fa45 	bl	800241e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8001f94:	2027      	movs	r0, #39	@ 0x27
 8001f96:	f000 fa5e 	bl	8002456 <HAL_NVIC_EnableIRQ>
}
 8001f9a:	bf00      	nop
 8001f9c:	37c0      	adds	r7, #192	@ 0xc0
 8001f9e:	46bd      	mov	sp, r7
 8001fa0:	bd80      	pop	{r7, pc}
 8001fa2:	bf00      	nop
 8001fa4:	40004400 	.word	0x40004400
 8001fa8:	40023800 	.word	0x40023800
 8001fac:	40020c00 	.word	0x40020c00
 8001fb0:	2000045c 	.word	0x2000045c
 8001fb4:	40026088 	.word	0x40026088
 8001fb8:	200004bc 	.word	0x200004bc
 8001fbc:	400260a0 	.word	0x400260a0
 8001fc0:	40004800 	.word	0x40004800

08001fc4 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	@ (800201c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fca:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8001fce:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001fd0:	4b12      	ldr	r3, [pc, #72]	@ (800201c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd2:	2206      	movs	r2, #6
 8001fd4:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001fd6:	4b11      	ldr	r3, [pc, #68]	@ (800201c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fd8:	2202      	movs	r2, #2
 8001fda:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001fdc:	4b0f      	ldr	r3, [pc, #60]	@ (800201c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8001fe2:	4b0e      	ldr	r3, [pc, #56]	@ (800201c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fe4:	2202      	movs	r2, #2
 8001fe6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8001fe8:	4b0c      	ldr	r3, [pc, #48]	@ (800201c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8001fee:	4b0b      	ldr	r3, [pc, #44]	@ (800201c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8001ff4:	4b09      	ldr	r3, [pc, #36]	@ (800201c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ff6:	2200      	movs	r2, #0
 8001ff8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8001ffa:	4b08      	ldr	r3, [pc, #32]	@ (800201c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8002000:	4b06      	ldr	r3, [pc, #24]	@ (800201c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002002:	2200      	movs	r2, #0
 8002004:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8002006:	4805      	ldr	r0, [pc, #20]	@ (800201c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8002008:	f001 f835 	bl	8003076 <HAL_PCD_Init>
 800200c:	4603      	mov	r3, r0
 800200e:	2b00      	cmp	r3, #0
 8002010:	d001      	beq.n	8002016 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8002012:	f7fe fffd 	bl	8001010 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8002016:	bf00      	nop
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	2000051c 	.word	0x2000051c

08002020 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b0ae      	sub	sp, #184	@ 0xb8
 8002024:	af00      	add	r7, sp, #0
 8002026:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002028:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
 8002030:	605a      	str	r2, [r3, #4]
 8002032:	609a      	str	r2, [r3, #8]
 8002034:	60da      	str	r2, [r3, #12]
 8002036:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8002038:	f107 0314 	add.w	r3, r7, #20
 800203c:	2290      	movs	r2, #144	@ 0x90
 800203e:	2100      	movs	r1, #0
 8002040:	4618      	mov	r0, r3
 8002042:	f006 f9df 	bl	8008404 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800204e:	d159      	bne.n	8002104 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8002050:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8002054:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8002056:	2300      	movs	r3, #0
 8002058:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800205c:	f107 0314 	add.w	r3, r7, #20
 8002060:	4618      	mov	r0, r3
 8002062:	f001 fe77 	bl	8003d54 <HAL_RCCEx_PeriphCLKConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 800206c:	f7fe ffd0 	bl	8001010 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002070:	4b26      	ldr	r3, [pc, #152]	@ (800210c <HAL_PCD_MspInit+0xec>)
 8002072:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002074:	4a25      	ldr	r2, [pc, #148]	@ (800210c <HAL_PCD_MspInit+0xec>)
 8002076:	f043 0301 	orr.w	r3, r3, #1
 800207a:	6313      	str	r3, [r2, #48]	@ 0x30
 800207c:	4b23      	ldr	r3, [pc, #140]	@ (800210c <HAL_PCD_MspInit+0xec>)
 800207e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002080:	f003 0301 	and.w	r3, r3, #1
 8002084:	613b      	str	r3, [r7, #16]
 8002086:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8002088:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800208c:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002090:	2302      	movs	r3, #2
 8002092:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002096:	2300      	movs	r3, #0
 8002098:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800209c:	2303      	movs	r3, #3
 800209e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80020a2:	230a      	movs	r3, #10
 80020a4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020a8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80020ac:	4619      	mov	r1, r3
 80020ae:	4818      	ldr	r0, [pc, #96]	@ (8002110 <HAL_PCD_MspInit+0xf0>)
 80020b0:	f000 fe02 	bl	8002cb8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 80020b4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80020b8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80020bc:	2300      	movs	r3, #0
 80020be:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020c2:	2300      	movs	r3, #0
 80020c4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 80020c8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 80020cc:	4619      	mov	r1, r3
 80020ce:	4810      	ldr	r0, [pc, #64]	@ (8002110 <HAL_PCD_MspInit+0xf0>)
 80020d0:	f000 fdf2 	bl	8002cb8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80020d4:	4b0d      	ldr	r3, [pc, #52]	@ (800210c <HAL_PCD_MspInit+0xec>)
 80020d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020d8:	4a0c      	ldr	r2, [pc, #48]	@ (800210c <HAL_PCD_MspInit+0xec>)
 80020da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80020de:	6353      	str	r3, [r2, #52]	@ 0x34
 80020e0:	4b0a      	ldr	r3, [pc, #40]	@ (800210c <HAL_PCD_MspInit+0xec>)
 80020e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80020e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	4b07      	ldr	r3, [pc, #28]	@ (800210c <HAL_PCD_MspInit+0xec>)
 80020ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f0:	4a06      	ldr	r2, [pc, #24]	@ (800210c <HAL_PCD_MspInit+0xec>)
 80020f2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020f6:	6453      	str	r3, [r2, #68]	@ 0x44
 80020f8:	4b04      	ldr	r3, [pc, #16]	@ (800210c <HAL_PCD_MspInit+0xec>)
 80020fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002100:	60bb      	str	r3, [r7, #8]
 8002102:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8002104:	bf00      	nop
 8002106:	37b8      	adds	r7, #184	@ 0xb8
 8002108:	46bd      	mov	sp, r7
 800210a:	bd80      	pop	{r7, pc}
 800210c:	40023800 	.word	0x40023800
 8002110:	40020000 	.word	0x40020000

08002114 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002114:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800214c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002118:	f7ff f8b8 	bl	800128c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800211c:	480c      	ldr	r0, [pc, #48]	@ (8002150 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800211e:	490d      	ldr	r1, [pc, #52]	@ (8002154 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002120:	4a0d      	ldr	r2, [pc, #52]	@ (8002158 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002122:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002124:	e002      	b.n	800212c <LoopCopyDataInit>

08002126 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002126:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002128:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800212a:	3304      	adds	r3, #4

0800212c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800212c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800212e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002130:	d3f9      	bcc.n	8002126 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002132:	4a0a      	ldr	r2, [pc, #40]	@ (800215c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002134:	4c0a      	ldr	r4, [pc, #40]	@ (8002160 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002136:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002138:	e001      	b.n	800213e <LoopFillZerobss>

0800213a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800213a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800213c:	3204      	adds	r2, #4

0800213e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800213e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002140:	d3fb      	bcc.n	800213a <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002142:	f006 f9c5 	bl	80084d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002146:	f7fe fe17 	bl	8000d78 <main>
  bx  lr    
 800214a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800214c:	20080000 	.word	0x20080000
  ldr r0, =_sdata
 8002150:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002154:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 8002158:	080088c4 	.word	0x080088c4
  ldr r2, =_sbss
 800215c:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 8002160:	20000b48 	.word	0x20000b48

08002164 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002164:	e7fe      	b.n	8002164 <ADC_IRQHandler>

08002166 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002166:	b580      	push	{r7, lr}
 8002168:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800216a:	2003      	movs	r0, #3
 800216c:	f000 f94c 	bl	8002408 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002170:	2000      	movs	r0, #0
 8002172:	f000 f805 	bl	8002180 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002176:	f7fe ff51 	bl	800101c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	bd80      	pop	{r7, pc}

08002180 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002180:	b580      	push	{r7, lr}
 8002182:	b082      	sub	sp, #8
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002188:	4b12      	ldr	r3, [pc, #72]	@ (80021d4 <HAL_InitTick+0x54>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b12      	ldr	r3, [pc, #72]	@ (80021d8 <HAL_InitTick+0x58>)
 800218e:	781b      	ldrb	r3, [r3, #0]
 8002190:	4619      	mov	r1, r3
 8002192:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002196:	fbb3 f3f1 	udiv	r3, r3, r1
 800219a:	fbb2 f3f3 	udiv	r3, r2, r3
 800219e:	4618      	mov	r0, r3
 80021a0:	f000 f967 	bl	8002472 <HAL_SYSTICK_Config>
 80021a4:	4603      	mov	r3, r0
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d001      	beq.n	80021ae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80021aa:	2301      	movs	r3, #1
 80021ac:	e00e      	b.n	80021cc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	2b0f      	cmp	r3, #15
 80021b2:	d80a      	bhi.n	80021ca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80021b4:	2200      	movs	r2, #0
 80021b6:	6879      	ldr	r1, [r7, #4]
 80021b8:	f04f 30ff 	mov.w	r0, #4294967295
 80021bc:	f000 f92f 	bl	800241e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80021c0:	4a06      	ldr	r2, [pc, #24]	@ (80021dc <HAL_InitTick+0x5c>)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80021c6:	2300      	movs	r3, #0
 80021c8:	e000      	b.n	80021cc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80021ca:	2301      	movs	r3, #1
}
 80021cc:	4618      	mov	r0, r3
 80021ce:	3708      	adds	r7, #8
 80021d0:	46bd      	mov	sp, r7
 80021d2:	bd80      	pop	{r7, pc}
 80021d4:	20000000 	.word	0x20000000
 80021d8:	20000008 	.word	0x20000008
 80021dc:	20000004 	.word	0x20000004

080021e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80021e0:	b480      	push	{r7}
 80021e2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80021e4:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_IncTick+0x20>)
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	461a      	mov	r2, r3
 80021ea:	4b06      	ldr	r3, [pc, #24]	@ (8002204 <HAL_IncTick+0x24>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4413      	add	r3, r2
 80021f0:	4a04      	ldr	r2, [pc, #16]	@ (8002204 <HAL_IncTick+0x24>)
 80021f2:	6013      	str	r3, [r2, #0]
}
 80021f4:	bf00      	nop
 80021f6:	46bd      	mov	sp, r7
 80021f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fc:	4770      	bx	lr
 80021fe:	bf00      	nop
 8002200:	20000008 	.word	0x20000008
 8002204:	200009fc 	.word	0x200009fc

08002208 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002208:	b480      	push	{r7}
 800220a:	af00      	add	r7, sp, #0
  return uwTick;
 800220c:	4b03      	ldr	r3, [pc, #12]	@ (800221c <HAL_GetTick+0x14>)
 800220e:	681b      	ldr	r3, [r3, #0]
}
 8002210:	4618      	mov	r0, r3
 8002212:	46bd      	mov	sp, r7
 8002214:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002218:	4770      	bx	lr
 800221a:	bf00      	nop
 800221c:	200009fc 	.word	0x200009fc

08002220 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002220:	b580      	push	{r7, lr}
 8002222:	b084      	sub	sp, #16
 8002224:	af00      	add	r7, sp, #0
 8002226:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002228:	f7ff ffee 	bl	8002208 <HAL_GetTick>
 800222c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002238:	d005      	beq.n	8002246 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800223a:	4b0a      	ldr	r3, [pc, #40]	@ (8002264 <HAL_Delay+0x44>)
 800223c:	781b      	ldrb	r3, [r3, #0]
 800223e:	461a      	mov	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	4413      	add	r3, r2
 8002244:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002246:	bf00      	nop
 8002248:	f7ff ffde 	bl	8002208 <HAL_GetTick>
 800224c:	4602      	mov	r2, r0
 800224e:	68bb      	ldr	r3, [r7, #8]
 8002250:	1ad3      	subs	r3, r2, r3
 8002252:	68fa      	ldr	r2, [r7, #12]
 8002254:	429a      	cmp	r2, r3
 8002256:	d8f7      	bhi.n	8002248 <HAL_Delay+0x28>
  {
  }
}
 8002258:	bf00      	nop
 800225a:	bf00      	nop
 800225c:	3710      	adds	r7, #16
 800225e:	46bd      	mov	sp, r7
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	20000008 	.word	0x20000008

08002268 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002268:	b480      	push	{r7}
 800226a:	b085      	sub	sp, #20
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	f003 0307 	and.w	r3, r3, #7
 8002276:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002278:	4b0b      	ldr	r3, [pc, #44]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x40>)
 800227a:	68db      	ldr	r3, [r3, #12]
 800227c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800227e:	68ba      	ldr	r2, [r7, #8]
 8002280:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002284:	4013      	ands	r3, r2
 8002286:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002290:	4b06      	ldr	r3, [pc, #24]	@ (80022ac <__NVIC_SetPriorityGrouping+0x44>)
 8002292:	4313      	orrs	r3, r2
 8002294:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002296:	4a04      	ldr	r2, [pc, #16]	@ (80022a8 <__NVIC_SetPriorityGrouping+0x40>)
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	60d3      	str	r3, [r2, #12]
}
 800229c:	bf00      	nop
 800229e:	3714      	adds	r7, #20
 80022a0:	46bd      	mov	sp, r7
 80022a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a6:	4770      	bx	lr
 80022a8:	e000ed00 	.word	0xe000ed00
 80022ac:	05fa0000 	.word	0x05fa0000

080022b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80022b0:	b480      	push	{r7}
 80022b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80022b4:	4b04      	ldr	r3, [pc, #16]	@ (80022c8 <__NVIC_GetPriorityGrouping+0x18>)
 80022b6:	68db      	ldr	r3, [r3, #12]
 80022b8:	0a1b      	lsrs	r3, r3, #8
 80022ba:	f003 0307 	and.w	r3, r3, #7
}
 80022be:	4618      	mov	r0, r3
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	e000ed00 	.word	0xe000ed00

080022cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b083      	sub	sp, #12
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	4603      	mov	r3, r0
 80022d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80022d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022da:	2b00      	cmp	r3, #0
 80022dc:	db0b      	blt.n	80022f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80022de:	79fb      	ldrb	r3, [r7, #7]
 80022e0:	f003 021f 	and.w	r2, r3, #31
 80022e4:	4907      	ldr	r1, [pc, #28]	@ (8002304 <__NVIC_EnableIRQ+0x38>)
 80022e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80022ea:	095b      	lsrs	r3, r3, #5
 80022ec:	2001      	movs	r0, #1
 80022ee:	fa00 f202 	lsl.w	r2, r0, r2
 80022f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80022f6:	bf00      	nop
 80022f8:	370c      	adds	r7, #12
 80022fa:	46bd      	mov	sp, r7
 80022fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002300:	4770      	bx	lr
 8002302:	bf00      	nop
 8002304:	e000e100 	.word	0xe000e100

08002308 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002308:	b480      	push	{r7}
 800230a:	b083      	sub	sp, #12
 800230c:	af00      	add	r7, sp, #0
 800230e:	4603      	mov	r3, r0
 8002310:	6039      	str	r1, [r7, #0]
 8002312:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002314:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002318:	2b00      	cmp	r3, #0
 800231a:	db0a      	blt.n	8002332 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800231c:	683b      	ldr	r3, [r7, #0]
 800231e:	b2da      	uxtb	r2, r3
 8002320:	490c      	ldr	r1, [pc, #48]	@ (8002354 <__NVIC_SetPriority+0x4c>)
 8002322:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002326:	0112      	lsls	r2, r2, #4
 8002328:	b2d2      	uxtb	r2, r2
 800232a:	440b      	add	r3, r1
 800232c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002330:	e00a      	b.n	8002348 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	b2da      	uxtb	r2, r3
 8002336:	4908      	ldr	r1, [pc, #32]	@ (8002358 <__NVIC_SetPriority+0x50>)
 8002338:	79fb      	ldrb	r3, [r7, #7]
 800233a:	f003 030f 	and.w	r3, r3, #15
 800233e:	3b04      	subs	r3, #4
 8002340:	0112      	lsls	r2, r2, #4
 8002342:	b2d2      	uxtb	r2, r2
 8002344:	440b      	add	r3, r1
 8002346:	761a      	strb	r2, [r3, #24]
}
 8002348:	bf00      	nop
 800234a:	370c      	adds	r7, #12
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr
 8002354:	e000e100 	.word	0xe000e100
 8002358:	e000ed00 	.word	0xe000ed00

0800235c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b480      	push	{r7}
 800235e:	b089      	sub	sp, #36	@ 0x24
 8002360:	af00      	add	r7, sp, #0
 8002362:	60f8      	str	r0, [r7, #12]
 8002364:	60b9      	str	r1, [r7, #8]
 8002366:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	f003 0307 	and.w	r3, r3, #7
 800236e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002370:	69fb      	ldr	r3, [r7, #28]
 8002372:	f1c3 0307 	rsb	r3, r3, #7
 8002376:	2b04      	cmp	r3, #4
 8002378:	bf28      	it	cs
 800237a:	2304      	movcs	r3, #4
 800237c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800237e:	69fb      	ldr	r3, [r7, #28]
 8002380:	3304      	adds	r3, #4
 8002382:	2b06      	cmp	r3, #6
 8002384:	d902      	bls.n	800238c <NVIC_EncodePriority+0x30>
 8002386:	69fb      	ldr	r3, [r7, #28]
 8002388:	3b03      	subs	r3, #3
 800238a:	e000      	b.n	800238e <NVIC_EncodePriority+0x32>
 800238c:	2300      	movs	r3, #0
 800238e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002390:	f04f 32ff 	mov.w	r2, #4294967295
 8002394:	69bb      	ldr	r3, [r7, #24]
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43da      	mvns	r2, r3
 800239c:	68bb      	ldr	r3, [r7, #8]
 800239e:	401a      	ands	r2, r3
 80023a0:	697b      	ldr	r3, [r7, #20]
 80023a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80023a4:	f04f 31ff 	mov.w	r1, #4294967295
 80023a8:	697b      	ldr	r3, [r7, #20]
 80023aa:	fa01 f303 	lsl.w	r3, r1, r3
 80023ae:	43d9      	mvns	r1, r3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80023b4:	4313      	orrs	r3, r2
         );
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	3724      	adds	r7, #36	@ 0x24
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr
	...

080023c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b082      	sub	sp, #8
 80023c8:	af00      	add	r7, sp, #0
 80023ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	3b01      	subs	r3, #1
 80023d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80023d4:	d301      	bcc.n	80023da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80023d6:	2301      	movs	r3, #1
 80023d8:	e00f      	b.n	80023fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80023da:	4a0a      	ldr	r2, [pc, #40]	@ (8002404 <SysTick_Config+0x40>)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	3b01      	subs	r3, #1
 80023e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80023e2:	210f      	movs	r1, #15
 80023e4:	f04f 30ff 	mov.w	r0, #4294967295
 80023e8:	f7ff ff8e 	bl	8002308 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80023ec:	4b05      	ldr	r3, [pc, #20]	@ (8002404 <SysTick_Config+0x40>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80023f2:	4b04      	ldr	r3, [pc, #16]	@ (8002404 <SysTick_Config+0x40>)
 80023f4:	2207      	movs	r2, #7
 80023f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3708      	adds	r7, #8
 80023fe:	46bd      	mov	sp, r7
 8002400:	bd80      	pop	{r7, pc}
 8002402:	bf00      	nop
 8002404:	e000e010 	.word	0xe000e010

08002408 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002408:	b580      	push	{r7, lr}
 800240a:	b082      	sub	sp, #8
 800240c:	af00      	add	r7, sp, #0
 800240e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002410:	6878      	ldr	r0, [r7, #4]
 8002412:	f7ff ff29 	bl	8002268 <__NVIC_SetPriorityGrouping>
}
 8002416:	bf00      	nop
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}

0800241e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800241e:	b580      	push	{r7, lr}
 8002420:	b086      	sub	sp, #24
 8002422:	af00      	add	r7, sp, #0
 8002424:	4603      	mov	r3, r0
 8002426:	60b9      	str	r1, [r7, #8]
 8002428:	607a      	str	r2, [r7, #4]
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800242c:	2300      	movs	r3, #0
 800242e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002430:	f7ff ff3e 	bl	80022b0 <__NVIC_GetPriorityGrouping>
 8002434:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002436:	687a      	ldr	r2, [r7, #4]
 8002438:	68b9      	ldr	r1, [r7, #8]
 800243a:	6978      	ldr	r0, [r7, #20]
 800243c:	f7ff ff8e 	bl	800235c <NVIC_EncodePriority>
 8002440:	4602      	mov	r2, r0
 8002442:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002446:	4611      	mov	r1, r2
 8002448:	4618      	mov	r0, r3
 800244a:	f7ff ff5d 	bl	8002308 <__NVIC_SetPriority>
}
 800244e:	bf00      	nop
 8002450:	3718      	adds	r7, #24
 8002452:	46bd      	mov	sp, r7
 8002454:	bd80      	pop	{r7, pc}

08002456 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002456:	b580      	push	{r7, lr}
 8002458:	b082      	sub	sp, #8
 800245a:	af00      	add	r7, sp, #0
 800245c:	4603      	mov	r3, r0
 800245e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002460:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff ff31 	bl	80022cc <__NVIC_EnableIRQ>
}
 800246a:	bf00      	nop
 800246c:	3708      	adds	r7, #8
 800246e:	46bd      	mov	sp, r7
 8002470:	bd80      	pop	{r7, pc}

08002472 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002472:	b580      	push	{r7, lr}
 8002474:	b082      	sub	sp, #8
 8002476:	af00      	add	r7, sp, #0
 8002478:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800247a:	6878      	ldr	r0, [r7, #4]
 800247c:	f7ff ffa2 	bl	80023c4 <SysTick_Config>
 8002480:	4603      	mov	r3, r0
}
 8002482:	4618      	mov	r0, r3
 8002484:	3708      	adds	r7, #8
 8002486:	46bd      	mov	sp, r7
 8002488:	bd80      	pop	{r7, pc}
	...

0800248c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800248c:	b580      	push	{r7, lr}
 800248e:	b086      	sub	sp, #24
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8002494:	2300      	movs	r3, #0
 8002496:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8002498:	f7ff feb6 	bl	8002208 <HAL_GetTick>
 800249c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d101      	bne.n	80024a8 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80024a4:	2301      	movs	r3, #1
 80024a6:	e099      	b.n	80025dc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	2202      	movs	r2, #2
 80024ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	2200      	movs	r2, #0
 80024b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	681a      	ldr	r2, [r3, #0]
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f022 0201 	bic.w	r2, r2, #1
 80024c6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024c8:	e00f      	b.n	80024ea <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80024ca:	f7ff fe9d 	bl	8002208 <HAL_GetTick>
 80024ce:	4602      	mov	r2, r0
 80024d0:	693b      	ldr	r3, [r7, #16]
 80024d2:	1ad3      	subs	r3, r2, r3
 80024d4:	2b05      	cmp	r3, #5
 80024d6:	d908      	bls.n	80024ea <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	2220      	movs	r2, #32
 80024dc:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	2203      	movs	r2, #3
 80024e2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 80024e6:	2303      	movs	r3, #3
 80024e8:	e078      	b.n	80025dc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0301 	and.w	r3, r3, #1
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d1e8      	bne.n	80024ca <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8002500:	697a      	ldr	r2, [r7, #20]
 8002502:	4b38      	ldr	r3, [pc, #224]	@ (80025e4 <HAL_DMA_Init+0x158>)
 8002504:	4013      	ands	r3, r2
 8002506:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	685a      	ldr	r2, [r3, #4]
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	689b      	ldr	r3, [r3, #8]
 8002510:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002516:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	691b      	ldr	r3, [r3, #16]
 800251c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8002522:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	699b      	ldr	r3, [r3, #24]
 8002528:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800252e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8002536:	697a      	ldr	r2, [r7, #20]
 8002538:	4313      	orrs	r3, r2
 800253a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002540:	2b04      	cmp	r3, #4
 8002542:	d107      	bne.n	8002554 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800254c:	4313      	orrs	r3, r2
 800254e:	697a      	ldr	r2, [r7, #20]
 8002550:	4313      	orrs	r3, r2
 8002552:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	697a      	ldr	r2, [r7, #20]
 800255a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	695b      	ldr	r3, [r3, #20]
 8002562:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f023 0307 	bic.w	r3, r3, #7
 800256a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002570:	697a      	ldr	r2, [r7, #20]
 8002572:	4313      	orrs	r3, r2
 8002574:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800257a:	2b04      	cmp	r3, #4
 800257c:	d117      	bne.n	80025ae <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002582:	697a      	ldr	r2, [r7, #20]
 8002584:	4313      	orrs	r3, r2
 8002586:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800258c:	2b00      	cmp	r3, #0
 800258e:	d00e      	beq.n	80025ae <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002590:	6878      	ldr	r0, [r7, #4]
 8002592:	f000 fb15 	bl	8002bc0 <DMA_CheckFifoParam>
 8002596:	4603      	mov	r3, r0
 8002598:	2b00      	cmp	r3, #0
 800259a:	d008      	beq.n	80025ae <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	2240      	movs	r2, #64	@ 0x40
 80025a0:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	2200      	movs	r2, #0
 80025a6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 80025aa:	2301      	movs	r3, #1
 80025ac:	e016      	b.n	80025dc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	697a      	ldr	r2, [r7, #20]
 80025b4:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 facc 	bl	8002b54 <DMA_CalcBaseAndBitshift>
 80025bc:	4603      	mov	r3, r0
 80025be:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025c4:	223f      	movs	r2, #63	@ 0x3f
 80025c6:	409a      	lsls	r2, r3
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	2200      	movs	r2, #0
 80025d0:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	2201      	movs	r2, #1
 80025d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80025da:	2300      	movs	r3, #0
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3718      	adds	r7, #24
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	e010803f 	.word	0xe010803f

080025e8 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80025e8:	b580      	push	{r7, lr}
 80025ea:	b086      	sub	sp, #24
 80025ec:	af00      	add	r7, sp, #0
 80025ee:	60f8      	str	r0, [r7, #12]
 80025f0:	60b9      	str	r1, [r7, #8]
 80025f2:	607a      	str	r2, [r7, #4]
 80025f4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80025f6:	2300      	movs	r3, #0
 80025f8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80025fe:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8002606:	2b01      	cmp	r3, #1
 8002608:	d101      	bne.n	800260e <HAL_DMA_Start_IT+0x26>
 800260a:	2302      	movs	r3, #2
 800260c:	e048      	b.n	80026a0 <HAL_DMA_Start_IT+0xb8>
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	2201      	movs	r2, #1
 8002612:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800261c:	b2db      	uxtb	r3, r3
 800261e:	2b01      	cmp	r3, #1
 8002620:	d137      	bne.n	8002692 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	2202      	movs	r2, #2
 8002626:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	2200      	movs	r2, #0
 800262e:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	687a      	ldr	r2, [r7, #4]
 8002634:	68b9      	ldr	r1, [r7, #8]
 8002636:	68f8      	ldr	r0, [r7, #12]
 8002638:	f000 fa5e 	bl	8002af8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800263c:	68fb      	ldr	r3, [r7, #12]
 800263e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002640:	223f      	movs	r2, #63	@ 0x3f
 8002642:	409a      	lsls	r2, r3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	681a      	ldr	r2, [r3, #0]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f042 0216 	orr.w	r2, r2, #22
 8002656:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	68fb      	ldr	r3, [r7, #12]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002666:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800266c:	2b00      	cmp	r3, #0
 800266e:	d007      	beq.n	8002680 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	681a      	ldr	r2, [r3, #0]
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f042 0208 	orr.w	r2, r2, #8
 800267e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002680:	68fb      	ldr	r3, [r7, #12]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	681a      	ldr	r2, [r3, #0]
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	f042 0201 	orr.w	r2, r2, #1
 800268e:	601a      	str	r2, [r3, #0]
 8002690:	e005      	b.n	800269e <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	2200      	movs	r2, #0
 8002696:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800269a:	2302      	movs	r3, #2
 800269c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800269e:	7dfb      	ldrb	r3, [r7, #23]
}
 80026a0:	4618      	mov	r0, r3
 80026a2:	3718      	adds	r7, #24
 80026a4:	46bd      	mov	sp, r7
 80026a6:	bd80      	pop	{r7, pc}

080026a8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b084      	sub	sp, #16
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80026b4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80026b6:	f7ff fda7 	bl	8002208 <HAL_GetTick>
 80026ba:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b02      	cmp	r3, #2
 80026c6:	d008      	beq.n	80026da <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	2280      	movs	r2, #128	@ 0x80
 80026cc:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	2200      	movs	r2, #0
 80026d2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80026d6:	2301      	movs	r3, #1
 80026d8:	e052      	b.n	8002780 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	681a      	ldr	r2, [r3, #0]
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	f022 0216 	bic.w	r2, r2, #22
 80026e8:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	695a      	ldr	r2, [r3, #20]
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80026f8:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d103      	bne.n	800270a <HAL_DMA_Abort+0x62>
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002706:	2b00      	cmp	r3, #0
 8002708:	d007      	beq.n	800271a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f022 0208 	bic.w	r2, r2, #8
 8002718:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	681a      	ldr	r2, [r3, #0]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f022 0201 	bic.w	r2, r2, #1
 8002728:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800272a:	e013      	b.n	8002754 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800272c:	f7ff fd6c 	bl	8002208 <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	68bb      	ldr	r3, [r7, #8]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	2b05      	cmp	r3, #5
 8002738:	d90c      	bls.n	8002754 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2220      	movs	r2, #32
 800273e:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2203      	movs	r2, #3
 8002744:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	2200      	movs	r2, #0
 800274c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e015      	b.n	8002780 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1e4      	bne.n	800272c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002766:	223f      	movs	r2, #63	@ 0x3f
 8002768:	409a      	lsls	r2, r3
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	2200      	movs	r2, #0
 800277a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
  }
  return HAL_OK;
 800277e:	2300      	movs	r3, #0
}
 8002780:	4618      	mov	r0, r3
 8002782:	3710      	adds	r7, #16
 8002784:	46bd      	mov	sp, r7
 8002786:	bd80      	pop	{r7, pc}

08002788 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b02      	cmp	r3, #2
 800279a:	d004      	beq.n	80027a6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	2280      	movs	r2, #128	@ 0x80
 80027a0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e00c      	b.n	80027c0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2205      	movs	r2, #5
 80027aa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	681a      	ldr	r2, [r3, #0]
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	f022 0201 	bic.w	r2, r2, #1
 80027bc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80027be:	2300      	movs	r3, #0
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	370c      	adds	r7, #12
 80027c4:	46bd      	mov	sp, r7
 80027c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ca:	4770      	bx	lr

080027cc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80027cc:	b580      	push	{r7, lr}
 80027ce:	b086      	sub	sp, #24
 80027d0:	af00      	add	r7, sp, #0
 80027d2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 80027d4:	2300      	movs	r3, #0
 80027d6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 80027d8:	4b8e      	ldr	r3, [pc, #568]	@ (8002a14 <HAL_DMA_IRQHandler+0x248>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a8e      	ldr	r2, [pc, #568]	@ (8002a18 <HAL_DMA_IRQHandler+0x24c>)
 80027de:	fba2 2303 	umull	r2, r3, r2, r3
 80027e2:	0a9b      	lsrs	r3, r3, #10
 80027e4:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80027ea:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80027ec:	693b      	ldr	r3, [r7, #16]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027f6:	2208      	movs	r2, #8
 80027f8:	409a      	lsls	r2, r3
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	4013      	ands	r3, r2
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d01a      	beq.n	8002838 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0304 	and.w	r3, r3, #4
 800280c:	2b00      	cmp	r3, #0
 800280e:	d013      	beq.n	8002838 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	681a      	ldr	r2, [r3, #0]
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	f022 0204 	bic.w	r2, r2, #4
 800281e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002824:	2208      	movs	r2, #8
 8002826:	409a      	lsls	r2, r3
 8002828:	693b      	ldr	r3, [r7, #16]
 800282a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002830:	f043 0201 	orr.w	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800283c:	2201      	movs	r2, #1
 800283e:	409a      	lsls	r2, r3
 8002840:	68fb      	ldr	r3, [r7, #12]
 8002842:	4013      	ands	r3, r2
 8002844:	2b00      	cmp	r3, #0
 8002846:	d012      	beq.n	800286e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	695b      	ldr	r3, [r3, #20]
 800284e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00b      	beq.n	800286e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285a:	2201      	movs	r2, #1
 800285c:	409a      	lsls	r2, r3
 800285e:	693b      	ldr	r3, [r7, #16]
 8002860:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002866:	f043 0202 	orr.w	r2, r3, #2
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002872:	2204      	movs	r2, #4
 8002874:	409a      	lsls	r2, r3
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d012      	beq.n	80028a4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	f003 0302 	and.w	r3, r3, #2
 8002888:	2b00      	cmp	r3, #0
 800288a:	d00b      	beq.n	80028a4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002890:	2204      	movs	r2, #4
 8002892:	409a      	lsls	r2, r3
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800289c:	f043 0204 	orr.w	r2, r3, #4
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028a8:	2210      	movs	r2, #16
 80028aa:	409a      	lsls	r2, r3
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	4013      	ands	r3, r2
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d043      	beq.n	800293c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0308 	and.w	r3, r3, #8
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d03c      	beq.n	800293c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c6:	2210      	movs	r2, #16
 80028c8:	409a      	lsls	r2, r3
 80028ca:	693b      	ldr	r3, [r7, #16]
 80028cc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d018      	beq.n	800290e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d108      	bne.n	80028fc <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028ee:	2b00      	cmp	r3, #0
 80028f0:	d024      	beq.n	800293c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	4798      	blx	r3
 80028fa:	e01f      	b.n	800293c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002900:	2b00      	cmp	r3, #0
 8002902:	d01b      	beq.n	800293c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002908:	6878      	ldr	r0, [r7, #4]
 800290a:	4798      	blx	r3
 800290c:	e016      	b.n	800293c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002918:	2b00      	cmp	r3, #0
 800291a:	d107      	bne.n	800292c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f022 0208 	bic.w	r2, r2, #8
 800292a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002930:	2b00      	cmp	r3, #0
 8002932:	d003      	beq.n	800293c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002938:	6878      	ldr	r0, [r7, #4]
 800293a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002940:	2220      	movs	r2, #32
 8002942:	409a      	lsls	r2, r3
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	4013      	ands	r3, r2
 8002948:	2b00      	cmp	r3, #0
 800294a:	f000 808f 	beq.w	8002a6c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f003 0310 	and.w	r3, r3, #16
 8002958:	2b00      	cmp	r3, #0
 800295a:	f000 8087 	beq.w	8002a6c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002962:	2220      	movs	r2, #32
 8002964:	409a      	lsls	r2, r3
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002970:	b2db      	uxtb	r3, r3
 8002972:	2b05      	cmp	r3, #5
 8002974:	d136      	bne.n	80029e4 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	681a      	ldr	r2, [r3, #0]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	f022 0216 	bic.w	r2, r2, #22
 8002984:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	695a      	ldr	r2, [r3, #20]
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002994:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299a:	2b00      	cmp	r3, #0
 800299c:	d103      	bne.n	80029a6 <HAL_DMA_IRQHandler+0x1da>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80029a2:	2b00      	cmp	r3, #0
 80029a4:	d007      	beq.n	80029b6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	681a      	ldr	r2, [r3, #0]
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f022 0208 	bic.w	r2, r2, #8
 80029b4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80029ba:	223f      	movs	r2, #63	@ 0x3f
 80029bc:	409a      	lsls	r2, r3
 80029be:	693b      	ldr	r3, [r7, #16]
 80029c0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	2201      	movs	r2, #1
 80029c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d07e      	beq.n	8002ad8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80029de:	6878      	ldr	r0, [r7, #4]
 80029e0:	4798      	blx	r3
        }
        return;
 80029e2:	e079      	b.n	8002ad8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d01d      	beq.n	8002a2e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80029fc:	2b00      	cmp	r3, #0
 80029fe:	d10d      	bne.n	8002a1c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d031      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0c:	6878      	ldr	r0, [r7, #4]
 8002a0e:	4798      	blx	r3
 8002a10:	e02c      	b.n	8002a6c <HAL_DMA_IRQHandler+0x2a0>
 8002a12:	bf00      	nop
 8002a14:	20000000 	.word	0x20000000
 8002a18:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d023      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a28:	6878      	ldr	r0, [r7, #4]
 8002a2a:	4798      	blx	r3
 8002a2c:	e01e      	b.n	8002a6c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d10f      	bne.n	8002a5c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	681a      	ldr	r2, [r3, #0]
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	f022 0210 	bic.w	r2, r2, #16
 8002a4a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	2201      	movs	r2, #1
 8002a50:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d003      	beq.n	8002a6c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d032      	beq.n	8002ada <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002a78:	f003 0301 	and.w	r3, r3, #1
 8002a7c:	2b00      	cmp	r3, #0
 8002a7e:	d022      	beq.n	8002ac6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2205      	movs	r2, #5
 8002a84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	681a      	ldr	r2, [r3, #0]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0201 	bic.w	r2, r2, #1
 8002a96:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	697a      	ldr	r2, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	d307      	bcc.n	8002ab4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	681b      	ldr	r3, [r3, #0]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d1f2      	bne.n	8002a98 <HAL_DMA_IRQHandler+0x2cc>
 8002ab2:	e000      	b.n	8002ab6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002ab4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2201      	movs	r2, #1
 8002aba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d005      	beq.n	8002ada <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	4798      	blx	r3
 8002ad6:	e000      	b.n	8002ada <HAL_DMA_IRQHandler+0x30e>
        return;
 8002ad8:	bf00      	nop
    }
  }
}
 8002ada:	3718      	adds	r7, #24
 8002adc:	46bd      	mov	sp, r7
 8002ade:	bd80      	pop	{r7, pc}

08002ae0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8002aec:	4618      	mov	r0, r3
 8002aee:	370c      	adds	r7, #12
 8002af0:	46bd      	mov	sp, r7
 8002af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af6:	4770      	bx	lr

08002af8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002af8:	b480      	push	{r7}
 8002afa:	b085      	sub	sp, #20
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	60f8      	str	r0, [r7, #12]
 8002b00:	60b9      	str	r1, [r7, #8]
 8002b02:	607a      	str	r2, [r7, #4]
 8002b04:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	681a      	ldr	r2, [r3, #0]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002b14:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	683a      	ldr	r2, [r7, #0]
 8002b1c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	689b      	ldr	r3, [r3, #8]
 8002b22:	2b40      	cmp	r3, #64	@ 0x40
 8002b24:	d108      	bne.n	8002b38 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	687a      	ldr	r2, [r7, #4]
 8002b2c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68ba      	ldr	r2, [r7, #8]
 8002b34:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002b36:	e007      	b.n	8002b48 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	68ba      	ldr	r2, [r7, #8]
 8002b3e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	687a      	ldr	r2, [r7, #4]
 8002b46:	60da      	str	r2, [r3, #12]
}
 8002b48:	bf00      	nop
 8002b4a:	3714      	adds	r7, #20
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b085      	sub	sp, #20
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	3b10      	subs	r3, #16
 8002b64:	4a13      	ldr	r2, [pc, #76]	@ (8002bb4 <DMA_CalcBaseAndBitshift+0x60>)
 8002b66:	fba2 2303 	umull	r2, r3, r2, r3
 8002b6a:	091b      	lsrs	r3, r3, #4
 8002b6c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002b6e:	4a12      	ldr	r2, [pc, #72]	@ (8002bb8 <DMA_CalcBaseAndBitshift+0x64>)
 8002b70:	68fb      	ldr	r3, [r7, #12]
 8002b72:	4413      	add	r3, r2
 8002b74:	781b      	ldrb	r3, [r3, #0]
 8002b76:	461a      	mov	r2, r3
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	2b03      	cmp	r3, #3
 8002b80:	d908      	bls.n	8002b94 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	461a      	mov	r2, r3
 8002b88:	4b0c      	ldr	r3, [pc, #48]	@ (8002bbc <DMA_CalcBaseAndBitshift+0x68>)
 8002b8a:	4013      	ands	r3, r2
 8002b8c:	1d1a      	adds	r2, r3, #4
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	659a      	str	r2, [r3, #88]	@ 0x58
 8002b92:	e006      	b.n	8002ba2 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	461a      	mov	r2, r3
 8002b9a:	4b08      	ldr	r3, [pc, #32]	@ (8002bbc <DMA_CalcBaseAndBitshift+0x68>)
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	687a      	ldr	r2, [r7, #4]
 8002ba0:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3714      	adds	r7, #20
 8002baa:	46bd      	mov	sp, r7
 8002bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bb0:	4770      	bx	lr
 8002bb2:	bf00      	nop
 8002bb4:	aaaaaaab 	.word	0xaaaaaaab
 8002bb8:	080087a8 	.word	0x080087a8
 8002bbc:	fffffc00 	.word	0xfffffc00

08002bc0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002bc8:	2300      	movs	r3, #0
 8002bca:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bd0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	699b      	ldr	r3, [r3, #24]
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d11f      	bne.n	8002c1a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002bda:	68bb      	ldr	r3, [r7, #8]
 8002bdc:	2b03      	cmp	r3, #3
 8002bde:	d856      	bhi.n	8002c8e <DMA_CheckFifoParam+0xce>
 8002be0:	a201      	add	r2, pc, #4	@ (adr r2, 8002be8 <DMA_CheckFifoParam+0x28>)
 8002be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002be6:	bf00      	nop
 8002be8:	08002bf9 	.word	0x08002bf9
 8002bec:	08002c0b 	.word	0x08002c0b
 8002bf0:	08002bf9 	.word	0x08002bf9
 8002bf4:	08002c8f 	.word	0x08002c8f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002bfc:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d046      	beq.n	8002c92 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002c04:	2301      	movs	r3, #1
 8002c06:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c08:	e043      	b.n	8002c92 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c0e:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c12:	d140      	bne.n	8002c96 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c18:	e03d      	b.n	8002c96 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002c22:	d121      	bne.n	8002c68 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	2b03      	cmp	r3, #3
 8002c28:	d837      	bhi.n	8002c9a <DMA_CheckFifoParam+0xda>
 8002c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8002c30 <DMA_CheckFifoParam+0x70>)
 8002c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002c30:	08002c41 	.word	0x08002c41
 8002c34:	08002c47 	.word	0x08002c47
 8002c38:	08002c41 	.word	0x08002c41
 8002c3c:	08002c59 	.word	0x08002c59
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	73fb      	strb	r3, [r7, #15]
      break;
 8002c44:	e030      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c4a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d025      	beq.n	8002c9e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002c52:	2301      	movs	r3, #1
 8002c54:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002c56:	e022      	b.n	8002c9e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c5c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8002c60:	d11f      	bne.n	8002ca2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002c62:	2301      	movs	r3, #1
 8002c64:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002c66:	e01c      	b.n	8002ca2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b02      	cmp	r3, #2
 8002c6c:	d903      	bls.n	8002c76 <DMA_CheckFifoParam+0xb6>
 8002c6e:	68bb      	ldr	r3, [r7, #8]
 8002c70:	2b03      	cmp	r3, #3
 8002c72:	d003      	beq.n	8002c7c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002c74:	e018      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	73fb      	strb	r3, [r7, #15]
      break;
 8002c7a:	e015      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c80:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00e      	beq.n	8002ca6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	73fb      	strb	r3, [r7, #15]
      break;
 8002c8c:	e00b      	b.n	8002ca6 <DMA_CheckFifoParam+0xe6>
      break;
 8002c8e:	bf00      	nop
 8002c90:	e00a      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002c92:	bf00      	nop
 8002c94:	e008      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002c96:	bf00      	nop
 8002c98:	e006      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002c9a:	bf00      	nop
 8002c9c:	e004      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002c9e:	bf00      	nop
 8002ca0:	e002      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;   
 8002ca2:	bf00      	nop
 8002ca4:	e000      	b.n	8002ca8 <DMA_CheckFifoParam+0xe8>
      break;
 8002ca6:	bf00      	nop
    }
  } 
  
  return status; 
 8002ca8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3714      	adds	r7, #20
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr
 8002cb6:	bf00      	nop

08002cb8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cb8:	b480      	push	{r7}
 8002cba:	b089      	sub	sp, #36	@ 0x24
 8002cbc:	af00      	add	r7, sp, #0
 8002cbe:	6078      	str	r0, [r7, #4]
 8002cc0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002cc2:	2300      	movs	r3, #0
 8002cc4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002cce:	2300      	movs	r3, #0
 8002cd0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 8002cd2:	2300      	movs	r3, #0
 8002cd4:	61fb      	str	r3, [r7, #28]
 8002cd6:	e175      	b.n	8002fc4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002cd8:	2201      	movs	r2, #1
 8002cda:	69fb      	ldr	r3, [r7, #28]
 8002cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002ce2:	683b      	ldr	r3, [r7, #0]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	697a      	ldr	r2, [r7, #20]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8002cec:	693a      	ldr	r2, [r7, #16]
 8002cee:	697b      	ldr	r3, [r7, #20]
 8002cf0:	429a      	cmp	r2, r3
 8002cf2:	f040 8164 	bne.w	8002fbe <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cf6:	683b      	ldr	r3, [r7, #0]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b01      	cmp	r3, #1
 8002d00:	d005      	beq.n	8002d0e <HAL_GPIO_Init+0x56>
 8002d02:	683b      	ldr	r3, [r7, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f003 0303 	and.w	r3, r3, #3
 8002d0a:	2b02      	cmp	r3, #2
 8002d0c:	d130      	bne.n	8002d70 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002d14:	69fb      	ldr	r3, [r7, #28]
 8002d16:	005b      	lsls	r3, r3, #1
 8002d18:	2203      	movs	r2, #3
 8002d1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1e:	43db      	mvns	r3, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4013      	ands	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	68da      	ldr	r2, [r3, #12]
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	69ba      	ldr	r2, [r7, #24]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d44:	2201      	movs	r2, #1
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	43db      	mvns	r3, r3
 8002d4e:	69ba      	ldr	r2, [r7, #24]
 8002d50:	4013      	ands	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d54:	683b      	ldr	r3, [r7, #0]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	091b      	lsrs	r3, r3, #4
 8002d5a:	f003 0201 	and.w	r2, r3, #1
 8002d5e:	69fb      	ldr	r3, [r7, #28]
 8002d60:	fa02 f303 	lsl.w	r3, r2, r3
 8002d64:	69ba      	ldr	r2, [r7, #24]
 8002d66:	4313      	orrs	r3, r2
 8002d68:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f003 0303 	and.w	r3, r3, #3
 8002d78:	2b03      	cmp	r3, #3
 8002d7a:	d017      	beq.n	8002dac <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	68db      	ldr	r3, [r3, #12]
 8002d80:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002d82:	69fb      	ldr	r3, [r7, #28]
 8002d84:	005b      	lsls	r3, r3, #1
 8002d86:	2203      	movs	r2, #3
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	43db      	mvns	r3, r3
 8002d8e:	69ba      	ldr	r2, [r7, #24]
 8002d90:	4013      	ands	r3, r2
 8002d92:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 8002d94:	683b      	ldr	r3, [r7, #0]
 8002d96:	689a      	ldr	r2, [r3, #8]
 8002d98:	69fb      	ldr	r3, [r7, #28]
 8002d9a:	005b      	lsls	r3, r3, #1
 8002d9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4313      	orrs	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f003 0303 	and.w	r3, r3, #3
 8002db4:	2b02      	cmp	r3, #2
 8002db6:	d123      	bne.n	8002e00 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	08da      	lsrs	r2, r3, #3
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	3208      	adds	r2, #8
 8002dc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8002dc6:	69fb      	ldr	r3, [r7, #28]
 8002dc8:	f003 0307 	and.w	r3, r3, #7
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	220f      	movs	r2, #15
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43db      	mvns	r3, r3
 8002dd6:	69ba      	ldr	r2, [r7, #24]
 8002dd8:	4013      	ands	r3, r2
 8002dda:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002ddc:	683b      	ldr	r3, [r7, #0]
 8002dde:	691a      	ldr	r2, [r3, #16]
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	f003 0307 	and.w	r3, r3, #7
 8002de6:	009b      	lsls	r3, r3, #2
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	69ba      	ldr	r2, [r7, #24]
 8002dee:	4313      	orrs	r3, r2
 8002df0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	08da      	lsrs	r2, r3, #3
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	3208      	adds	r2, #8
 8002dfa:	69b9      	ldr	r1, [r7, #24]
 8002dfc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	2203      	movs	r2, #3
 8002e0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e10:	43db      	mvns	r3, r3
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4013      	ands	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	685b      	ldr	r3, [r3, #4]
 8002e1c:	f003 0203 	and.w	r2, r3, #3
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	005b      	lsls	r3, r3, #1
 8002e24:	fa02 f303 	lsl.w	r3, r2, r3
 8002e28:	69ba      	ldr	r2, [r7, #24]
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	f000 80be 	beq.w	8002fbe <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e42:	4b66      	ldr	r3, [pc, #408]	@ (8002fdc <HAL_GPIO_Init+0x324>)
 8002e44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e46:	4a65      	ldr	r2, [pc, #404]	@ (8002fdc <HAL_GPIO_Init+0x324>)
 8002e48:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002e4c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002e4e:	4b63      	ldr	r3, [pc, #396]	@ (8002fdc <HAL_GPIO_Init+0x324>)
 8002e50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e52:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002e56:	60fb      	str	r3, [r7, #12]
 8002e58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8002e5a:	4a61      	ldr	r2, [pc, #388]	@ (8002fe0 <HAL_GPIO_Init+0x328>)
 8002e5c:	69fb      	ldr	r3, [r7, #28]
 8002e5e:	089b      	lsrs	r3, r3, #2
 8002e60:	3302      	adds	r3, #2
 8002e62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e66:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	f003 0303 	and.w	r3, r3, #3
 8002e6e:	009b      	lsls	r3, r3, #2
 8002e70:	220f      	movs	r2, #15
 8002e72:	fa02 f303 	lsl.w	r3, r2, r3
 8002e76:	43db      	mvns	r3, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4013      	ands	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	4a58      	ldr	r2, [pc, #352]	@ (8002fe4 <HAL_GPIO_Init+0x32c>)
 8002e82:	4293      	cmp	r3, r2
 8002e84:	d037      	beq.n	8002ef6 <HAL_GPIO_Init+0x23e>
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	4a57      	ldr	r2, [pc, #348]	@ (8002fe8 <HAL_GPIO_Init+0x330>)
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	d031      	beq.n	8002ef2 <HAL_GPIO_Init+0x23a>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a56      	ldr	r2, [pc, #344]	@ (8002fec <HAL_GPIO_Init+0x334>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d02b      	beq.n	8002eee <HAL_GPIO_Init+0x236>
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	4a55      	ldr	r2, [pc, #340]	@ (8002ff0 <HAL_GPIO_Init+0x338>)
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d025      	beq.n	8002eea <HAL_GPIO_Init+0x232>
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4a54      	ldr	r2, [pc, #336]	@ (8002ff4 <HAL_GPIO_Init+0x33c>)
 8002ea2:	4293      	cmp	r3, r2
 8002ea4:	d01f      	beq.n	8002ee6 <HAL_GPIO_Init+0x22e>
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	4a53      	ldr	r2, [pc, #332]	@ (8002ff8 <HAL_GPIO_Init+0x340>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d019      	beq.n	8002ee2 <HAL_GPIO_Init+0x22a>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	4a52      	ldr	r2, [pc, #328]	@ (8002ffc <HAL_GPIO_Init+0x344>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d013      	beq.n	8002ede <HAL_GPIO_Init+0x226>
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	4a51      	ldr	r2, [pc, #324]	@ (8003000 <HAL_GPIO_Init+0x348>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d00d      	beq.n	8002eda <HAL_GPIO_Init+0x222>
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	4a50      	ldr	r2, [pc, #320]	@ (8003004 <HAL_GPIO_Init+0x34c>)
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d007      	beq.n	8002ed6 <HAL_GPIO_Init+0x21e>
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	4a4f      	ldr	r2, [pc, #316]	@ (8003008 <HAL_GPIO_Init+0x350>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d101      	bne.n	8002ed2 <HAL_GPIO_Init+0x21a>
 8002ece:	2309      	movs	r3, #9
 8002ed0:	e012      	b.n	8002ef8 <HAL_GPIO_Init+0x240>
 8002ed2:	230a      	movs	r3, #10
 8002ed4:	e010      	b.n	8002ef8 <HAL_GPIO_Init+0x240>
 8002ed6:	2308      	movs	r3, #8
 8002ed8:	e00e      	b.n	8002ef8 <HAL_GPIO_Init+0x240>
 8002eda:	2307      	movs	r3, #7
 8002edc:	e00c      	b.n	8002ef8 <HAL_GPIO_Init+0x240>
 8002ede:	2306      	movs	r3, #6
 8002ee0:	e00a      	b.n	8002ef8 <HAL_GPIO_Init+0x240>
 8002ee2:	2305      	movs	r3, #5
 8002ee4:	e008      	b.n	8002ef8 <HAL_GPIO_Init+0x240>
 8002ee6:	2304      	movs	r3, #4
 8002ee8:	e006      	b.n	8002ef8 <HAL_GPIO_Init+0x240>
 8002eea:	2303      	movs	r3, #3
 8002eec:	e004      	b.n	8002ef8 <HAL_GPIO_Init+0x240>
 8002eee:	2302      	movs	r3, #2
 8002ef0:	e002      	b.n	8002ef8 <HAL_GPIO_Init+0x240>
 8002ef2:	2301      	movs	r3, #1
 8002ef4:	e000      	b.n	8002ef8 <HAL_GPIO_Init+0x240>
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	69fa      	ldr	r2, [r7, #28]
 8002efa:	f002 0203 	and.w	r2, r2, #3
 8002efe:	0092      	lsls	r2, r2, #2
 8002f00:	4093      	lsls	r3, r2
 8002f02:	69ba      	ldr	r2, [r7, #24]
 8002f04:	4313      	orrs	r3, r2
 8002f06:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002f08:	4935      	ldr	r1, [pc, #212]	@ (8002fe0 <HAL_GPIO_Init+0x328>)
 8002f0a:	69fb      	ldr	r3, [r7, #28]
 8002f0c:	089b      	lsrs	r3, r3, #2
 8002f0e:	3302      	adds	r3, #2
 8002f10:	69ba      	ldr	r2, [r7, #24]
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f16:	4b3d      	ldr	r3, [pc, #244]	@ (800300c <HAL_GPIO_Init+0x354>)
 8002f18:	689b      	ldr	r3, [r3, #8]
 8002f1a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f1c:	693b      	ldr	r3, [r7, #16]
 8002f1e:	43db      	mvns	r3, r3
 8002f20:	69ba      	ldr	r2, [r7, #24]
 8002f22:	4013      	ands	r3, r2
 8002f24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d003      	beq.n	8002f3a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002f32:	69ba      	ldr	r2, [r7, #24]
 8002f34:	693b      	ldr	r3, [r7, #16]
 8002f36:	4313      	orrs	r3, r2
 8002f38:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f3a:	4a34      	ldr	r2, [pc, #208]	@ (800300c <HAL_GPIO_Init+0x354>)
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f40:	4b32      	ldr	r3, [pc, #200]	@ (800300c <HAL_GPIO_Init+0x354>)
 8002f42:	68db      	ldr	r3, [r3, #12]
 8002f44:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f46:	693b      	ldr	r3, [r7, #16]
 8002f48:	43db      	mvns	r3, r3
 8002f4a:	69ba      	ldr	r2, [r7, #24]
 8002f4c:	4013      	ands	r3, r2
 8002f4e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002f50:	683b      	ldr	r3, [r7, #0]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d003      	beq.n	8002f64 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002f5c:	69ba      	ldr	r2, [r7, #24]
 8002f5e:	693b      	ldr	r3, [r7, #16]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002f64:	4a29      	ldr	r2, [pc, #164]	@ (800300c <HAL_GPIO_Init+0x354>)
 8002f66:	69bb      	ldr	r3, [r7, #24]
 8002f68:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f6a:	4b28      	ldr	r3, [pc, #160]	@ (800300c <HAL_GPIO_Init+0x354>)
 8002f6c:	685b      	ldr	r3, [r3, #4]
 8002f6e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	69ba      	ldr	r2, [r7, #24]
 8002f76:	4013      	ands	r3, r2
 8002f78:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d003      	beq.n	8002f8e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002f86:	69ba      	ldr	r2, [r7, #24]
 8002f88:	693b      	ldr	r3, [r7, #16]
 8002f8a:	4313      	orrs	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f8e:	4a1f      	ldr	r2, [pc, #124]	@ (800300c <HAL_GPIO_Init+0x354>)
 8002f90:	69bb      	ldr	r3, [r7, #24]
 8002f92:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f94:	4b1d      	ldr	r3, [pc, #116]	@ (800300c <HAL_GPIO_Init+0x354>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f9a:	693b      	ldr	r3, [r7, #16]
 8002f9c:	43db      	mvns	r3, r3
 8002f9e:	69ba      	ldr	r2, [r7, #24]
 8002fa0:	4013      	ands	r3, r2
 8002fa2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002fa4:	683b      	ldr	r3, [r7, #0]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d003      	beq.n	8002fb8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002fb8:	4a14      	ldr	r2, [pc, #80]	@ (800300c <HAL_GPIO_Init+0x354>)
 8002fba:	69bb      	ldr	r3, [r7, #24]
 8002fbc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	3301      	adds	r3, #1
 8002fc2:	61fb      	str	r3, [r7, #28]
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	2b0f      	cmp	r3, #15
 8002fc8:	f67f ae86 	bls.w	8002cd8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002fcc:	bf00      	nop
 8002fce:	bf00      	nop
 8002fd0:	3724      	adds	r7, #36	@ 0x24
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	40023800 	.word	0x40023800
 8002fe0:	40013800 	.word	0x40013800
 8002fe4:	40020000 	.word	0x40020000
 8002fe8:	40020400 	.word	0x40020400
 8002fec:	40020800 	.word	0x40020800
 8002ff0:	40020c00 	.word	0x40020c00
 8002ff4:	40021000 	.word	0x40021000
 8002ff8:	40021400 	.word	0x40021400
 8002ffc:	40021800 	.word	0x40021800
 8003000:	40021c00 	.word	0x40021c00
 8003004:	40022000 	.word	0x40022000
 8003008:	40022400 	.word	0x40022400
 800300c:	40013c00 	.word	0x40013c00

08003010 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003010:	b480      	push	{r7}
 8003012:	b083      	sub	sp, #12
 8003014:	af00      	add	r7, sp, #0
 8003016:	6078      	str	r0, [r7, #4]
 8003018:	460b      	mov	r3, r1
 800301a:	807b      	strh	r3, [r7, #2]
 800301c:	4613      	mov	r3, r2
 800301e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003020:	787b      	ldrb	r3, [r7, #1]
 8003022:	2b00      	cmp	r3, #0
 8003024:	d003      	beq.n	800302e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003026:	887a      	ldrh	r2, [r7, #2]
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800302c:	e003      	b.n	8003036 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800302e:	887b      	ldrh	r3, [r7, #2]
 8003030:	041a      	lsls	r2, r3, #16
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	619a      	str	r2, [r3, #24]
}
 8003036:	bf00      	nop
 8003038:	370c      	adds	r7, #12
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin Specifies the pins to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003042:	b480      	push	{r7}
 8003044:	b085      	sub	sp, #20
 8003046:	af00      	add	r7, sp, #0
 8003048:	6078      	str	r0, [r7, #4]
 800304a:	460b      	mov	r3, r1
 800304c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003054:	887a      	ldrh	r2, [r7, #2]
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	4013      	ands	r3, r2
 800305a:	041a      	lsls	r2, r3, #16
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	43d9      	mvns	r1, r3
 8003060:	887b      	ldrh	r3, [r7, #2]
 8003062:	400b      	ands	r3, r1
 8003064:	431a      	orrs	r2, r3
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	619a      	str	r2, [r3, #24]
}
 800306a:	bf00      	nop
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003074:	4770      	bx	lr

08003076 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b086      	sub	sp, #24
 800307a:	af02      	add	r7, sp, #8
 800307c:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d101      	bne.n	8003088 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e108      	b.n	800329a <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8003094:	b2db      	uxtb	r3, r3
 8003096:	2b00      	cmp	r3, #0
 8003098:	d106      	bne.n	80030a8 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2200      	movs	r2, #0
 800309e:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80030a2:	6878      	ldr	r0, [r7, #4]
 80030a4:	f7fe ffbc 	bl	8002020 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2203      	movs	r2, #3
 80030ac:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80030b6:	d102      	bne.n	80030be <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	2200      	movs	r2, #0
 80030bc:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4618      	mov	r0, r3
 80030c4:	f004 f996 	bl	80073f4 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	6818      	ldr	r0, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	7c1a      	ldrb	r2, [r3, #16]
 80030d0:	f88d 2000 	strb.w	r2, [sp]
 80030d4:	3304      	adds	r3, #4
 80030d6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80030d8:	f004 f932 	bl	8007340 <USB_CoreInit>
 80030dc:	4603      	mov	r3, r0
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d005      	beq.n	80030ee <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	2202      	movs	r2, #2
 80030e6:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
 80030ec:	e0d5      	b.n	800329a <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	2100      	movs	r1, #0
 80030f4:	4618      	mov	r0, r3
 80030f6:	f004 f98e 	bl	8007416 <USB_SetCurrentMode>
 80030fa:	4603      	mov	r3, r0
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d005      	beq.n	800310c <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e0c6      	b.n	800329a <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800310c:	2300      	movs	r3, #0
 800310e:	73fb      	strb	r3, [r7, #15]
 8003110:	e04a      	b.n	80031a8 <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8003112:	7bfa      	ldrb	r2, [r7, #15]
 8003114:	6879      	ldr	r1, [r7, #4]
 8003116:	4613      	mov	r3, r2
 8003118:	00db      	lsls	r3, r3, #3
 800311a:	4413      	add	r3, r2
 800311c:	009b      	lsls	r3, r3, #2
 800311e:	440b      	add	r3, r1
 8003120:	3315      	adds	r3, #21
 8003122:	2201      	movs	r2, #1
 8003124:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8003126:	7bfa      	ldrb	r2, [r7, #15]
 8003128:	6879      	ldr	r1, [r7, #4]
 800312a:	4613      	mov	r3, r2
 800312c:	00db      	lsls	r3, r3, #3
 800312e:	4413      	add	r3, r2
 8003130:	009b      	lsls	r3, r3, #2
 8003132:	440b      	add	r3, r1
 8003134:	3314      	adds	r3, #20
 8003136:	7bfa      	ldrb	r2, [r7, #15]
 8003138:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800313a:	7bfa      	ldrb	r2, [r7, #15]
 800313c:	7bfb      	ldrb	r3, [r7, #15]
 800313e:	b298      	uxth	r0, r3
 8003140:	6879      	ldr	r1, [r7, #4]
 8003142:	4613      	mov	r3, r2
 8003144:	00db      	lsls	r3, r3, #3
 8003146:	4413      	add	r3, r2
 8003148:	009b      	lsls	r3, r3, #2
 800314a:	440b      	add	r3, r1
 800314c:	332e      	adds	r3, #46	@ 0x2e
 800314e:	4602      	mov	r2, r0
 8003150:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8003152:	7bfa      	ldrb	r2, [r7, #15]
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	4613      	mov	r3, r2
 8003158:	00db      	lsls	r3, r3, #3
 800315a:	4413      	add	r3, r2
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	440b      	add	r3, r1
 8003160:	3318      	adds	r3, #24
 8003162:	2200      	movs	r2, #0
 8003164:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8003166:	7bfa      	ldrb	r2, [r7, #15]
 8003168:	6879      	ldr	r1, [r7, #4]
 800316a:	4613      	mov	r3, r2
 800316c:	00db      	lsls	r3, r3, #3
 800316e:	4413      	add	r3, r2
 8003170:	009b      	lsls	r3, r3, #2
 8003172:	440b      	add	r3, r1
 8003174:	331c      	adds	r3, #28
 8003176:	2200      	movs	r2, #0
 8003178:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800317a:	7bfa      	ldrb	r2, [r7, #15]
 800317c:	6879      	ldr	r1, [r7, #4]
 800317e:	4613      	mov	r3, r2
 8003180:	00db      	lsls	r3, r3, #3
 8003182:	4413      	add	r3, r2
 8003184:	009b      	lsls	r3, r3, #2
 8003186:	440b      	add	r3, r1
 8003188:	3320      	adds	r3, #32
 800318a:	2200      	movs	r2, #0
 800318c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800318e:	7bfa      	ldrb	r2, [r7, #15]
 8003190:	6879      	ldr	r1, [r7, #4]
 8003192:	4613      	mov	r3, r2
 8003194:	00db      	lsls	r3, r3, #3
 8003196:	4413      	add	r3, r2
 8003198:	009b      	lsls	r3, r3, #2
 800319a:	440b      	add	r3, r1
 800319c:	3324      	adds	r3, #36	@ 0x24
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031a2:	7bfb      	ldrb	r3, [r7, #15]
 80031a4:	3301      	adds	r3, #1
 80031a6:	73fb      	strb	r3, [r7, #15]
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	791b      	ldrb	r3, [r3, #4]
 80031ac:	7bfa      	ldrb	r2, [r7, #15]
 80031ae:	429a      	cmp	r2, r3
 80031b0:	d3af      	bcc.n	8003112 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80031b2:	2300      	movs	r3, #0
 80031b4:	73fb      	strb	r3, [r7, #15]
 80031b6:	e044      	b.n	8003242 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80031b8:	7bfa      	ldrb	r2, [r7, #15]
 80031ba:	6879      	ldr	r1, [r7, #4]
 80031bc:	4613      	mov	r3, r2
 80031be:	00db      	lsls	r3, r3, #3
 80031c0:	4413      	add	r3, r2
 80031c2:	009b      	lsls	r3, r3, #2
 80031c4:	440b      	add	r3, r1
 80031c6:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80031ca:	2200      	movs	r2, #0
 80031cc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80031ce:	7bfa      	ldrb	r2, [r7, #15]
 80031d0:	6879      	ldr	r1, [r7, #4]
 80031d2:	4613      	mov	r3, r2
 80031d4:	00db      	lsls	r3, r3, #3
 80031d6:	4413      	add	r3, r2
 80031d8:	009b      	lsls	r3, r3, #2
 80031da:	440b      	add	r3, r1
 80031dc:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80031e0:	7bfa      	ldrb	r2, [r7, #15]
 80031e2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80031e4:	7bfa      	ldrb	r2, [r7, #15]
 80031e6:	6879      	ldr	r1, [r7, #4]
 80031e8:	4613      	mov	r3, r2
 80031ea:	00db      	lsls	r3, r3, #3
 80031ec:	4413      	add	r3, r2
 80031ee:	009b      	lsls	r3, r3, #2
 80031f0:	440b      	add	r3, r1
 80031f2:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80031f6:	2200      	movs	r2, #0
 80031f8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80031fa:	7bfa      	ldrb	r2, [r7, #15]
 80031fc:	6879      	ldr	r1, [r7, #4]
 80031fe:	4613      	mov	r3, r2
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4413      	add	r3, r2
 8003204:	009b      	lsls	r3, r3, #2
 8003206:	440b      	add	r3, r1
 8003208:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8003210:	7bfa      	ldrb	r2, [r7, #15]
 8003212:	6879      	ldr	r1, [r7, #4]
 8003214:	4613      	mov	r3, r2
 8003216:	00db      	lsls	r3, r3, #3
 8003218:	4413      	add	r3, r2
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	440b      	add	r3, r1
 800321e:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8003222:	2200      	movs	r2, #0
 8003224:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8003226:	7bfa      	ldrb	r2, [r7, #15]
 8003228:	6879      	ldr	r1, [r7, #4]
 800322a:	4613      	mov	r3, r2
 800322c:	00db      	lsls	r3, r3, #3
 800322e:	4413      	add	r3, r2
 8003230:	009b      	lsls	r3, r3, #2
 8003232:	440b      	add	r3, r1
 8003234:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800323c:	7bfb      	ldrb	r3, [r7, #15]
 800323e:	3301      	adds	r3, #1
 8003240:	73fb      	strb	r3, [r7, #15]
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	791b      	ldrb	r3, [r3, #4]
 8003246:	7bfa      	ldrb	r2, [r7, #15]
 8003248:	429a      	cmp	r2, r3
 800324a:	d3b5      	bcc.n	80031b8 <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6818      	ldr	r0, [r3, #0]
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	7c1a      	ldrb	r2, [r3, #16]
 8003254:	f88d 2000 	strb.w	r2, [sp]
 8003258:	3304      	adds	r3, #4
 800325a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800325c:	f004 f928 	bl	80074b0 <USB_DevInit>
 8003260:	4603      	mov	r3, r0
 8003262:	2b00      	cmp	r3, #0
 8003264:	d005      	beq.n	8003272 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	2202      	movs	r2, #2
 800326a:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e013      	b.n	800329a <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2200      	movs	r2, #0
 8003276:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2201      	movs	r2, #1
 800327c:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	7b1b      	ldrb	r3, [r3, #12]
 8003284:	2b01      	cmp	r3, #1
 8003286:	d102      	bne.n	800328e <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8003288:	6878      	ldr	r0, [r7, #4]
 800328a:	f000 f80b 	bl	80032a4 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4618      	mov	r0, r3
 8003294:	f004 fae3 	bl	800785e <USB_DevDisconnect>

  return HAL_OK;
 8003298:	2300      	movs	r3, #0
}
 800329a:	4618      	mov	r0, r3
 800329c:	3710      	adds	r7, #16
 800329e:	46bd      	mov	sp, r7
 80032a0:	bd80      	pop	{r7, pc}
	...

080032a4 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80032a4:	b480      	push	{r7}
 80032a6:	b085      	sub	sp, #20
 80032a8:	af00      	add	r7, sp, #0
 80032aa:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	2201      	movs	r2, #1
 80032b6:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2200      	movs	r2, #0
 80032be:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80032d2:	4b05      	ldr	r3, [pc, #20]	@ (80032e8 <HAL_PCDEx_ActivateLPM+0x44>)
 80032d4:	4313      	orrs	r3, r2
 80032d6:	68fa      	ldr	r2, [r7, #12]
 80032d8:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80032da:	2300      	movs	r3, #0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e6:	4770      	bx	lr
 80032e8:	10000003 	.word	0x10000003

080032ec <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80032ec:	b480      	push	{r7}
 80032ee:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80032f0:	4b05      	ldr	r3, [pc, #20]	@ (8003308 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a04      	ldr	r2, [pc, #16]	@ (8003308 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80032f6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032fa:	6013      	str	r3, [r2, #0]
}
 80032fc:	bf00      	nop
 80032fe:	46bd      	mov	sp, r7
 8003300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	40007000 	.word	0x40007000

0800330c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800330c:	b580      	push	{r7, lr}
 800330e:	b082      	sub	sp, #8
 8003310:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8003312:	2300      	movs	r3, #0
 8003314:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003316:	4b23      	ldr	r3, [pc, #140]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003318:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800331a:	4a22      	ldr	r2, [pc, #136]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x98>)
 800331c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003320:	6413      	str	r3, [r2, #64]	@ 0x40
 8003322:	4b20      	ldr	r3, [pc, #128]	@ (80033a4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003326:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800332a:	603b      	str	r3, [r7, #0]
 800332c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800332e:	4b1e      	ldr	r3, [pc, #120]	@ (80033a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a1d      	ldr	r2, [pc, #116]	@ (80033a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003334:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003338:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800333a:	f7fe ff65 	bl	8002208 <HAL_GetTick>
 800333e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003340:	e009      	b.n	8003356 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003342:	f7fe ff61 	bl	8002208 <HAL_GetTick>
 8003346:	4602      	mov	r2, r0
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	1ad3      	subs	r3, r2, r3
 800334c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003350:	d901      	bls.n	8003356 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8003352:	2303      	movs	r3, #3
 8003354:	e022      	b.n	800339c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003356:	4b14      	ldr	r3, [pc, #80]	@ (80033a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800335e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003362:	d1ee      	bne.n	8003342 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003364:	4b10      	ldr	r3, [pc, #64]	@ (80033a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4a0f      	ldr	r2, [pc, #60]	@ (80033a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800336a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800336e:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003370:	f7fe ff4a 	bl	8002208 <HAL_GetTick>
 8003374:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003376:	e009      	b.n	800338c <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003378:	f7fe ff46 	bl	8002208 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003386:	d901      	bls.n	800338c <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	e007      	b.n	800339c <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800338c:	4b06      	ldr	r3, [pc, #24]	@ (80033a8 <HAL_PWREx_EnableOverDrive+0x9c>)
 800338e:	685b      	ldr	r3, [r3, #4]
 8003390:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003394:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003398:	d1ee      	bne.n	8003378 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3708      	adds	r7, #8
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40023800 	.word	0x40023800
 80033a8:	40007000 	.word	0x40007000

080033ac <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80033ac:	b580      	push	{r7, lr}
 80033ae:	b086      	sub	sp, #24
 80033b0:	af00      	add	r7, sp, #0
 80033b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80033b4:	2300      	movs	r3, #0
 80033b6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d101      	bne.n	80033c2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80033be:	2301      	movs	r3, #1
 80033c0:	e29b      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f003 0301 	and.w	r3, r3, #1
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	f000 8087 	beq.w	80034de <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80033d0:	4b96      	ldr	r3, [pc, #600]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 80033d2:	689b      	ldr	r3, [r3, #8]
 80033d4:	f003 030c 	and.w	r3, r3, #12
 80033d8:	2b04      	cmp	r3, #4
 80033da:	d00c      	beq.n	80033f6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80033dc:	4b93      	ldr	r3, [pc, #588]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	f003 030c 	and.w	r3, r3, #12
 80033e4:	2b08      	cmp	r3, #8
 80033e6:	d112      	bne.n	800340e <HAL_RCC_OscConfig+0x62>
 80033e8:	4b90      	ldr	r3, [pc, #576]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80033f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80033f4:	d10b      	bne.n	800340e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033f6:	4b8d      	ldr	r3, [pc, #564]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d06c      	beq.n	80034dc <HAL_RCC_OscConfig+0x130>
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	2b00      	cmp	r3, #0
 8003408:	d168      	bne.n	80034dc <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800340a:	2301      	movs	r3, #1
 800340c:	e275      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003416:	d106      	bne.n	8003426 <HAL_RCC_OscConfig+0x7a>
 8003418:	4b84      	ldr	r3, [pc, #528]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a83      	ldr	r2, [pc, #524]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 800341e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	e02e      	b.n	8003484 <HAL_RCC_OscConfig+0xd8>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	2b00      	cmp	r3, #0
 800342c:	d10c      	bne.n	8003448 <HAL_RCC_OscConfig+0x9c>
 800342e:	4b7f      	ldr	r3, [pc, #508]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	4a7e      	ldr	r2, [pc, #504]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003434:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003438:	6013      	str	r3, [r2, #0]
 800343a:	4b7c      	ldr	r3, [pc, #496]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	4a7b      	ldr	r2, [pc, #492]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003440:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003444:	6013      	str	r3, [r2, #0]
 8003446:	e01d      	b.n	8003484 <HAL_RCC_OscConfig+0xd8>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	685b      	ldr	r3, [r3, #4]
 800344c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003450:	d10c      	bne.n	800346c <HAL_RCC_OscConfig+0xc0>
 8003452:	4b76      	ldr	r3, [pc, #472]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a75      	ldr	r2, [pc, #468]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003458:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800345c:	6013      	str	r3, [r2, #0]
 800345e:	4b73      	ldr	r3, [pc, #460]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a72      	ldr	r2, [pc, #456]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003468:	6013      	str	r3, [r2, #0]
 800346a:	e00b      	b.n	8003484 <HAL_RCC_OscConfig+0xd8>
 800346c:	4b6f      	ldr	r3, [pc, #444]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	4a6e      	ldr	r2, [pc, #440]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003472:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003476:	6013      	str	r3, [r2, #0]
 8003478:	4b6c      	ldr	r3, [pc, #432]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	4a6b      	ldr	r2, [pc, #428]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 800347e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003482:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d013      	beq.n	80034b4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800348c:	f7fe febc 	bl	8002208 <HAL_GetTick>
 8003490:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003492:	e008      	b.n	80034a6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003494:	f7fe feb8 	bl	8002208 <HAL_GetTick>
 8003498:	4602      	mov	r2, r0
 800349a:	693b      	ldr	r3, [r7, #16]
 800349c:	1ad3      	subs	r3, r2, r3
 800349e:	2b64      	cmp	r3, #100	@ 0x64
 80034a0:	d901      	bls.n	80034a6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034a2:	2303      	movs	r3, #3
 80034a4:	e229      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b61      	ldr	r3, [pc, #388]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d0f0      	beq.n	8003494 <HAL_RCC_OscConfig+0xe8>
 80034b2:	e014      	b.n	80034de <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034b4:	f7fe fea8 	bl	8002208 <HAL_GetTick>
 80034b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ba:	e008      	b.n	80034ce <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034bc:	f7fe fea4 	bl	8002208 <HAL_GetTick>
 80034c0:	4602      	mov	r2, r0
 80034c2:	693b      	ldr	r3, [r7, #16]
 80034c4:	1ad3      	subs	r3, r2, r3
 80034c6:	2b64      	cmp	r3, #100	@ 0x64
 80034c8:	d901      	bls.n	80034ce <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80034ca:	2303      	movs	r3, #3
 80034cc:	e215      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034ce:	4b57      	ldr	r3, [pc, #348]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d1f0      	bne.n	80034bc <HAL_RCC_OscConfig+0x110>
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80034dc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	f003 0302 	and.w	r3, r3, #2
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d069      	beq.n	80035be <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80034ea:	4b50      	ldr	r3, [pc, #320]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 80034ec:	689b      	ldr	r3, [r3, #8]
 80034ee:	f003 030c 	and.w	r3, r3, #12
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d00b      	beq.n	800350e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80034f6:	4b4d      	ldr	r3, [pc, #308]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f003 030c 	and.w	r3, r3, #12
 80034fe:	2b08      	cmp	r3, #8
 8003500:	d11c      	bne.n	800353c <HAL_RCC_OscConfig+0x190>
 8003502:	4b4a      	ldr	r3, [pc, #296]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003504:	685b      	ldr	r3, [r3, #4]
 8003506:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d116      	bne.n	800353c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800350e:	4b47      	ldr	r3, [pc, #284]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d005      	beq.n	8003526 <HAL_RCC_OscConfig+0x17a>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	68db      	ldr	r3, [r3, #12]
 800351e:	2b01      	cmp	r3, #1
 8003520:	d001      	beq.n	8003526 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8003522:	2301      	movs	r3, #1
 8003524:	e1e9      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003526:	4b41      	ldr	r3, [pc, #260]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	691b      	ldr	r3, [r3, #16]
 8003532:	00db      	lsls	r3, r3, #3
 8003534:	493d      	ldr	r1, [pc, #244]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003536:	4313      	orrs	r3, r2
 8003538:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	e040      	b.n	80035be <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	68db      	ldr	r3, [r3, #12]
 8003540:	2b00      	cmp	r3, #0
 8003542:	d023      	beq.n	800358c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003544:	4b39      	ldr	r3, [pc, #228]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4a38      	ldr	r2, [pc, #224]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 800354a:	f043 0301 	orr.w	r3, r3, #1
 800354e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003550:	f7fe fe5a 	bl	8002208 <HAL_GetTick>
 8003554:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003556:	e008      	b.n	800356a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003558:	f7fe fe56 	bl	8002208 <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e1c7      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800356a:	4b30      	ldr	r3, [pc, #192]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003576:	4b2d      	ldr	r3, [pc, #180]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	691b      	ldr	r3, [r3, #16]
 8003582:	00db      	lsls	r3, r3, #3
 8003584:	4929      	ldr	r1, [pc, #164]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003586:	4313      	orrs	r3, r2
 8003588:	600b      	str	r3, [r1, #0]
 800358a:	e018      	b.n	80035be <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800358c:	4b27      	ldr	r3, [pc, #156]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	4a26      	ldr	r2, [pc, #152]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003598:	f7fe fe36 	bl	8002208 <HAL_GetTick>
 800359c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800359e:	e008      	b.n	80035b2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035a0:	f7fe fe32 	bl	8002208 <HAL_GetTick>
 80035a4:	4602      	mov	r2, r0
 80035a6:	693b      	ldr	r3, [r7, #16]
 80035a8:	1ad3      	subs	r3, r2, r3
 80035aa:	2b02      	cmp	r3, #2
 80035ac:	d901      	bls.n	80035b2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80035ae:	2303      	movs	r3, #3
 80035b0:	e1a3      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035b2:	4b1e      	ldr	r3, [pc, #120]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0302 	and.w	r3, r3, #2
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d1f0      	bne.n	80035a0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f003 0308 	and.w	r3, r3, #8
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d038      	beq.n	800363c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	695b      	ldr	r3, [r3, #20]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d019      	beq.n	8003606 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035d2:	4b16      	ldr	r3, [pc, #88]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 80035d4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035d6:	4a15      	ldr	r2, [pc, #84]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 80035d8:	f043 0301 	orr.w	r3, r3, #1
 80035dc:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035de:	f7fe fe13 	bl	8002208 <HAL_GetTick>
 80035e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035e4:	e008      	b.n	80035f8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e6:	f7fe fe0f 	bl	8002208 <HAL_GetTick>
 80035ea:	4602      	mov	r2, r0
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d901      	bls.n	80035f8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	e180      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035f8:	4b0c      	ldr	r3, [pc, #48]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 80035fa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b00      	cmp	r3, #0
 8003602:	d0f0      	beq.n	80035e6 <HAL_RCC_OscConfig+0x23a>
 8003604:	e01a      	b.n	800363c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003606:	4b09      	ldr	r3, [pc, #36]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 8003608:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800360a:	4a08      	ldr	r2, [pc, #32]	@ (800362c <HAL_RCC_OscConfig+0x280>)
 800360c:	f023 0301 	bic.w	r3, r3, #1
 8003610:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003612:	f7fe fdf9 	bl	8002208 <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003618:	e00a      	b.n	8003630 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800361a:	f7fe fdf5 	bl	8002208 <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d903      	bls.n	8003630 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e166      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
 800362c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003630:	4b92      	ldr	r3, [pc, #584]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 8003632:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003634:	f003 0302 	and.w	r3, r3, #2
 8003638:	2b00      	cmp	r3, #0
 800363a:	d1ee      	bne.n	800361a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f003 0304 	and.w	r3, r3, #4
 8003644:	2b00      	cmp	r3, #0
 8003646:	f000 80a4 	beq.w	8003792 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800364a:	4b8c      	ldr	r3, [pc, #560]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 800364c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800364e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003652:	2b00      	cmp	r3, #0
 8003654:	d10d      	bne.n	8003672 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8003656:	4b89      	ldr	r3, [pc, #548]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800365a:	4a88      	ldr	r2, [pc, #544]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 800365c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003660:	6413      	str	r3, [r2, #64]	@ 0x40
 8003662:	4b86      	ldr	r3, [pc, #536]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 8003664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800366a:	60bb      	str	r3, [r7, #8]
 800366c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800366e:	2301      	movs	r3, #1
 8003670:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003672:	4b83      	ldr	r3, [pc, #524]	@ (8003880 <HAL_RCC_OscConfig+0x4d4>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800367a:	2b00      	cmp	r3, #0
 800367c:	d118      	bne.n	80036b0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800367e:	4b80      	ldr	r3, [pc, #512]	@ (8003880 <HAL_RCC_OscConfig+0x4d4>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4a7f      	ldr	r2, [pc, #508]	@ (8003880 <HAL_RCC_OscConfig+0x4d4>)
 8003684:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003688:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800368a:	f7fe fdbd 	bl	8002208 <HAL_GetTick>
 800368e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003690:	e008      	b.n	80036a4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003692:	f7fe fdb9 	bl	8002208 <HAL_GetTick>
 8003696:	4602      	mov	r2, r0
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	1ad3      	subs	r3, r2, r3
 800369c:	2b64      	cmp	r3, #100	@ 0x64
 800369e:	d901      	bls.n	80036a4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80036a0:	2303      	movs	r3, #3
 80036a2:	e12a      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80036a4:	4b76      	ldr	r3, [pc, #472]	@ (8003880 <HAL_RCC_OscConfig+0x4d4>)
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d0f0      	beq.n	8003692 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	689b      	ldr	r3, [r3, #8]
 80036b4:	2b01      	cmp	r3, #1
 80036b6:	d106      	bne.n	80036c6 <HAL_RCC_OscConfig+0x31a>
 80036b8:	4b70      	ldr	r3, [pc, #448]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 80036ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036bc:	4a6f      	ldr	r2, [pc, #444]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 80036be:	f043 0301 	orr.w	r3, r3, #1
 80036c2:	6713      	str	r3, [r2, #112]	@ 0x70
 80036c4:	e02d      	b.n	8003722 <HAL_RCC_OscConfig+0x376>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d10c      	bne.n	80036e8 <HAL_RCC_OscConfig+0x33c>
 80036ce:	4b6b      	ldr	r3, [pc, #428]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 80036d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036d2:	4a6a      	ldr	r2, [pc, #424]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 80036d4:	f023 0301 	bic.w	r3, r3, #1
 80036d8:	6713      	str	r3, [r2, #112]	@ 0x70
 80036da:	4b68      	ldr	r3, [pc, #416]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 80036dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036de:	4a67      	ldr	r2, [pc, #412]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 80036e0:	f023 0304 	bic.w	r3, r3, #4
 80036e4:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e6:	e01c      	b.n	8003722 <HAL_RCC_OscConfig+0x376>
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	689b      	ldr	r3, [r3, #8]
 80036ec:	2b05      	cmp	r3, #5
 80036ee:	d10c      	bne.n	800370a <HAL_RCC_OscConfig+0x35e>
 80036f0:	4b62      	ldr	r3, [pc, #392]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 80036f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f4:	4a61      	ldr	r2, [pc, #388]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 80036f6:	f043 0304 	orr.w	r3, r3, #4
 80036fa:	6713      	str	r3, [r2, #112]	@ 0x70
 80036fc:	4b5f      	ldr	r3, [pc, #380]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 80036fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003700:	4a5e      	ldr	r2, [pc, #376]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6713      	str	r3, [r2, #112]	@ 0x70
 8003708:	e00b      	b.n	8003722 <HAL_RCC_OscConfig+0x376>
 800370a:	4b5c      	ldr	r3, [pc, #368]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800370e:	4a5b      	ldr	r2, [pc, #364]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 8003710:	f023 0301 	bic.w	r3, r3, #1
 8003714:	6713      	str	r3, [r2, #112]	@ 0x70
 8003716:	4b59      	ldr	r3, [pc, #356]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 8003718:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371a:	4a58      	ldr	r2, [pc, #352]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 800371c:	f023 0304 	bic.w	r3, r3, #4
 8003720:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	689b      	ldr	r3, [r3, #8]
 8003726:	2b00      	cmp	r3, #0
 8003728:	d015      	beq.n	8003756 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372a:	f7fe fd6d 	bl	8002208 <HAL_GetTick>
 800372e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003730:	e00a      	b.n	8003748 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003732:	f7fe fd69 	bl	8002208 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003740:	4293      	cmp	r3, r2
 8003742:	d901      	bls.n	8003748 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003744:	2303      	movs	r3, #3
 8003746:	e0d8      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003748:	4b4c      	ldr	r3, [pc, #304]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d0ee      	beq.n	8003732 <HAL_RCC_OscConfig+0x386>
 8003754:	e014      	b.n	8003780 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003756:	f7fe fd57 	bl	8002208 <HAL_GetTick>
 800375a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375c:	e00a      	b.n	8003774 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800375e:	f7fe fd53 	bl	8002208 <HAL_GetTick>
 8003762:	4602      	mov	r2, r0
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	1ad3      	subs	r3, r2, r3
 8003768:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376c:	4293      	cmp	r3, r2
 800376e:	d901      	bls.n	8003774 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003770:	2303      	movs	r3, #3
 8003772:	e0c2      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003774:	4b41      	ldr	r3, [pc, #260]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 8003776:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003778:	f003 0302 	and.w	r3, r3, #2
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1ee      	bne.n	800375e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003780:	7dfb      	ldrb	r3, [r7, #23]
 8003782:	2b01      	cmp	r3, #1
 8003784:	d105      	bne.n	8003792 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003786:	4b3d      	ldr	r3, [pc, #244]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 8003788:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378a:	4a3c      	ldr	r2, [pc, #240]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 800378c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003790:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	699b      	ldr	r3, [r3, #24]
 8003796:	2b00      	cmp	r3, #0
 8003798:	f000 80ae 	beq.w	80038f8 <HAL_RCC_OscConfig+0x54c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800379c:	4b37      	ldr	r3, [pc, #220]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	f003 030c 	and.w	r3, r3, #12
 80037a4:	2b08      	cmp	r3, #8
 80037a6:	d06d      	beq.n	8003884 <HAL_RCC_OscConfig+0x4d8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	699b      	ldr	r3, [r3, #24]
 80037ac:	2b02      	cmp	r3, #2
 80037ae:	d14b      	bne.n	8003848 <HAL_RCC_OscConfig+0x49c>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b0:	4b32      	ldr	r3, [pc, #200]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	4a31      	ldr	r2, [pc, #196]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 80037b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80037ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80037bc:	f7fe fd24 	bl	8002208 <HAL_GetTick>
 80037c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037c2:	e008      	b.n	80037d6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c4:	f7fe fd20 	bl	8002208 <HAL_GetTick>
 80037c8:	4602      	mov	r2, r0
 80037ca:	693b      	ldr	r3, [r7, #16]
 80037cc:	1ad3      	subs	r3, r2, r3
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d901      	bls.n	80037d6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80037d2:	2303      	movs	r3, #3
 80037d4:	e091      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d6:	4b29      	ldr	r3, [pc, #164]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d1f0      	bne.n	80037c4 <HAL_RCC_OscConfig+0x418>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined (RCC_PLLCFGR_PLLR)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	69da      	ldr	r2, [r3, #28]
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	6a1b      	ldr	r3, [r3, #32]
 80037ea:	431a      	orrs	r2, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037f0:	019b      	lsls	r3, r3, #6
 80037f2:	431a      	orrs	r2, r3
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f8:	085b      	lsrs	r3, r3, #1
 80037fa:	3b01      	subs	r3, #1
 80037fc:	041b      	lsls	r3, r3, #16
 80037fe:	431a      	orrs	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003804:	061b      	lsls	r3, r3, #24
 8003806:	431a      	orrs	r2, r3
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800380c:	071b      	lsls	r3, r3, #28
 800380e:	491b      	ldr	r1, [pc, #108]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 8003810:	4313      	orrs	r3, r2
 8003812:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003814:	4b19      	ldr	r3, [pc, #100]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a18      	ldr	r2, [pc, #96]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 800381a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800381e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003820:	f7fe fcf2 	bl	8002208 <HAL_GetTick>
 8003824:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003826:	e008      	b.n	800383a <HAL_RCC_OscConfig+0x48e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003828:	f7fe fcee 	bl	8002208 <HAL_GetTick>
 800382c:	4602      	mov	r2, r0
 800382e:	693b      	ldr	r3, [r7, #16]
 8003830:	1ad3      	subs	r3, r2, r3
 8003832:	2b02      	cmp	r3, #2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e05f      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b10      	ldr	r3, [pc, #64]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0f0      	beq.n	8003828 <HAL_RCC_OscConfig+0x47c>
 8003846:	e057      	b.n	80038f8 <HAL_RCC_OscConfig+0x54c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003848:	4b0c      	ldr	r3, [pc, #48]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	4a0b      	ldr	r2, [pc, #44]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 800384e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003852:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003854:	f7fe fcd8 	bl	8002208 <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800385a:	e008      	b.n	800386e <HAL_RCC_OscConfig+0x4c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800385c:	f7fe fcd4 	bl	8002208 <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	2b02      	cmp	r3, #2
 8003868:	d901      	bls.n	800386e <HAL_RCC_OscConfig+0x4c2>
          {
            return HAL_TIMEOUT;
 800386a:	2303      	movs	r3, #3
 800386c:	e045      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800386e:	4b03      	ldr	r3, [pc, #12]	@ (800387c <HAL_RCC_OscConfig+0x4d0>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003876:	2b00      	cmp	r3, #0
 8003878:	d1f0      	bne.n	800385c <HAL_RCC_OscConfig+0x4b0>
 800387a:	e03d      	b.n	80038f8 <HAL_RCC_OscConfig+0x54c>
 800387c:	40023800 	.word	0x40023800
 8003880:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003884:	4b1f      	ldr	r3, [pc, #124]	@ (8003904 <HAL_RCC_OscConfig+0x558>)
 8003886:	685b      	ldr	r3, [r3, #4]
 8003888:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	699b      	ldr	r3, [r3, #24]
 800388e:	2b01      	cmp	r3, #1
 8003890:	d030      	beq.n	80038f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800389c:	429a      	cmp	r2, r3
 800389e:	d129      	bne.n	80038f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038aa:	429a      	cmp	r2, r3
 80038ac:	d122      	bne.n	80038f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038ae:	68fa      	ldr	r2, [r7, #12]
 80038b0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038b4:	4013      	ands	r3, r2
 80038b6:	687a      	ldr	r2, [r7, #4]
 80038b8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038ba:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80038bc:	4293      	cmp	r3, r2
 80038be:	d119      	bne.n	80038f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038ca:	085b      	lsrs	r3, r3, #1
 80038cc:	3b01      	subs	r3, #1
 80038ce:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80038d0:	429a      	cmp	r2, r3
 80038d2:	d10f      	bne.n	80038f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038de:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d107      	bne.n	80038f4 <HAL_RCC_OscConfig+0x548>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ee:	071b      	lsls	r3, r3, #28
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d001      	beq.n	80038f8 <HAL_RCC_OscConfig+0x54c>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif
      {
        return HAL_ERROR;
 80038f4:	2301      	movs	r3, #1
 80038f6:	e000      	b.n	80038fa <HAL_RCC_OscConfig+0x54e>
      }
    }
  }
  return HAL_OK;
 80038f8:	2300      	movs	r3, #0
}
 80038fa:	4618      	mov	r0, r3
 80038fc:	3718      	adds	r7, #24
 80038fe:	46bd      	mov	sp, r7
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	40023800 	.word	0x40023800

08003908 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	b084      	sub	sp, #16
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8003912:	2300      	movs	r3, #0
 8003914:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d101      	bne.n	8003920 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e0d0      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003920:	4b6a      	ldr	r3, [pc, #424]	@ (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	f003 030f 	and.w	r3, r3, #15
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d910      	bls.n	8003950 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800392e:	4b67      	ldr	r3, [pc, #412]	@ (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f023 020f 	bic.w	r2, r3, #15
 8003936:	4965      	ldr	r1, [pc, #404]	@ (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003938:	683b      	ldr	r3, [r7, #0]
 800393a:	4313      	orrs	r3, r2
 800393c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800393e:	4b63      	ldr	r3, [pc, #396]	@ (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	683a      	ldr	r2, [r7, #0]
 8003948:	429a      	cmp	r2, r3
 800394a:	d001      	beq.n	8003950 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	e0b8      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0302 	and.w	r3, r3, #2
 8003958:	2b00      	cmp	r3, #0
 800395a:	d020      	beq.n	800399e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0304 	and.w	r3, r3, #4
 8003964:	2b00      	cmp	r3, #0
 8003966:	d005      	beq.n	8003974 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003968:	4b59      	ldr	r3, [pc, #356]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	4a58      	ldr	r2, [pc, #352]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 800396e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003972:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	f003 0308 	and.w	r3, r3, #8
 800397c:	2b00      	cmp	r3, #0
 800397e:	d005      	beq.n	800398c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003980:	4b53      	ldr	r3, [pc, #332]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003982:	689b      	ldr	r3, [r3, #8]
 8003984:	4a52      	ldr	r2, [pc, #328]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003986:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800398a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800398c:	4b50      	ldr	r3, [pc, #320]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	494d      	ldr	r1, [pc, #308]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 800399a:	4313      	orrs	r3, r2
 800399c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f003 0301 	and.w	r3, r3, #1
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d040      	beq.n	8003a2c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	685b      	ldr	r3, [r3, #4]
 80039ae:	2b01      	cmp	r3, #1
 80039b0:	d107      	bne.n	80039c2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039b2:	4b47      	ldr	r3, [pc, #284]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d115      	bne.n	80039ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039be:	2301      	movs	r3, #1
 80039c0:	e07f      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	2b02      	cmp	r3, #2
 80039c8:	d107      	bne.n	80039da <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ca:	4b41      	ldr	r3, [pc, #260]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d109      	bne.n	80039ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e073      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039da:	4b3d      	ldr	r3, [pc, #244]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0302 	and.w	r3, r3, #2
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d101      	bne.n	80039ea <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80039e6:	2301      	movs	r3, #1
 80039e8:	e06b      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ea:	4b39      	ldr	r3, [pc, #228]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80039ec:	689b      	ldr	r3, [r3, #8]
 80039ee:	f023 0203 	bic.w	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	685b      	ldr	r3, [r3, #4]
 80039f6:	4936      	ldr	r1, [pc, #216]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 80039f8:	4313      	orrs	r3, r2
 80039fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039fc:	f7fe fc04 	bl	8002208 <HAL_GetTick>
 8003a00:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a02:	e00a      	b.n	8003a1a <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a04:	f7fe fc00 	bl	8002208 <HAL_GetTick>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	1ad3      	subs	r3, r2, r3
 8003a0e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d901      	bls.n	8003a1a <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8003a16:	2303      	movs	r3, #3
 8003a18:	e053      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a1a:	4b2d      	ldr	r3, [pc, #180]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a1c:	689b      	ldr	r3, [r3, #8]
 8003a1e:	f003 020c 	and.w	r2, r3, #12
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	009b      	lsls	r3, r3, #2
 8003a28:	429a      	cmp	r2, r3
 8003a2a:	d1eb      	bne.n	8003a04 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a2c:	4b27      	ldr	r3, [pc, #156]	@ (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f003 030f 	and.w	r3, r3, #15
 8003a34:	683a      	ldr	r2, [r7, #0]
 8003a36:	429a      	cmp	r2, r3
 8003a38:	d210      	bcs.n	8003a5c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a3a:	4b24      	ldr	r3, [pc, #144]	@ (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	f023 020f 	bic.w	r2, r3, #15
 8003a42:	4922      	ldr	r1, [pc, #136]	@ (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	4313      	orrs	r3, r2
 8003a48:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a4a:	4b20      	ldr	r3, [pc, #128]	@ (8003acc <HAL_RCC_ClockConfig+0x1c4>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	f003 030f 	and.w	r3, r3, #15
 8003a52:	683a      	ldr	r2, [r7, #0]
 8003a54:	429a      	cmp	r2, r3
 8003a56:	d001      	beq.n	8003a5c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e032      	b.n	8003ac2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 0304 	and.w	r3, r3, #4
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d008      	beq.n	8003a7a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a68:	4b19      	ldr	r3, [pc, #100]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	4916      	ldr	r1, [pc, #88]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a76:	4313      	orrs	r3, r2
 8003a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 0308 	and.w	r3, r3, #8
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d009      	beq.n	8003a9a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003a86:	4b12      	ldr	r3, [pc, #72]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a88:	689b      	ldr	r3, [r3, #8]
 8003a8a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	691b      	ldr	r3, [r3, #16]
 8003a92:	00db      	lsls	r3, r3, #3
 8003a94:	490e      	ldr	r1, [pc, #56]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003a96:	4313      	orrs	r3, r2
 8003a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a9a:	f000 f821 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 8003a9e:	4602      	mov	r2, r0
 8003aa0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ad0 <HAL_RCC_ClockConfig+0x1c8>)
 8003aa2:	689b      	ldr	r3, [r3, #8]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	490a      	ldr	r1, [pc, #40]	@ (8003ad4 <HAL_RCC_ClockConfig+0x1cc>)
 8003aac:	5ccb      	ldrb	r3, [r1, r3]
 8003aae:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab2:	4a09      	ldr	r2, [pc, #36]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1d0>)
 8003ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003ab6:	4b09      	ldr	r3, [pc, #36]	@ (8003adc <HAL_RCC_ClockConfig+0x1d4>)
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	4618      	mov	r0, r3
 8003abc:	f7fe fb60 	bl	8002180 <HAL_InitTick>

  return HAL_OK;
 8003ac0:	2300      	movs	r3, #0
}
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	3710      	adds	r7, #16
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bd80      	pop	{r7, pc}
 8003aca:	bf00      	nop
 8003acc:	40023c00 	.word	0x40023c00
 8003ad0:	40023800 	.word	0x40023800
 8003ad4:	08008790 	.word	0x08008790
 8003ad8:	20000000 	.word	0x20000000
 8003adc:	20000004 	.word	0x20000004

08003ae0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003ae0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ae4:	b094      	sub	sp, #80	@ 0x50
 8003ae6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8003ae8:	2300      	movs	r3, #0
 8003aea:	647b      	str	r3, [r7, #68]	@ 0x44
 8003aec:	2300      	movs	r3, #0
 8003aee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003af0:	2300      	movs	r3, #0
 8003af2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0;
 8003af4:	2300      	movs	r3, #0
 8003af6:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003af8:	4b79      	ldr	r3, [pc, #484]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003afa:	689b      	ldr	r3, [r3, #8]
 8003afc:	f003 030c 	and.w	r3, r3, #12
 8003b00:	2b08      	cmp	r3, #8
 8003b02:	d00d      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x40>
 8003b04:	2b08      	cmp	r3, #8
 8003b06:	f200 80e1 	bhi.w	8003ccc <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d002      	beq.n	8003b14 <HAL_RCC_GetSysClockFreq+0x34>
 8003b0e:	2b04      	cmp	r3, #4
 8003b10:	d003      	beq.n	8003b1a <HAL_RCC_GetSysClockFreq+0x3a>
 8003b12:	e0db      	b.n	8003ccc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b14:	4b73      	ldr	r3, [pc, #460]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b16:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b18:	e0db      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b1a:	4b73      	ldr	r3, [pc, #460]	@ (8003ce8 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b1c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b1e:	e0d8      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b20:	4b6f      	ldr	r3, [pc, #444]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b22:	685b      	ldr	r3, [r3, #4]
 8003b24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b28:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8003b2a:	4b6d      	ldr	r3, [pc, #436]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d063      	beq.n	8003bfe <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b36:	4b6a      	ldr	r3, [pc, #424]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	099b      	lsrs	r3, r3, #6
 8003b3c:	2200      	movs	r2, #0
 8003b3e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b40:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b44:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b48:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b4a:	2300      	movs	r3, #0
 8003b4c:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b4e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b52:	4622      	mov	r2, r4
 8003b54:	462b      	mov	r3, r5
 8003b56:	f04f 0000 	mov.w	r0, #0
 8003b5a:	f04f 0100 	mov.w	r1, #0
 8003b5e:	0159      	lsls	r1, r3, #5
 8003b60:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b64:	0150      	lsls	r0, r2, #5
 8003b66:	4602      	mov	r2, r0
 8003b68:	460b      	mov	r3, r1
 8003b6a:	4621      	mov	r1, r4
 8003b6c:	1a51      	subs	r1, r2, r1
 8003b6e:	6139      	str	r1, [r7, #16]
 8003b70:	4629      	mov	r1, r5
 8003b72:	eb63 0301 	sbc.w	r3, r3, r1
 8003b76:	617b      	str	r3, [r7, #20]
 8003b78:	f04f 0200 	mov.w	r2, #0
 8003b7c:	f04f 0300 	mov.w	r3, #0
 8003b80:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b84:	4659      	mov	r1, fp
 8003b86:	018b      	lsls	r3, r1, #6
 8003b88:	4651      	mov	r1, sl
 8003b8a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b8e:	4651      	mov	r1, sl
 8003b90:	018a      	lsls	r2, r1, #6
 8003b92:	4651      	mov	r1, sl
 8003b94:	ebb2 0801 	subs.w	r8, r2, r1
 8003b98:	4659      	mov	r1, fp
 8003b9a:	eb63 0901 	sbc.w	r9, r3, r1
 8003b9e:	f04f 0200 	mov.w	r2, #0
 8003ba2:	f04f 0300 	mov.w	r3, #0
 8003ba6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003baa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bae:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bb2:	4690      	mov	r8, r2
 8003bb4:	4699      	mov	r9, r3
 8003bb6:	4623      	mov	r3, r4
 8003bb8:	eb18 0303 	adds.w	r3, r8, r3
 8003bbc:	60bb      	str	r3, [r7, #8]
 8003bbe:	462b      	mov	r3, r5
 8003bc0:	eb49 0303 	adc.w	r3, r9, r3
 8003bc4:	60fb      	str	r3, [r7, #12]
 8003bc6:	f04f 0200 	mov.w	r2, #0
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bd2:	4629      	mov	r1, r5
 8003bd4:	024b      	lsls	r3, r1, #9
 8003bd6:	4621      	mov	r1, r4
 8003bd8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bdc:	4621      	mov	r1, r4
 8003bde:	024a      	lsls	r2, r1, #9
 8003be0:	4610      	mov	r0, r2
 8003be2:	4619      	mov	r1, r3
 8003be4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003be6:	2200      	movs	r2, #0
 8003be8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bec:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bf0:	f7fc fb34 	bl	800025c <__aeabi_uldivmod>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4613      	mov	r3, r2
 8003bfa:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bfc:	e058      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bfe:	4b38      	ldr	r3, [pc, #224]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003c00:	685b      	ldr	r3, [r3, #4]
 8003c02:	099b      	lsrs	r3, r3, #6
 8003c04:	2200      	movs	r2, #0
 8003c06:	4618      	mov	r0, r3
 8003c08:	4611      	mov	r1, r2
 8003c0a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c0e:	623b      	str	r3, [r7, #32]
 8003c10:	2300      	movs	r3, #0
 8003c12:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c14:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c18:	4642      	mov	r2, r8
 8003c1a:	464b      	mov	r3, r9
 8003c1c:	f04f 0000 	mov.w	r0, #0
 8003c20:	f04f 0100 	mov.w	r1, #0
 8003c24:	0159      	lsls	r1, r3, #5
 8003c26:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c2a:	0150      	lsls	r0, r2, #5
 8003c2c:	4602      	mov	r2, r0
 8003c2e:	460b      	mov	r3, r1
 8003c30:	4641      	mov	r1, r8
 8003c32:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c36:	4649      	mov	r1, r9
 8003c38:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c3c:	f04f 0200 	mov.w	r2, #0
 8003c40:	f04f 0300 	mov.w	r3, #0
 8003c44:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c48:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c4c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c50:	ebb2 040a 	subs.w	r4, r2, sl
 8003c54:	eb63 050b 	sbc.w	r5, r3, fp
 8003c58:	f04f 0200 	mov.w	r2, #0
 8003c5c:	f04f 0300 	mov.w	r3, #0
 8003c60:	00eb      	lsls	r3, r5, #3
 8003c62:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c66:	00e2      	lsls	r2, r4, #3
 8003c68:	4614      	mov	r4, r2
 8003c6a:	461d      	mov	r5, r3
 8003c6c:	4643      	mov	r3, r8
 8003c6e:	18e3      	adds	r3, r4, r3
 8003c70:	603b      	str	r3, [r7, #0]
 8003c72:	464b      	mov	r3, r9
 8003c74:	eb45 0303 	adc.w	r3, r5, r3
 8003c78:	607b      	str	r3, [r7, #4]
 8003c7a:	f04f 0200 	mov.w	r2, #0
 8003c7e:	f04f 0300 	mov.w	r3, #0
 8003c82:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c86:	4629      	mov	r1, r5
 8003c88:	028b      	lsls	r3, r1, #10
 8003c8a:	4621      	mov	r1, r4
 8003c8c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c90:	4621      	mov	r1, r4
 8003c92:	028a      	lsls	r2, r1, #10
 8003c94:	4610      	mov	r0, r2
 8003c96:	4619      	mov	r1, r3
 8003c98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c9a:	2200      	movs	r2, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	61fa      	str	r2, [r7, #28]
 8003ca0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ca4:	f7fc fada 	bl	800025c <__aeabi_uldivmod>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4613      	mov	r3, r2
 8003cae:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	@ (8003ce0 <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb2:	685b      	ldr	r3, [r3, #4]
 8003cb4:	0c1b      	lsrs	r3, r3, #16
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	3301      	adds	r3, #1
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003cc0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cc2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cca:	e002      	b.n	8003cd2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ccc:	4b05      	ldr	r3, [pc, #20]	@ (8003ce4 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cd0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cd2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003cd4:	4618      	mov	r0, r3
 8003cd6:	3750      	adds	r7, #80	@ 0x50
 8003cd8:	46bd      	mov	sp, r7
 8003cda:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cde:	bf00      	nop
 8003ce0:	40023800 	.word	0x40023800
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	007a1200 	.word	0x007a1200

08003cec <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	@ (8003d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000000 	.word	0x20000000

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d08:	f7ff fff0 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b05      	ldr	r3, [pc, #20]	@ (8003d24 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	0a9b      	lsrs	r3, r3, #10
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4903      	ldr	r1, [pc, #12]	@ (8003d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	bd80      	pop	{r7, pc}
 8003d24:	40023800 	.word	0x40023800
 8003d28:	080087a0 	.word	0x080087a0

08003d2c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d2c:	b580      	push	{r7, lr}
 8003d2e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d30:	f7ff ffdc 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d34:	4602      	mov	r2, r0
 8003d36:	4b05      	ldr	r3, [pc, #20]	@ (8003d4c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d38:	689b      	ldr	r3, [r3, #8]
 8003d3a:	0b5b      	lsrs	r3, r3, #13
 8003d3c:	f003 0307 	and.w	r3, r3, #7
 8003d40:	4903      	ldr	r1, [pc, #12]	@ (8003d50 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d42:	5ccb      	ldrb	r3, [r1, r3]
 8003d44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	bd80      	pop	{r7, pc}
 8003d4c:	40023800 	.word	0x40023800
 8003d50:	080087a0 	.word	0x080087a0

08003d54 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003d54:	b580      	push	{r7, lr}
 8003d56:	b088      	sub	sp, #32
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003d60:	2300      	movs	r3, #0
 8003d62:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003d64:	2300      	movs	r3, #0
 8003d66:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8003d68:	2300      	movs	r3, #0
 8003d6a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f003 0301 	and.w	r3, r3, #1
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d012      	beq.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003d7c:	4b69      	ldr	r3, [pc, #420]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	4a68      	ldr	r2, [pc, #416]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d82:	f423 0300 	bic.w	r3, r3, #8388608	@ 0x800000
 8003d86:	6093      	str	r3, [r2, #8]
 8003d88:	4b66      	ldr	r3, [pc, #408]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d8a:	689a      	ldr	r2, [r3, #8]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d90:	4964      	ldr	r1, [pc, #400]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003d92:	4313      	orrs	r3, r2
 8003d94:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d101      	bne.n	8003da2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003d9e:	2301      	movs	r3, #1
 8003da0:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d017      	beq.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003dae:	4b5d      	ldr	r3, [pc, #372]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003db0:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003db4:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dbc:	4959      	ldr	r1, [pc, #356]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dbe:	4313      	orrs	r3, r2
 8003dc0:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dc8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8003dcc:	d101      	bne.n	8003dd2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d101      	bne.n	8003dde <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8003dda:	2301      	movs	r3, #1
 8003ddc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003de6:	2b00      	cmp	r3, #0
 8003de8:	d017      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003dea:	4b4e      	ldr	r3, [pc, #312]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003df0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df8:	494a      	ldr	r1, [pc, #296]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003dfa:	4313      	orrs	r3, r2
 8003dfc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e04:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003e08:	d101      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d101      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8003e16:	2301      	movs	r3, #1
 8003e18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d001      	beq.n	8003e2a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8003e26:	2301      	movs	r3, #1
 8003e28:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 0320 	and.w	r3, r3, #32
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	f000 808b 	beq.w	8003f4e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003e38:	4b3a      	ldr	r3, [pc, #232]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e3c:	4a39      	ldr	r2, [pc, #228]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e3e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003e42:	6413      	str	r3, [r2, #64]	@ 0x40
 8003e44:	4b37      	ldr	r3, [pc, #220]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e48:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003e4c:	60bb      	str	r3, [r7, #8]
 8003e4e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003e50:	4b35      	ldr	r3, [pc, #212]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	4a34      	ldr	r2, [pc, #208]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e56:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003e5a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003e5c:	f7fe f9d4 	bl	8002208 <HAL_GetTick>
 8003e60:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e62:	e008      	b.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e64:	f7fe f9d0 	bl	8002208 <HAL_GetTick>
 8003e68:	4602      	mov	r2, r0
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	1ad3      	subs	r3, r2, r3
 8003e6e:	2b64      	cmp	r3, #100	@ 0x64
 8003e70:	d901      	bls.n	8003e76 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e38f      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003e76:	4b2c      	ldr	r3, [pc, #176]	@ (8003f28 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d0f0      	beq.n	8003e64 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003e82:	4b28      	ldr	r3, [pc, #160]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003e84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e8a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003e8c:	693b      	ldr	r3, [r7, #16]
 8003e8e:	2b00      	cmp	r3, #0
 8003e90:	d035      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003e96:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e9a:	693a      	ldr	r2, [r7, #16]
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d02e      	beq.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003ea0:	4b20      	ldr	r3, [pc, #128]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ea2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ea4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ea8:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003eaa:	4b1e      	ldr	r3, [pc, #120]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eae:	4a1d      	ldr	r2, [pc, #116]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003eb4:	6713      	str	r3, [r2, #112]	@ 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003eb6:	4b1b      	ldr	r3, [pc, #108]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003eba:	4a1a      	ldr	r2, [pc, #104]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ebc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003ec0:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003ec2:	4a18      	ldr	r2, [pc, #96]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003ec8:	4b16      	ldr	r3, [pc, #88]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003eca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ecc:	f003 0301 	and.w	r3, r3, #1
 8003ed0:	2b01      	cmp	r3, #1
 8003ed2:	d114      	bne.n	8003efe <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fe f998 	bl	8002208 <HAL_GetTick>
 8003ed8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003eda:	e00a      	b.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003edc:	f7fe f994 	bl	8002208 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	697b      	ldr	r3, [r7, #20]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e351      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x842>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ef2:	4b0c      	ldr	r3, [pc, #48]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003ef4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ef6:	f003 0302 	and.w	r3, r3, #2
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d0ee      	beq.n	8003edc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f02:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f06:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003f0a:	d111      	bne.n	8003f30 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003f0c:	4b05      	ldr	r3, [pc, #20]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f0e:	689b      	ldr	r3, [r3, #8]
 8003f10:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8003f18:	4b04      	ldr	r3, [pc, #16]	@ (8003f2c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8003f1a:	400b      	ands	r3, r1
 8003f1c:	4901      	ldr	r1, [pc, #4]	@ (8003f24 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	608b      	str	r3, [r1, #8]
 8003f22:	e00b      	b.n	8003f3c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003f24:	40023800 	.word	0x40023800
 8003f28:	40007000 	.word	0x40007000
 8003f2c:	0ffffcff 	.word	0x0ffffcff
 8003f30:	4bac      	ldr	r3, [pc, #688]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4aab      	ldr	r2, [pc, #684]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f36:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8003f3a:	6093      	str	r3, [r2, #8]
 8003f3c:	4ba9      	ldr	r3, [pc, #676]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f3e:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003f48:	49a6      	ldr	r1, [pc, #664]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	670b      	str	r3, [r1, #112]	@ 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0310 	and.w	r3, r3, #16
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d010      	beq.n	8003f7c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8003f5a:	4ba2      	ldr	r3, [pc, #648]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f5c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003f60:	4aa0      	ldr	r2, [pc, #640]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f62:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8003f66:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
 8003f6a:	4b9e      	ldr	r3, [pc, #632]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f6c:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003f74:	499b      	ldr	r1, [pc, #620]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f76:	4313      	orrs	r3, r2
 8003f78:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d00a      	beq.n	8003f9e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003f88:	4b96      	ldr	r3, [pc, #600]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003f8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003f96:	4993      	ldr	r1, [pc, #588]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003f98:	4313      	orrs	r3, r2
 8003f9a:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d00a      	beq.n	8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003faa:	4b8e      	ldr	r3, [pc, #568]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fac:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fb0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003fb8:	498a      	ldr	r1, [pc, #552]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00a      	beq.n	8003fe2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003fcc:	4b85      	ldr	r3, [pc, #532]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fce:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003fd2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003fda:	4982      	ldr	r1, [pc, #520]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003fdc:	4313      	orrs	r3, r2
 8003fde:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d00a      	beq.n	8004004 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003fee:	4b7d      	ldr	r3, [pc, #500]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ff0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003ff4:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003ffc:	4979      	ldr	r1, [pc, #484]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8003ffe:	4313      	orrs	r3, r2
 8004000:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00a      	beq.n	8004026 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004010:	4b74      	ldr	r3, [pc, #464]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004012:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004016:	f023 0203 	bic.w	r2, r3, #3
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800401e:	4971      	ldr	r1, [pc, #452]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004020:	4313      	orrs	r3, r2
 8004022:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800402e:	2b00      	cmp	r3, #0
 8004030:	d00a      	beq.n	8004048 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004032:	4b6c      	ldr	r3, [pc, #432]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004034:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004038:	f023 020c 	bic.w	r2, r3, #12
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004040:	4968      	ldr	r1, [pc, #416]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004042:	4313      	orrs	r3, r2
 8004044:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d00a      	beq.n	800406a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004054:	4b63      	ldr	r3, [pc, #396]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004056:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800405a:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004062:	4960      	ldr	r1, [pc, #384]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004064:	4313      	orrs	r3, r2
 8004066:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004076:	4b5b      	ldr	r3, [pc, #364]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004078:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800407c:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004084:	4957      	ldr	r1, [pc, #348]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004086:	4313      	orrs	r3, r2
 8004088:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004094:	2b00      	cmp	r3, #0
 8004096:	d00a      	beq.n	80040ae <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004098:	4b52      	ldr	r3, [pc, #328]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800409a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409e:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040a6:	494f      	ldr	r1, [pc, #316]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040a8:	4313      	orrs	r3, r2
 80040aa:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d00a      	beq.n	80040d0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 80040ba:	4b4a      	ldr	r3, [pc, #296]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040c8:	4946      	ldr	r1, [pc, #280]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ca:	4313      	orrs	r3, r2
 80040cc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d00a      	beq.n	80040f2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80040dc:	4b41      	ldr	r3, [pc, #260]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e2:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ea:	493e      	ldr	r1, [pc, #248]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80040ec:	4313      	orrs	r3, r2
 80040ee:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80040fa:	2b00      	cmp	r3, #0
 80040fc:	d00a      	beq.n	8004114 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80040fe:	4b39      	ldr	r3, [pc, #228]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004100:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004104:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800410c:	4935      	ldr	r1, [pc, #212]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 800410e:	4313      	orrs	r3, r2
 8004110:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800411c:	2b00      	cmp	r3, #0
 800411e:	d00a      	beq.n	8004136 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8004120:	4b30      	ldr	r3, [pc, #192]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004122:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004126:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800412e:	492d      	ldr	r1, [pc, #180]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004130:	4313      	orrs	r3, r2
 8004132:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800413e:	2b00      	cmp	r3, #0
 8004140:	d011      	beq.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8004142:	4b28      	ldr	r3, [pc, #160]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004144:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004148:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004150:	4924      	ldr	r1, [pc, #144]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004152:	4313      	orrs	r3, r2
 8004154:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800415c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004160:	d101      	bne.n	8004166 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8004162:	2301      	movs	r3, #1
 8004164:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0308 	and.w	r3, r3, #8
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8004172:	2301      	movs	r3, #1
 8004174:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d00a      	beq.n	8004198 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004182:	4b18      	ldr	r3, [pc, #96]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004184:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004188:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004190:	4914      	ldr	r1, [pc, #80]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 8004192:	4313      	orrs	r3, r2
 8004194:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00b      	beq.n	80041bc <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80041a4:	4b0f      	ldr	r3, [pc, #60]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041a6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041aa:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80041b4:	490b      	ldr	r1, [pc, #44]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041b6:	4313      	orrs	r3, r2
 80041b8:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
  }

#if defined (STM32F765xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx)
  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d00f      	beq.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80041c8:	4b06      	ldr	r3, [pc, #24]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80041ce:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80041d8:	4902      	ldr	r1, [pc, #8]	@ (80041e4 <HAL_RCCEx_PeriphCLKConfig+0x490>)
 80041da:	4313      	orrs	r3, r2
 80041dc:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 80041e0:	e002      	b.n	80041e8 <HAL_RCCEx_PeriphCLKConfig+0x494>
 80041e2:	bf00      	nop
 80041e4:	40023800 	.word	0x40023800
  }

  /*------------------------------------- DFSDM1 Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00b      	beq.n	800420c <HAL_RCCEx_PeriphCLKConfig+0x4b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80041f4:	4b8a      	ldr	r3, [pc, #552]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80041f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80041fa:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004204:	4986      	ldr	r1, [pc, #536]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004206:	4313      	orrs	r3, r2
 8004208:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }

  /*------------------------------------- DFSDM AUDIO Configuration -------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1_AUDIO) == RCC_PERIPHCLK_DFSDM1_AUDIO)
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004214:	2b00      	cmp	r3, #0
 8004216:	d00b      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x4dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM interface clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 8004218:	4b81      	ldr	r3, [pc, #516]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800421a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800421e:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004228:	497d      	ldr	r1, [pc, #500]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800422a:	4313      	orrs	r3, r2
 800422c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8004230:	69fb      	ldr	r3, [r7, #28]
 8004232:	2b01      	cmp	r3, #1
 8004234:	d006      	beq.n	8004244 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800423e:	2b00      	cmp	r3, #0
 8004240:	f000 80d6 	beq.w	80043f0 <HAL_RCCEx_PeriphCLKConfig+0x69c>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8004244:	4b76      	ldr	r3, [pc, #472]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	4a75      	ldr	r2, [pc, #468]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800424a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800424e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004250:	f7fd ffda 	bl	8002208 <HAL_GetTick>
 8004254:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8004256:	e008      	b.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x516>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8004258:	f7fd ffd6 	bl	8002208 <HAL_GetTick>
 800425c:	4602      	mov	r2, r0
 800425e:	697b      	ldr	r3, [r7, #20]
 8004260:	1ad3      	subs	r3, r2, r3
 8004262:	2b64      	cmp	r3, #100	@ 0x64
 8004264:	d901      	bls.n	800426a <HAL_RCCEx_PeriphCLKConfig+0x516>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004266:	2303      	movs	r3, #3
 8004268:	e195      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800426a:	4b6d      	ldr	r3, [pc, #436]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004272:	2b00      	cmp	r3, #0
 8004274:	d1f0      	bne.n	8004258 <HAL_RCCEx_PeriphCLKConfig+0x504>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f003 0301 	and.w	r3, r3, #1
 800427e:	2b00      	cmp	r3, #0
 8004280:	d021      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004286:	2b00      	cmp	r3, #0
 8004288:	d11d      	bne.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 800428a:	4b65      	ldr	r3, [pc, #404]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800428c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004290:	0c1b      	lsrs	r3, r3, #16
 8004292:	f003 0303 	and.w	r3, r3, #3
 8004296:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004298:	4b61      	ldr	r3, [pc, #388]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 800429a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800429e:	0e1b      	lsrs	r3, r3, #24
 80042a0:	f003 030f 	and.w	r3, r3, #15
 80042a4:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	019a      	lsls	r2, r3, #6
 80042ac:	693b      	ldr	r3, [r7, #16]
 80042ae:	041b      	lsls	r3, r3, #16
 80042b0:	431a      	orrs	r2, r3
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	061b      	lsls	r3, r3, #24
 80042b6:	431a      	orrs	r2, r3
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	689b      	ldr	r3, [r3, #8]
 80042bc:	071b      	lsls	r3, r3, #28
 80042be:	4958      	ldr	r1, [pc, #352]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042c0:	4313      	orrs	r3, r2
 80042c2:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d004      	beq.n	80042dc <HAL_RCCEx_PeriphCLKConfig+0x588>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042d6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80042da:	d00a      	beq.n	80042f2 <HAL_RCCEx_PeriphCLKConfig+0x59e>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d02e      	beq.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80042f0:	d129      	bne.n	8004346 <HAL_RCCEx_PeriphCLKConfig+0x5f2>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80042f2:	4b4b      	ldr	r3, [pc, #300]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80042f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80042f8:	0c1b      	lsrs	r3, r3, #16
 80042fa:	f003 0303 	and.w	r3, r3, #3
 80042fe:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004300:	4b47      	ldr	r3, [pc, #284]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004302:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004306:	0f1b      	lsrs	r3, r3, #28
 8004308:	f003 0307 	and.w	r3, r3, #7
 800430c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	019a      	lsls	r2, r3, #6
 8004314:	693b      	ldr	r3, [r7, #16]
 8004316:	041b      	lsls	r3, r3, #16
 8004318:	431a      	orrs	r2, r3
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	68db      	ldr	r3, [r3, #12]
 800431e:	061b      	lsls	r3, r3, #24
 8004320:	431a      	orrs	r2, r3
 8004322:	68fb      	ldr	r3, [r7, #12]
 8004324:	071b      	lsls	r3, r3, #28
 8004326:	493e      	ldr	r1, [pc, #248]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004328:	4313      	orrs	r3, r2
 800432a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800432e:	4b3c      	ldr	r3, [pc, #240]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004330:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004334:	f023 021f 	bic.w	r2, r3, #31
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433c:	3b01      	subs	r3, #1
 800433e:	4938      	ldr	r1, [pc, #224]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004340:	4313      	orrs	r3, r2
 8004342:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800434e:	2b00      	cmp	r3, #0
 8004350:	d01d      	beq.n	800438e <HAL_RCCEx_PeriphCLKConfig+0x63a>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8004352:	4b33      	ldr	r3, [pc, #204]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004354:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004358:	0e1b      	lsrs	r3, r3, #24
 800435a:	f003 030f 	and.w	r3, r3, #15
 800435e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8004360:	4b2f      	ldr	r3, [pc, #188]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004362:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004366:	0f1b      	lsrs	r3, r3, #28
 8004368:	f003 0307 	and.w	r3, r3, #7
 800436c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	019a      	lsls	r2, r3, #6
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	691b      	ldr	r3, [r3, #16]
 8004378:	041b      	lsls	r3, r3, #16
 800437a:	431a      	orrs	r2, r3
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	061b      	lsls	r3, r3, #24
 8004380:	431a      	orrs	r2, r3
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	071b      	lsls	r3, r3, #28
 8004386:	4926      	ldr	r1, [pc, #152]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 8004388:	4313      	orrs	r3, r2
 800438a:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004396:	2b00      	cmp	r3, #0
 8004398:	d011      	beq.n	80043be <HAL_RCCEx_PeriphCLKConfig+0x66a>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	685b      	ldr	r3, [r3, #4]
 800439e:	019a      	lsls	r2, r3, #6
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	691b      	ldr	r3, [r3, #16]
 80043a4:	041b      	lsls	r3, r3, #16
 80043a6:	431a      	orrs	r2, r3
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	68db      	ldr	r3, [r3, #12]
 80043ac:	061b      	lsls	r3, r3, #24
 80043ae:	431a      	orrs	r2, r3
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	071b      	lsls	r3, r3, #28
 80043b6:	491a      	ldr	r1, [pc, #104]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043b8:	4313      	orrs	r3, r2
 80043ba:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80043be:	4b18      	ldr	r3, [pc, #96]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4a17      	ldr	r2, [pc, #92]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043c4:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80043c8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80043ca:	f7fd ff1d 	bl	8002208 <HAL_GetTick>
 80043ce:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043d0:	e008      	b.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80043d2:	f7fd ff19 	bl	8002208 <HAL_GetTick>
 80043d6:	4602      	mov	r2, r0
 80043d8:	697b      	ldr	r3, [r7, #20]
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	2b64      	cmp	r3, #100	@ 0x64
 80043de:	d901      	bls.n	80043e4 <HAL_RCCEx_PeriphCLKConfig+0x690>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80043e0:	2303      	movs	r3, #3
 80043e2:	e0d8      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80043e4:	4b0e      	ldr	r3, [pc, #56]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d0f0      	beq.n	80043d2 <HAL_RCCEx_PeriphCLKConfig+0x67e>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80043f0:	69bb      	ldr	r3, [r7, #24]
 80043f2:	2b01      	cmp	r3, #1
 80043f4:	f040 80ce 	bne.w	8004594 <HAL_RCCEx_PeriphCLKConfig+0x840>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80043f8:	4b09      	ldr	r3, [pc, #36]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	4a08      	ldr	r2, [pc, #32]	@ (8004420 <HAL_RCCEx_PeriphCLKConfig+0x6cc>)
 80043fe:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004402:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004404:	f7fd ff00 	bl	8002208 <HAL_GetTick>
 8004408:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800440a:	e00b      	b.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800440c:	f7fd fefc 	bl	8002208 <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	@ 0x64
 8004418:	d904      	bls.n	8004424 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e0bb      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x842>
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8004424:	4b5e      	ldr	r3, [pc, #376]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800442c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004430:	d0ec      	beq.n	800440c <HAL_RCCEx_PeriphCLKConfig+0x6b8>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800443a:	2b00      	cmp	r3, #0
 800443c:	d003      	beq.n	8004446 <HAL_RCCEx_PeriphCLKConfig+0x6f2>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004442:	2b00      	cmp	r3, #0
 8004444:	d009      	beq.n	800445a <HAL_RCCEx_PeriphCLKConfig+0x706>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800444e:	2b00      	cmp	r3, #0
 8004450:	d02e      	beq.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004456:	2b00      	cmp	r3, #0
 8004458:	d12a      	bne.n	80044b0 <HAL_RCCEx_PeriphCLKConfig+0x75c>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800445a:	4b51      	ldr	r3, [pc, #324]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800445c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004460:	0c1b      	lsrs	r3, r3, #16
 8004462:	f003 0303 	and.w	r3, r3, #3
 8004466:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8004468:	4b4d      	ldr	r3, [pc, #308]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800446a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800446e:	0f1b      	lsrs	r3, r3, #28
 8004470:	f003 0307 	and.w	r3, r3, #7
 8004474:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	695b      	ldr	r3, [r3, #20]
 800447a:	019a      	lsls	r2, r3, #6
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	041b      	lsls	r3, r3, #16
 8004480:	431a      	orrs	r2, r3
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	699b      	ldr	r3, [r3, #24]
 8004486:	061b      	lsls	r3, r3, #24
 8004488:	431a      	orrs	r2, r3
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	071b      	lsls	r3, r3, #28
 800448e:	4944      	ldr	r1, [pc, #272]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004490:	4313      	orrs	r3, r2
 8004492:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8004496:	4b42      	ldr	r3, [pc, #264]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004498:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800449c:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044a4:	3b01      	subs	r3, #1
 80044a6:	021b      	lsls	r3, r3, #8
 80044a8:	493d      	ldr	r1, [pc, #244]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d022      	beq.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80044c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80044c4:	d11d      	bne.n	8004502 <HAL_RCCEx_PeriphCLKConfig+0x7ae>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80044c6:	4b36      	ldr	r3, [pc, #216]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044c8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044cc:	0e1b      	lsrs	r3, r3, #24
 80044ce:	f003 030f 	and.w	r3, r3, #15
 80044d2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80044d4:	4b32      	ldr	r3, [pc, #200]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80044da:	0f1b      	lsrs	r3, r3, #28
 80044dc:	f003 0307 	and.w	r3, r3, #7
 80044e0:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	695b      	ldr	r3, [r3, #20]
 80044e6:	019a      	lsls	r2, r3, #6
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	041b      	lsls	r3, r3, #16
 80044ee:	431a      	orrs	r2, r3
 80044f0:	693b      	ldr	r3, [r7, #16]
 80044f2:	061b      	lsls	r3, r3, #24
 80044f4:	431a      	orrs	r2, r3
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	071b      	lsls	r3, r3, #28
 80044fa:	4929      	ldr	r1, [pc, #164]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 80044fc:	4313      	orrs	r3, r2
 80044fe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d028      	beq.n	8004560 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800450e:	4b24      	ldr	r3, [pc, #144]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004510:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004514:	0e1b      	lsrs	r3, r3, #24
 8004516:	f003 030f 	and.w	r3, r3, #15
 800451a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800451c:	4b20      	ldr	r3, [pc, #128]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800451e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004522:	0c1b      	lsrs	r3, r3, #16
 8004524:	f003 0303 	and.w	r3, r3, #3
 8004528:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	695b      	ldr	r3, [r3, #20]
 800452e:	019a      	lsls	r2, r3, #6
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	041b      	lsls	r3, r3, #16
 8004534:	431a      	orrs	r2, r3
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	061b      	lsls	r3, r3, #24
 800453a:	431a      	orrs	r2, r3
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	69db      	ldr	r3, [r3, #28]
 8004540:	071b      	lsls	r3, r3, #28
 8004542:	4917      	ldr	r1, [pc, #92]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004544:	4313      	orrs	r3, r2
 8004546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800454a:	4b15      	ldr	r3, [pc, #84]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800454c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004550:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004558:	4911      	ldr	r1, [pc, #68]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 800455a:	4313      	orrs	r3, r2
 800455c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8004560:	4b0f      	ldr	r3, [pc, #60]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a0e      	ldr	r2, [pc, #56]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004566:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800456a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800456c:	f7fd fe4c 	bl	8002208 <HAL_GetTick>
 8004570:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004572:	e008      	b.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x832>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8004574:	f7fd fe48 	bl	8002208 <HAL_GetTick>
 8004578:	4602      	mov	r2, r0
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	1ad3      	subs	r3, r2, r3
 800457e:	2b64      	cmp	r3, #100	@ 0x64
 8004580:	d901      	bls.n	8004586 <HAL_RCCEx_PeriphCLKConfig+0x832>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8004582:	2303      	movs	r3, #3
 8004584:	e007      	b.n	8004596 <HAL_RCCEx_PeriphCLKConfig+0x842>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8004586:	4b06      	ldr	r3, [pc, #24]	@ (80045a0 <HAL_RCCEx_PeriphCLKConfig+0x84c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800458e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8004592:	d1ef      	bne.n	8004574 <HAL_RCCEx_PeriphCLKConfig+0x820>
      }
    }
  }
  return HAL_OK;
 8004594:	2300      	movs	r3, #0
}
 8004596:	4618      	mov	r0, r3
 8004598:	3720      	adds	r7, #32
 800459a:	46bd      	mov	sp, r7
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	40023800 	.word	0x40023800

080045a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d101      	bne.n	80045b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80045b2:	2301      	movs	r3, #1
 80045b4:	e049      	b.n	800464a <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80045bc:	b2db      	uxtb	r3, r3
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d106      	bne.n	80045d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	2200      	movs	r2, #0
 80045c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80045ca:	6878      	ldr	r0, [r7, #4]
 80045cc:	f7fd fabe 	bl	8001b4c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2202      	movs	r2, #2
 80045d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	3304      	adds	r3, #4
 80045e0:	4619      	mov	r1, r3
 80045e2:	4610      	mov	r0, r2
 80045e4:	f000 fdf8 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2201      	movs	r2, #1
 80045ec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	2201      	movs	r2, #1
 80045f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2201      	movs	r2, #1
 8004604:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2201      	movs	r2, #1
 800460c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	2201      	movs	r2, #1
 8004614:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2201      	movs	r2, #1
 800461c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2201      	movs	r2, #1
 8004624:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2201      	movs	r2, #1
 800462c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2201      	movs	r2, #1
 8004634:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2201      	movs	r2, #1
 800463c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004648:	2300      	movs	r3, #0
}
 800464a:	4618      	mov	r0, r3
 800464c:	3708      	adds	r7, #8
 800464e:	46bd      	mov	sp, r7
 8004650:	bd80      	pop	{r7, pc}
	...

08004654 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800465c:	687b      	ldr	r3, [r7, #4]
 800465e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004662:	b2db      	uxtb	r3, r3
 8004664:	2b01      	cmp	r3, #1
 8004666:	d001      	beq.n	800466c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004668:	2301      	movs	r3, #1
 800466a:	e054      	b.n	8004716 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2202      	movs	r2, #2
 8004670:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68da      	ldr	r2, [r3, #12]
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	f042 0201 	orr.w	r2, r2, #1
 8004682:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4a26      	ldr	r2, [pc, #152]	@ (8004724 <HAL_TIM_Base_Start_IT+0xd0>)
 800468a:	4293      	cmp	r3, r2
 800468c:	d022      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004696:	d01d      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a22      	ldr	r2, [pc, #136]	@ (8004728 <HAL_TIM_Base_Start_IT+0xd4>)
 800469e:	4293      	cmp	r3, r2
 80046a0:	d018      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	4a21      	ldr	r2, [pc, #132]	@ (800472c <HAL_TIM_Base_Start_IT+0xd8>)
 80046a8:	4293      	cmp	r3, r2
 80046aa:	d013      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	4a1f      	ldr	r2, [pc, #124]	@ (8004730 <HAL_TIM_Base_Start_IT+0xdc>)
 80046b2:	4293      	cmp	r3, r2
 80046b4:	d00e      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1e      	ldr	r2, [pc, #120]	@ (8004734 <HAL_TIM_Base_Start_IT+0xe0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d009      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4a1c      	ldr	r2, [pc, #112]	@ (8004738 <HAL_TIM_Base_Start_IT+0xe4>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d004      	beq.n	80046d4 <HAL_TIM_Base_Start_IT+0x80>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a1b      	ldr	r2, [pc, #108]	@ (800473c <HAL_TIM_Base_Start_IT+0xe8>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d115      	bne.n	8004700 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	689a      	ldr	r2, [r3, #8]
 80046da:	4b19      	ldr	r3, [pc, #100]	@ (8004740 <HAL_TIM_Base_Start_IT+0xec>)
 80046dc:	4013      	ands	r3, r2
 80046de:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2b06      	cmp	r3, #6
 80046e4:	d015      	beq.n	8004712 <HAL_TIM_Base_Start_IT+0xbe>
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80046ec:	d011      	beq.n	8004712 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	681a      	ldr	r2, [r3, #0]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f042 0201 	orr.w	r2, r2, #1
 80046fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046fe:	e008      	b.n	8004712 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	681a      	ldr	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	f042 0201 	orr.w	r2, r2, #1
 800470e:	601a      	str	r2, [r3, #0]
 8004710:	e000      	b.n	8004714 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004712:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004714:	2300      	movs	r3, #0
}
 8004716:	4618      	mov	r0, r3
 8004718:	3714      	adds	r7, #20
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40010000 	.word	0x40010000
 8004728:	40000400 	.word	0x40000400
 800472c:	40000800 	.word	0x40000800
 8004730:	40000c00 	.word	0x40000c00
 8004734:	40010400 	.word	0x40010400
 8004738:	40014000 	.word	0x40014000
 800473c:	40001800 	.word	0x40001800
 8004740:	00010007 	.word	0x00010007

08004744 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
 800474a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2b00      	cmp	r3, #0
 8004750:	d101      	bne.n	8004756 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004752:	2301      	movs	r3, #1
 8004754:	e049      	b.n	80047ea <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	d106      	bne.n	8004770 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2200      	movs	r2, #0
 8004766:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800476a:	6878      	ldr	r0, [r7, #4]
 800476c:	f7fd f992 	bl	8001a94 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2202      	movs	r2, #2
 8004774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	3304      	adds	r3, #4
 8004780:	4619      	mov	r1, r3
 8004782:	4610      	mov	r0, r2
 8004784:	f000 fd28 	bl	80051d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2201      	movs	r2, #1
 800478c:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2201      	movs	r2, #1
 8004794:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2201      	movs	r2, #1
 80047a4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	2201      	movs	r2, #1
 80047ac:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80047b0:	687b      	ldr	r3, [r7, #4]
 80047b2:	2201      	movs	r2, #1
 80047b4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	2201      	movs	r2, #1
 80047bc:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	2201      	movs	r2, #1
 80047cc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	2201      	movs	r2, #1
 80047d4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	2201      	movs	r2, #1
 80047e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80047e8:	2300      	movs	r3, #0
}
 80047ea:	4618      	mov	r0, r3
 80047ec:	3708      	adds	r7, #8
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}
	...

080047f4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b084      	sub	sp, #16
 80047f8:	af00      	add	r7, sp, #0
 80047fa:	6078      	str	r0, [r7, #4]
 80047fc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	2b00      	cmp	r3, #0
 8004802:	d109      	bne.n	8004818 <HAL_TIM_PWM_Start+0x24>
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800480a:	b2db      	uxtb	r3, r3
 800480c:	2b01      	cmp	r3, #1
 800480e:	bf14      	ite	ne
 8004810:	2301      	movne	r3, #1
 8004812:	2300      	moveq	r3, #0
 8004814:	b2db      	uxtb	r3, r3
 8004816:	e03c      	b.n	8004892 <HAL_TIM_PWM_Start+0x9e>
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	2b04      	cmp	r3, #4
 800481c:	d109      	bne.n	8004832 <HAL_TIM_PWM_Start+0x3e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004824:	b2db      	uxtb	r3, r3
 8004826:	2b01      	cmp	r3, #1
 8004828:	bf14      	ite	ne
 800482a:	2301      	movne	r3, #1
 800482c:	2300      	moveq	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	e02f      	b.n	8004892 <HAL_TIM_PWM_Start+0x9e>
 8004832:	683b      	ldr	r3, [r7, #0]
 8004834:	2b08      	cmp	r3, #8
 8004836:	d109      	bne.n	800484c <HAL_TIM_PWM_Start+0x58>
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800483e:	b2db      	uxtb	r3, r3
 8004840:	2b01      	cmp	r3, #1
 8004842:	bf14      	ite	ne
 8004844:	2301      	movne	r3, #1
 8004846:	2300      	moveq	r3, #0
 8004848:	b2db      	uxtb	r3, r3
 800484a:	e022      	b.n	8004892 <HAL_TIM_PWM_Start+0x9e>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	2b0c      	cmp	r3, #12
 8004850:	d109      	bne.n	8004866 <HAL_TIM_PWM_Start+0x72>
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004858:	b2db      	uxtb	r3, r3
 800485a:	2b01      	cmp	r3, #1
 800485c:	bf14      	ite	ne
 800485e:	2301      	movne	r3, #1
 8004860:	2300      	moveq	r3, #0
 8004862:	b2db      	uxtb	r3, r3
 8004864:	e015      	b.n	8004892 <HAL_TIM_PWM_Start+0x9e>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b10      	cmp	r3, #16
 800486a:	d109      	bne.n	8004880 <HAL_TIM_PWM_Start+0x8c>
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004872:	b2db      	uxtb	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	bf14      	ite	ne
 8004878:	2301      	movne	r3, #1
 800487a:	2300      	moveq	r3, #0
 800487c:	b2db      	uxtb	r3, r3
 800487e:	e008      	b.n	8004892 <HAL_TIM_PWM_Start+0x9e>
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004886:	b2db      	uxtb	r3, r3
 8004888:	2b01      	cmp	r3, #1
 800488a:	bf14      	ite	ne
 800488c:	2301      	movne	r3, #1
 800488e:	2300      	moveq	r3, #0
 8004890:	b2db      	uxtb	r3, r3
 8004892:	2b00      	cmp	r3, #0
 8004894:	d001      	beq.n	800489a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e092      	b.n	80049c0 <HAL_TIM_PWM_Start+0x1cc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	2b00      	cmp	r3, #0
 800489e:	d104      	bne.n	80048aa <HAL_TIM_PWM_Start+0xb6>
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	2202      	movs	r2, #2
 80048a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80048a8:	e023      	b.n	80048f2 <HAL_TIM_PWM_Start+0xfe>
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	2b04      	cmp	r3, #4
 80048ae:	d104      	bne.n	80048ba <HAL_TIM_PWM_Start+0xc6>
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	2202      	movs	r2, #2
 80048b4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80048b8:	e01b      	b.n	80048f2 <HAL_TIM_PWM_Start+0xfe>
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	2b08      	cmp	r3, #8
 80048be:	d104      	bne.n	80048ca <HAL_TIM_PWM_Start+0xd6>
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2202      	movs	r2, #2
 80048c4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80048c8:	e013      	b.n	80048f2 <HAL_TIM_PWM_Start+0xfe>
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	2b0c      	cmp	r3, #12
 80048ce:	d104      	bne.n	80048da <HAL_TIM_PWM_Start+0xe6>
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2202      	movs	r2, #2
 80048d4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80048d8:	e00b      	b.n	80048f2 <HAL_TIM_PWM_Start+0xfe>
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b10      	cmp	r3, #16
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Start+0xf6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2202      	movs	r2, #2
 80048e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80048e8:	e003      	b.n	80048f2 <HAL_TIM_PWM_Start+0xfe>
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2202      	movs	r2, #2
 80048ee:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	2201      	movs	r2, #1
 80048f8:	6839      	ldr	r1, [r7, #0]
 80048fa:	4618      	mov	r0, r3
 80048fc:	f000 ff76 	bl	80057ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	4a30      	ldr	r2, [pc, #192]	@ (80049c8 <HAL_TIM_PWM_Start+0x1d4>)
 8004906:	4293      	cmp	r3, r2
 8004908:	d004      	beq.n	8004914 <HAL_TIM_PWM_Start+0x120>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	681b      	ldr	r3, [r3, #0]
 800490e:	4a2f      	ldr	r2, [pc, #188]	@ (80049cc <HAL_TIM_PWM_Start+0x1d8>)
 8004910:	4293      	cmp	r3, r2
 8004912:	d101      	bne.n	8004918 <HAL_TIM_PWM_Start+0x124>
 8004914:	2301      	movs	r3, #1
 8004916:	e000      	b.n	800491a <HAL_TIM_PWM_Start+0x126>
 8004918:	2300      	movs	r3, #0
 800491a:	2b00      	cmp	r3, #0
 800491c:	d007      	beq.n	800492e <HAL_TIM_PWM_Start+0x13a>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800492c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	4a25      	ldr	r2, [pc, #148]	@ (80049c8 <HAL_TIM_PWM_Start+0x1d4>)
 8004934:	4293      	cmp	r3, r2
 8004936:	d022      	beq.n	800497e <HAL_TIM_PWM_Start+0x18a>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004940:	d01d      	beq.n	800497e <HAL_TIM_PWM_Start+0x18a>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4a22      	ldr	r2, [pc, #136]	@ (80049d0 <HAL_TIM_PWM_Start+0x1dc>)
 8004948:	4293      	cmp	r3, r2
 800494a:	d018      	beq.n	800497e <HAL_TIM_PWM_Start+0x18a>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a20      	ldr	r2, [pc, #128]	@ (80049d4 <HAL_TIM_PWM_Start+0x1e0>)
 8004952:	4293      	cmp	r3, r2
 8004954:	d013      	beq.n	800497e <HAL_TIM_PWM_Start+0x18a>
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	4a1f      	ldr	r2, [pc, #124]	@ (80049d8 <HAL_TIM_PWM_Start+0x1e4>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d00e      	beq.n	800497e <HAL_TIM_PWM_Start+0x18a>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	4a19      	ldr	r2, [pc, #100]	@ (80049cc <HAL_TIM_PWM_Start+0x1d8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d009      	beq.n	800497e <HAL_TIM_PWM_Start+0x18a>
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	4a1b      	ldr	r2, [pc, #108]	@ (80049dc <HAL_TIM_PWM_Start+0x1e8>)
 8004970:	4293      	cmp	r3, r2
 8004972:	d004      	beq.n	800497e <HAL_TIM_PWM_Start+0x18a>
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	4a19      	ldr	r2, [pc, #100]	@ (80049e0 <HAL_TIM_PWM_Start+0x1ec>)
 800497a:	4293      	cmp	r3, r2
 800497c:	d115      	bne.n	80049aa <HAL_TIM_PWM_Start+0x1b6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	689a      	ldr	r2, [r3, #8]
 8004984:	4b17      	ldr	r3, [pc, #92]	@ (80049e4 <HAL_TIM_PWM_Start+0x1f0>)
 8004986:	4013      	ands	r3, r2
 8004988:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2b06      	cmp	r3, #6
 800498e:	d015      	beq.n	80049bc <HAL_TIM_PWM_Start+0x1c8>
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004996:	d011      	beq.n	80049bc <HAL_TIM_PWM_Start+0x1c8>
    {
      __HAL_TIM_ENABLE(htim);
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	681a      	ldr	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	f042 0201 	orr.w	r2, r2, #1
 80049a6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049a8:	e008      	b.n	80049bc <HAL_TIM_PWM_Start+0x1c8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f042 0201 	orr.w	r2, r2, #1
 80049b8:	601a      	str	r2, [r3, #0]
 80049ba:	e000      	b.n	80049be <HAL_TIM_PWM_Start+0x1ca>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80049bc:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80049be:	2300      	movs	r3, #0
}
 80049c0:	4618      	mov	r0, r3
 80049c2:	3710      	adds	r7, #16
 80049c4:	46bd      	mov	sp, r7
 80049c6:	bd80      	pop	{r7, pc}
 80049c8:	40010000 	.word	0x40010000
 80049cc:	40010400 	.word	0x40010400
 80049d0:	40000400 	.word	0x40000400
 80049d4:	40000800 	.word	0x40000800
 80049d8:	40000c00 	.word	0x40000c00
 80049dc:	40014000 	.word	0x40014000
 80049e0:	40001800 	.word	0x40001800
 80049e4:	00010007 	.word	0x00010007

080049e8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80049e8:	b580      	push	{r7, lr}
 80049ea:	b082      	sub	sp, #8
 80049ec:	af00      	add	r7, sp, #0
 80049ee:	6078      	str	r0, [r7, #4]
 80049f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	2200      	movs	r2, #0
 80049f8:	6839      	ldr	r1, [r7, #0]
 80049fa:	4618      	mov	r0, r3
 80049fc:	f000 fef6 	bl	80057ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a36      	ldr	r2, [pc, #216]	@ (8004ae0 <HAL_TIM_PWM_Stop+0xf8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d004      	beq.n	8004a14 <HAL_TIM_PWM_Stop+0x2c>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	4a35      	ldr	r2, [pc, #212]	@ (8004ae4 <HAL_TIM_PWM_Stop+0xfc>)
 8004a10:	4293      	cmp	r3, r2
 8004a12:	d101      	bne.n	8004a18 <HAL_TIM_PWM_Stop+0x30>
 8004a14:	2301      	movs	r3, #1
 8004a16:	e000      	b.n	8004a1a <HAL_TIM_PWM_Stop+0x32>
 8004a18:	2300      	movs	r3, #0
 8004a1a:	2b00      	cmp	r3, #0
 8004a1c:	d017      	beq.n	8004a4e <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	6a1a      	ldr	r2, [r3, #32]
 8004a24:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a28:	4013      	ands	r3, r2
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d10f      	bne.n	8004a4e <HAL_TIM_PWM_Stop+0x66>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	6a1a      	ldr	r2, [r3, #32]
 8004a34:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a38:	4013      	ands	r3, r2
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d107      	bne.n	8004a4e <HAL_TIM_PWM_Stop+0x66>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004a4c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	6a1a      	ldr	r2, [r3, #32]
 8004a54:	f241 1311 	movw	r3, #4369	@ 0x1111
 8004a58:	4013      	ands	r3, r2
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d10f      	bne.n	8004a7e <HAL_TIM_PWM_Stop+0x96>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	6a1a      	ldr	r2, [r3, #32]
 8004a64:	f240 4344 	movw	r3, #1092	@ 0x444
 8004a68:	4013      	ands	r3, r2
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d107      	bne.n	8004a7e <HAL_TIM_PWM_Stop+0x96>
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	681a      	ldr	r2, [r3, #0]
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	f022 0201 	bic.w	r2, r2, #1
 8004a7c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	d104      	bne.n	8004a8e <HAL_TIM_PWM_Stop+0xa6>
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004a8c:	e023      	b.n	8004ad6 <HAL_TIM_PWM_Stop+0xee>
 8004a8e:	683b      	ldr	r3, [r7, #0]
 8004a90:	2b04      	cmp	r3, #4
 8004a92:	d104      	bne.n	8004a9e <HAL_TIM_PWM_Stop+0xb6>
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2201      	movs	r2, #1
 8004a98:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004a9c:	e01b      	b.n	8004ad6 <HAL_TIM_PWM_Stop+0xee>
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	2b08      	cmp	r3, #8
 8004aa2:	d104      	bne.n	8004aae <HAL_TIM_PWM_Stop+0xc6>
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2201      	movs	r2, #1
 8004aa8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004aac:	e013      	b.n	8004ad6 <HAL_TIM_PWM_Stop+0xee>
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	2b0c      	cmp	r3, #12
 8004ab2:	d104      	bne.n	8004abe <HAL_TIM_PWM_Stop+0xd6>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	2201      	movs	r2, #1
 8004ab8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004abc:	e00b      	b.n	8004ad6 <HAL_TIM_PWM_Stop+0xee>
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d104      	bne.n	8004ace <HAL_TIM_PWM_Stop+0xe6>
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	2201      	movs	r2, #1
 8004ac8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004acc:	e003      	b.n	8004ad6 <HAL_TIM_PWM_Stop+0xee>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Return function status */
  return HAL_OK;
 8004ad6:	2300      	movs	r3, #0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	3708      	adds	r7, #8
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	40010000 	.word	0x40010000
 8004ae4:	40010400 	.word	0x40010400

08004ae8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b086      	sub	sp, #24
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d101      	bne.n	8004afc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004af8:	2301      	movs	r3, #1
 8004afa:	e08f      	b.n	8004c1c <HAL_TIM_Encoder_Init+0x134>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b02:	b2db      	uxtb	r3, r3
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d106      	bne.n	8004b16 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	2200      	movs	r2, #0
 8004b0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004b10:	6878      	ldr	r0, [r7, #4]
 8004b12:	f7fc fe75 	bl	8001800 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b16:	687b      	ldr	r3, [r7, #4]
 8004b18:	2202      	movs	r2, #2
 8004b1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	6899      	ldr	r1, [r3, #8]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681a      	ldr	r2, [r3, #0]
 8004b28:	4b3e      	ldr	r3, [pc, #248]	@ (8004c24 <HAL_TIM_Encoder_Init+0x13c>)
 8004b2a:	400b      	ands	r3, r1
 8004b2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	3304      	adds	r3, #4
 8004b36:	4619      	mov	r1, r3
 8004b38:	4610      	mov	r0, r2
 8004b3a:	f000 fb4d 	bl	80051d8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	689b      	ldr	r3, [r3, #8]
 8004b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	699b      	ldr	r3, [r3, #24]
 8004b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	6a1b      	ldr	r3, [r3, #32]
 8004b54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8004b56:	683b      	ldr	r3, [r7, #0]
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	697a      	ldr	r2, [r7, #20]
 8004b5c:	4313      	orrs	r3, r2
 8004b5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8004b60:	693a      	ldr	r2, [r7, #16]
 8004b62:	4b31      	ldr	r3, [pc, #196]	@ (8004c28 <HAL_TIM_Encoder_Init+0x140>)
 8004b64:	4013      	ands	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	689a      	ldr	r2, [r3, #8]
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	699b      	ldr	r3, [r3, #24]
 8004b70:	021b      	lsls	r3, r3, #8
 8004b72:	4313      	orrs	r3, r2
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	4313      	orrs	r3, r2
 8004b78:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8004b7a:	693a      	ldr	r2, [r7, #16]
 8004b7c:	4b2b      	ldr	r3, [pc, #172]	@ (8004c2c <HAL_TIM_Encoder_Init+0x144>)
 8004b7e:	4013      	ands	r3, r2
 8004b80:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8004b82:	693a      	ldr	r2, [r7, #16]
 8004b84:	4b2a      	ldr	r3, [pc, #168]	@ (8004c30 <HAL_TIM_Encoder_Init+0x148>)
 8004b86:	4013      	ands	r3, r2
 8004b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	68da      	ldr	r2, [r3, #12]
 8004b8e:	683b      	ldr	r3, [r7, #0]
 8004b90:	69db      	ldr	r3, [r3, #28]
 8004b92:	021b      	lsls	r3, r3, #8
 8004b94:	4313      	orrs	r3, r2
 8004b96:	693a      	ldr	r2, [r7, #16]
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004b9c:	683b      	ldr	r3, [r7, #0]
 8004b9e:	691b      	ldr	r3, [r3, #16]
 8004ba0:	011a      	lsls	r2, r3, #4
 8004ba2:	683b      	ldr	r3, [r7, #0]
 8004ba4:	6a1b      	ldr	r3, [r3, #32]
 8004ba6:	031b      	lsls	r3, r3, #12
 8004ba8:	4313      	orrs	r3, r2
 8004baa:	693a      	ldr	r2, [r7, #16]
 8004bac:	4313      	orrs	r3, r2
 8004bae:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8004bb6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 8004bbe:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8004bc0:	683b      	ldr	r3, [r7, #0]
 8004bc2:	685a      	ldr	r2, [r3, #4]
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	011b      	lsls	r3, r3, #4
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	4313      	orrs	r3, r2
 8004bd0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	697a      	ldr	r2, [r7, #20]
 8004bd8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	693a      	ldr	r2, [r7, #16]
 8004be0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	68fa      	ldr	r2, [r7, #12]
 8004be8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	2201      	movs	r2, #1
 8004bee:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2201      	movs	r2, #1
 8004bf6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	2201      	movs	r2, #1
 8004bfe:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	2201      	movs	r2, #1
 8004c06:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	2201      	movs	r2, #1
 8004c16:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004c1a:	2300      	movs	r3, #0
}
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	3718      	adds	r7, #24
 8004c20:	46bd      	mov	sp, r7
 8004c22:	bd80      	pop	{r7, pc}
 8004c24:	fffebff8 	.word	0xfffebff8
 8004c28:	fffffcfc 	.word	0xfffffcfc
 8004c2c:	fffff3f3 	.word	0xfffff3f3
 8004c30:	ffff0f0f 	.word	0xffff0f0f

08004c34 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004c34:	b580      	push	{r7, lr}
 8004c36:	b084      	sub	sp, #16
 8004c38:	af00      	add	r7, sp, #0
 8004c3a:	6078      	str	r0, [r7, #4]
 8004c3c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004c44:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004c4c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004c54:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004c5c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8004c5e:	683b      	ldr	r3, [r7, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	d110      	bne.n	8004c86 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	2b01      	cmp	r3, #1
 8004c68:	d102      	bne.n	8004c70 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c6a:	7b7b      	ldrb	r3, [r7, #13]
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d001      	beq.n	8004c74 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e069      	b.n	8004d48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2202      	movs	r2, #2
 8004c78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2202      	movs	r2, #2
 8004c80:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004c84:	e031      	b.n	8004cea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	2b04      	cmp	r3, #4
 8004c8a:	d110      	bne.n	8004cae <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004c8c:	7bbb      	ldrb	r3, [r7, #14]
 8004c8e:	2b01      	cmp	r3, #1
 8004c90:	d102      	bne.n	8004c98 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004c92:	7b3b      	ldrb	r3, [r7, #12]
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d001      	beq.n	8004c9c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e055      	b.n	8004d48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2202      	movs	r2, #2
 8004ca0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2202      	movs	r2, #2
 8004ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cac:	e01d      	b.n	8004cea <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cae:	7bfb      	ldrb	r3, [r7, #15]
 8004cb0:	2b01      	cmp	r3, #1
 8004cb2:	d108      	bne.n	8004cc6 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cb4:	7bbb      	ldrb	r3, [r7, #14]
 8004cb6:	2b01      	cmp	r3, #1
 8004cb8:	d105      	bne.n	8004cc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8004cba:	7b7b      	ldrb	r3, [r7, #13]
 8004cbc:	2b01      	cmp	r3, #1
 8004cbe:	d102      	bne.n	8004cc6 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8004cc0:	7b3b      	ldrb	r3, [r7, #12]
 8004cc2:	2b01      	cmp	r3, #1
 8004cc4:	d001      	beq.n	8004cca <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8004cc6:	2301      	movs	r3, #1
 8004cc8:	e03e      	b.n	8004d48 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	2202      	movs	r2, #2
 8004cce:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	2202      	movs	r2, #2
 8004cd6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2202      	movs	r2, #2
 8004cde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	2202      	movs	r2, #2
 8004ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d003      	beq.n	8004cf8 <HAL_TIM_Encoder_Start+0xc4>
 8004cf0:	683b      	ldr	r3, [r7, #0]
 8004cf2:	2b04      	cmp	r3, #4
 8004cf4:	d008      	beq.n	8004d08 <HAL_TIM_Encoder_Start+0xd4>
 8004cf6:	e00f      	b.n	8004d18 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	2100      	movs	r1, #0
 8004d00:	4618      	mov	r0, r3
 8004d02:	f000 fd73 	bl	80057ec <TIM_CCxChannelCmd>
      break;
 8004d06:	e016      	b.n	8004d36 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	2201      	movs	r2, #1
 8004d0e:	2104      	movs	r1, #4
 8004d10:	4618      	mov	r0, r3
 8004d12:	f000 fd6b 	bl	80057ec <TIM_CCxChannelCmd>
      break;
 8004d16:	e00e      	b.n	8004d36 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	2201      	movs	r2, #1
 8004d1e:	2100      	movs	r1, #0
 8004d20:	4618      	mov	r0, r3
 8004d22:	f000 fd63 	bl	80057ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	2201      	movs	r2, #1
 8004d2c:	2104      	movs	r1, #4
 8004d2e:	4618      	mov	r0, r3
 8004d30:	f000 fd5c 	bl	80057ec <TIM_CCxChannelCmd>
      break;
 8004d34:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	681a      	ldr	r2, [r3, #0]
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f042 0201 	orr.w	r2, r2, #1
 8004d44:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8004d46:	2300      	movs	r3, #0
}
 8004d48:	4618      	mov	r0, r3
 8004d4a:	3710      	adds	r7, #16
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	bd80      	pop	{r7, pc}

08004d50 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b084      	sub	sp, #16
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68db      	ldr	r3, [r3, #12]
 8004d5e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8004d60:	687b      	ldr	r3, [r7, #4]
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	691b      	ldr	r3, [r3, #16]
 8004d66:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004d68:	68bb      	ldr	r3, [r7, #8]
 8004d6a:	f003 0302 	and.w	r3, r3, #2
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d020      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f003 0302 	and.w	r3, r3, #2
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d01b      	beq.n	8004db4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	f06f 0202 	mvn.w	r2, #2
 8004d84:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	699b      	ldr	r3, [r3, #24]
 8004d92:	f003 0303 	and.w	r3, r3, #3
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d003      	beq.n	8004da2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d9a:	6878      	ldr	r0, [r7, #4]
 8004d9c:	f000 f9fe 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8004da0:	e005      	b.n	8004dae <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004da2:	6878      	ldr	r0, [r7, #4]
 8004da4:	f000 f9f0 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004da8:	6878      	ldr	r0, [r7, #4]
 8004daa:	f000 fa01 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	2200      	movs	r2, #0
 8004db2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	f003 0304 	and.w	r3, r3, #4
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d020      	beq.n	8004e00 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004dbe:	68fb      	ldr	r3, [r7, #12]
 8004dc0:	f003 0304 	and.w	r3, r3, #4
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d01b      	beq.n	8004e00 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	f06f 0204 	mvn.w	r2, #4
 8004dd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2202      	movs	r2, #2
 8004dd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d003      	beq.n	8004dee <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f9d8 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8004dec:	e005      	b.n	8004dfa <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f9ca 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004df4:	6878      	ldr	r0, [r7, #4]
 8004df6:	f000 f9db 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	2200      	movs	r2, #0
 8004dfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004e00:	68bb      	ldr	r3, [r7, #8]
 8004e02:	f003 0308 	and.w	r3, r3, #8
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d020      	beq.n	8004e4c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004e0a:	68fb      	ldr	r3, [r7, #12]
 8004e0c:	f003 0308 	and.w	r3, r3, #8
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d01b      	beq.n	8004e4c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f06f 0208 	mvn.w	r2, #8
 8004e1c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2204      	movs	r2, #4
 8004e22:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	69db      	ldr	r3, [r3, #28]
 8004e2a:	f003 0303 	and.w	r3, r3, #3
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d003      	beq.n	8004e3a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e32:	6878      	ldr	r0, [r7, #4]
 8004e34:	f000 f9b2 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8004e38:	e005      	b.n	8004e46 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e3a:	6878      	ldr	r0, [r7, #4]
 8004e3c:	f000 f9a4 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e40:	6878      	ldr	r0, [r7, #4]
 8004e42:	f000 f9b5 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004e4c:	68bb      	ldr	r3, [r7, #8]
 8004e4e:	f003 0310 	and.w	r3, r3, #16
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d020      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	f003 0310 	and.w	r3, r3, #16
 8004e5c:	2b00      	cmp	r3, #0
 8004e5e:	d01b      	beq.n	8004e98 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f06f 0210 	mvn.w	r2, #16
 8004e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	2208      	movs	r2, #8
 8004e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	69db      	ldr	r3, [r3, #28]
 8004e76:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d003      	beq.n	8004e86 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e7e:	6878      	ldr	r0, [r7, #4]
 8004e80:	f000 f98c 	bl	800519c <HAL_TIM_IC_CaptureCallback>
 8004e84:	e005      	b.n	8004e92 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e86:	6878      	ldr	r0, [r7, #4]
 8004e88:	f000 f97e 	bl	8005188 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e8c:	6878      	ldr	r0, [r7, #4]
 8004e8e:	f000 f98f 	bl	80051b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004e98:	68bb      	ldr	r3, [r7, #8]
 8004e9a:	f003 0301 	and.w	r3, r3, #1
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d00c      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	f003 0301 	and.w	r3, r3, #1
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d007      	beq.n	8004ebc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	f06f 0201 	mvn.w	r2, #1
 8004eb4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004eb6:	6878      	ldr	r0, [r7, #4]
 8004eb8:	f7fb fde2 	bl	8000a80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d104      	bne.n	8004ed0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8004ec6:	68bb      	ldr	r3, [r7, #8]
 8004ec8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d00c      	beq.n	8004eea <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d007      	beq.n	8004eea <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8004ee2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ee4:	6878      	ldr	r0, [r7, #4]
 8004ee6:	f000 fd3f 	bl	8005968 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004eea:	68bb      	ldr	r3, [r7, #8]
 8004eec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d00c      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d007      	beq.n	8004f0e <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8004f06:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 fd37 	bl	800597c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d00c      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d007      	beq.n	8004f32 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004f2a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004f2c:	6878      	ldr	r0, [r7, #4]
 8004f2e:	f000 f949 	bl	80051c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004f32:	68bb      	ldr	r3, [r7, #8]
 8004f34:	f003 0320 	and.w	r3, r3, #32
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00c      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	f003 0320 	and.w	r3, r3, #32
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d007      	beq.n	8004f56 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f06f 0220 	mvn.w	r2, #32
 8004f4e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 fcff 	bl	8005954 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004f56:	bf00      	nop
 8004f58:	3710      	adds	r7, #16
 8004f5a:	46bd      	mov	sp, r7
 8004f5c:	bd80      	pop	{r7, pc}
	...

08004f60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004f60:	b580      	push	{r7, lr}
 8004f62:	b086      	sub	sp, #24
 8004f64:	af00      	add	r7, sp, #0
 8004f66:	60f8      	str	r0, [r7, #12]
 8004f68:	60b9      	str	r1, [r7, #8]
 8004f6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004f6c:	2300      	movs	r3, #0
 8004f6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004f76:	2b01      	cmp	r3, #1
 8004f78:	d101      	bne.n	8004f7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004f7a:	2302      	movs	r3, #2
 8004f7c:	e0ff      	b.n	800517e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004f7e:	68fb      	ldr	r3, [r7, #12]
 8004f80:	2201      	movs	r2, #1
 8004f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2b14      	cmp	r3, #20
 8004f8a:	f200 80f0 	bhi.w	800516e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004f8e:	a201      	add	r2, pc, #4	@ (adr r2, 8004f94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f94:	08004fe9 	.word	0x08004fe9
 8004f98:	0800516f 	.word	0x0800516f
 8004f9c:	0800516f 	.word	0x0800516f
 8004fa0:	0800516f 	.word	0x0800516f
 8004fa4:	08005029 	.word	0x08005029
 8004fa8:	0800516f 	.word	0x0800516f
 8004fac:	0800516f 	.word	0x0800516f
 8004fb0:	0800516f 	.word	0x0800516f
 8004fb4:	0800506b 	.word	0x0800506b
 8004fb8:	0800516f 	.word	0x0800516f
 8004fbc:	0800516f 	.word	0x0800516f
 8004fc0:	0800516f 	.word	0x0800516f
 8004fc4:	080050ab 	.word	0x080050ab
 8004fc8:	0800516f 	.word	0x0800516f
 8004fcc:	0800516f 	.word	0x0800516f
 8004fd0:	0800516f 	.word	0x0800516f
 8004fd4:	080050ed 	.word	0x080050ed
 8004fd8:	0800516f 	.word	0x0800516f
 8004fdc:	0800516f 	.word	0x0800516f
 8004fe0:	0800516f 	.word	0x0800516f
 8004fe4:	0800512d 	.word	0x0800512d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	68b9      	ldr	r1, [r7, #8]
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f000 f99e 	bl	8005330 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	699a      	ldr	r2, [r3, #24]
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0208 	orr.w	r2, r2, #8
 8005002:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	699a      	ldr	r2, [r3, #24]
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f022 0204 	bic.w	r2, r2, #4
 8005012:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	6999      	ldr	r1, [r3, #24]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	691a      	ldr	r2, [r3, #16]
 800501e:	68fb      	ldr	r3, [r7, #12]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	430a      	orrs	r2, r1
 8005024:	619a      	str	r2, [r3, #24]
      break;
 8005026:	e0a5      	b.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68b9      	ldr	r1, [r7, #8]
 800502e:	4618      	mov	r0, r3
 8005030:	f000 f9f0 	bl	8005414 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005034:	68fb      	ldr	r3, [r7, #12]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	699a      	ldr	r2, [r3, #24]
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005042:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	699a      	ldr	r2, [r3, #24]
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005052:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	6999      	ldr	r1, [r3, #24]
 800505a:	68bb      	ldr	r3, [r7, #8]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	021a      	lsls	r2, r3, #8
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	430a      	orrs	r2, r1
 8005066:	619a      	str	r2, [r3, #24]
      break;
 8005068:	e084      	b.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800506a:	68fb      	ldr	r3, [r7, #12]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	68b9      	ldr	r1, [r7, #8]
 8005070:	4618      	mov	r0, r3
 8005072:	f000 fa47 	bl	8005504 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	69da      	ldr	r2, [r3, #28]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f042 0208 	orr.w	r2, r2, #8
 8005084:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	69da      	ldr	r2, [r3, #28]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	f022 0204 	bic.w	r2, r2, #4
 8005094:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	69d9      	ldr	r1, [r3, #28]
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	691a      	ldr	r2, [r3, #16]
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	430a      	orrs	r2, r1
 80050a6:	61da      	str	r2, [r3, #28]
      break;
 80050a8:	e064      	b.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	68b9      	ldr	r1, [r7, #8]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f000 fa9d 	bl	80055f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	69da      	ldr	r2, [r3, #28]
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80050c4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	69da      	ldr	r2, [r3, #28]
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050d4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	69d9      	ldr	r1, [r3, #28]
 80050dc:	68bb      	ldr	r3, [r7, #8]
 80050de:	691b      	ldr	r3, [r3, #16]
 80050e0:	021a      	lsls	r2, r3, #8
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	430a      	orrs	r2, r1
 80050e8:	61da      	str	r2, [r3, #28]
      break;
 80050ea:	e043      	b.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	68b9      	ldr	r1, [r7, #8]
 80050f2:	4618      	mov	r0, r3
 80050f4:	f000 fad4 	bl	80056a0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f042 0208 	orr.w	r2, r2, #8
 8005106:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f022 0204 	bic.w	r2, r2, #4
 8005116:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	691a      	ldr	r2, [r3, #16]
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	430a      	orrs	r2, r1
 8005128:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800512a:	e023      	b.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 800512c:	68fb      	ldr	r3, [r7, #12]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	68b9      	ldr	r1, [r7, #8]
 8005132:	4618      	mov	r0, r3
 8005134:	f000 fb06 	bl	8005744 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005146:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005156:	655a      	str	r2, [r3, #84]	@ 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	691b      	ldr	r3, [r3, #16]
 8005162:	021a      	lsls	r2, r3, #8
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	430a      	orrs	r2, r1
 800516a:	655a      	str	r2, [r3, #84]	@ 0x54
      break;
 800516c:	e002      	b.n	8005174 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 800516e:	2301      	movs	r3, #1
 8005170:	75fb      	strb	r3, [r7, #23]
      break;
 8005172:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	2200      	movs	r2, #0
 8005178:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800517c:	7dfb      	ldrb	r3, [r7, #23]
}
 800517e:	4618      	mov	r0, r3
 8005180:	3718      	adds	r7, #24
 8005182:	46bd      	mov	sp, r7
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop

08005188 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005188:	b480      	push	{r7}
 800518a:	b083      	sub	sp, #12
 800518c:	af00      	add	r7, sp, #0
 800518e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005190:	bf00      	nop
 8005192:	370c      	adds	r7, #12
 8005194:	46bd      	mov	sp, r7
 8005196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519a:	4770      	bx	lr

0800519c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800519c:	b480      	push	{r7}
 800519e:	b083      	sub	sp, #12
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80051a4:	bf00      	nop
 80051a6:	370c      	adds	r7, #12
 80051a8:	46bd      	mov	sp, r7
 80051aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ae:	4770      	bx	lr

080051b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80051b0:	b480      	push	{r7}
 80051b2:	b083      	sub	sp, #12
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80051b8:	bf00      	nop
 80051ba:	370c      	adds	r7, #12
 80051bc:	46bd      	mov	sp, r7
 80051be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c2:	4770      	bx	lr

080051c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80051c4:	b480      	push	{r7}
 80051c6:	b083      	sub	sp, #12
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80051cc:	bf00      	nop
 80051ce:	370c      	adds	r7, #12
 80051d0:	46bd      	mov	sp, r7
 80051d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d6:	4770      	bx	lr

080051d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80051d8:	b480      	push	{r7}
 80051da:	b085      	sub	sp, #20
 80051dc:	af00      	add	r7, sp, #0
 80051de:	6078      	str	r0, [r7, #4]
 80051e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a46      	ldr	r2, [pc, #280]	@ (8005304 <TIM_Base_SetConfig+0x12c>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d013      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80051f6:	d00f      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	4a43      	ldr	r2, [pc, #268]	@ (8005308 <TIM_Base_SetConfig+0x130>)
 80051fc:	4293      	cmp	r3, r2
 80051fe:	d00b      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	4a42      	ldr	r2, [pc, #264]	@ (800530c <TIM_Base_SetConfig+0x134>)
 8005204:	4293      	cmp	r3, r2
 8005206:	d007      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	4a41      	ldr	r2, [pc, #260]	@ (8005310 <TIM_Base_SetConfig+0x138>)
 800520c:	4293      	cmp	r3, r2
 800520e:	d003      	beq.n	8005218 <TIM_Base_SetConfig+0x40>
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	4a40      	ldr	r2, [pc, #256]	@ (8005314 <TIM_Base_SetConfig+0x13c>)
 8005214:	4293      	cmp	r3, r2
 8005216:	d108      	bne.n	800522a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800521e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	685b      	ldr	r3, [r3, #4]
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	4313      	orrs	r3, r2
 8005228:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	4a35      	ldr	r2, [pc, #212]	@ (8005304 <TIM_Base_SetConfig+0x12c>)
 800522e:	4293      	cmp	r3, r2
 8005230:	d02b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005238:	d027      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	4a32      	ldr	r2, [pc, #200]	@ (8005308 <TIM_Base_SetConfig+0x130>)
 800523e:	4293      	cmp	r3, r2
 8005240:	d023      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	4a31      	ldr	r2, [pc, #196]	@ (800530c <TIM_Base_SetConfig+0x134>)
 8005246:	4293      	cmp	r3, r2
 8005248:	d01f      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	4a30      	ldr	r2, [pc, #192]	@ (8005310 <TIM_Base_SetConfig+0x138>)
 800524e:	4293      	cmp	r3, r2
 8005250:	d01b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	4a2f      	ldr	r2, [pc, #188]	@ (8005314 <TIM_Base_SetConfig+0x13c>)
 8005256:	4293      	cmp	r3, r2
 8005258:	d017      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	4a2e      	ldr	r2, [pc, #184]	@ (8005318 <TIM_Base_SetConfig+0x140>)
 800525e:	4293      	cmp	r3, r2
 8005260:	d013      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	4a2d      	ldr	r2, [pc, #180]	@ (800531c <TIM_Base_SetConfig+0x144>)
 8005266:	4293      	cmp	r3, r2
 8005268:	d00f      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	4a2c      	ldr	r2, [pc, #176]	@ (8005320 <TIM_Base_SetConfig+0x148>)
 800526e:	4293      	cmp	r3, r2
 8005270:	d00b      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	4a2b      	ldr	r2, [pc, #172]	@ (8005324 <TIM_Base_SetConfig+0x14c>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d007      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	4a2a      	ldr	r2, [pc, #168]	@ (8005328 <TIM_Base_SetConfig+0x150>)
 800527e:	4293      	cmp	r3, r2
 8005280:	d003      	beq.n	800528a <TIM_Base_SetConfig+0xb2>
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	4a29      	ldr	r2, [pc, #164]	@ (800532c <TIM_Base_SetConfig+0x154>)
 8005286:	4293      	cmp	r3, r2
 8005288:	d108      	bne.n	800529c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005290:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005292:	683b      	ldr	r3, [r7, #0]
 8005294:	68db      	ldr	r3, [r3, #12]
 8005296:	68fa      	ldr	r2, [r7, #12]
 8005298:	4313      	orrs	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80052a2:	683b      	ldr	r3, [r7, #0]
 80052a4:	695b      	ldr	r3, [r3, #20]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	68fa      	ldr	r2, [r7, #12]
 80052ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	689a      	ldr	r2, [r3, #8]
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	681a      	ldr	r2, [r3, #0]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	4a10      	ldr	r2, [pc, #64]	@ (8005304 <TIM_Base_SetConfig+0x12c>)
 80052c4:	4293      	cmp	r3, r2
 80052c6:	d003      	beq.n	80052d0 <TIM_Base_SetConfig+0xf8>
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	4a12      	ldr	r2, [pc, #72]	@ (8005314 <TIM_Base_SetConfig+0x13c>)
 80052cc:	4293      	cmp	r3, r2
 80052ce:	d103      	bne.n	80052d8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	691a      	ldr	r2, [r3, #16]
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	2201      	movs	r2, #1
 80052dc:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	f003 0301 	and.w	r3, r3, #1
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d105      	bne.n	80052f6 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	691b      	ldr	r3, [r3, #16]
 80052ee:	f023 0201 	bic.w	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	611a      	str	r2, [r3, #16]
  }
}
 80052f6:	bf00      	nop
 80052f8:	3714      	adds	r7, #20
 80052fa:	46bd      	mov	sp, r7
 80052fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005300:	4770      	bx	lr
 8005302:	bf00      	nop
 8005304:	40010000 	.word	0x40010000
 8005308:	40000400 	.word	0x40000400
 800530c:	40000800 	.word	0x40000800
 8005310:	40000c00 	.word	0x40000c00
 8005314:	40010400 	.word	0x40010400
 8005318:	40014000 	.word	0x40014000
 800531c:	40014400 	.word	0x40014400
 8005320:	40014800 	.word	0x40014800
 8005324:	40001800 	.word	0x40001800
 8005328:	40001c00 	.word	0x40001c00
 800532c:	40002000 	.word	0x40002000

08005330 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005330:	b480      	push	{r7}
 8005332:	b087      	sub	sp, #28
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
 8005338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	6a1b      	ldr	r3, [r3, #32]
 800533e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a1b      	ldr	r3, [r3, #32]
 8005344:	f023 0201 	bic.w	r2, r3, #1
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005358:	68fa      	ldr	r2, [r7, #12]
 800535a:	4b2b      	ldr	r3, [pc, #172]	@ (8005408 <TIM_OC1_SetConfig+0xd8>)
 800535c:	4013      	ands	r3, r2
 800535e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f023 0303 	bic.w	r3, r3, #3
 8005366:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005368:	683b      	ldr	r3, [r7, #0]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	68fa      	ldr	r2, [r7, #12]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005372:	697b      	ldr	r3, [r7, #20]
 8005374:	f023 0302 	bic.w	r3, r3, #2
 8005378:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	697a      	ldr	r2, [r7, #20]
 8005380:	4313      	orrs	r3, r2
 8005382:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	4a21      	ldr	r2, [pc, #132]	@ (800540c <TIM_OC1_SetConfig+0xdc>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d003      	beq.n	8005394 <TIM_OC1_SetConfig+0x64>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	4a20      	ldr	r2, [pc, #128]	@ (8005410 <TIM_OC1_SetConfig+0xe0>)
 8005390:	4293      	cmp	r3, r2
 8005392:	d10c      	bne.n	80053ae <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005394:	697b      	ldr	r3, [r7, #20]
 8005396:	f023 0308 	bic.w	r3, r3, #8
 800539a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	68db      	ldr	r3, [r3, #12]
 80053a0:	697a      	ldr	r2, [r7, #20]
 80053a2:	4313      	orrs	r3, r2
 80053a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053a6:	697b      	ldr	r3, [r7, #20]
 80053a8:	f023 0304 	bic.w	r3, r3, #4
 80053ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	4a16      	ldr	r2, [pc, #88]	@ (800540c <TIM_OC1_SetConfig+0xdc>)
 80053b2:	4293      	cmp	r3, r2
 80053b4:	d003      	beq.n	80053be <TIM_OC1_SetConfig+0x8e>
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	4a15      	ldr	r2, [pc, #84]	@ (8005410 <TIM_OC1_SetConfig+0xe0>)
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d111      	bne.n	80053e2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053be:	693b      	ldr	r3, [r7, #16]
 80053c0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80053c4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80053cc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80053ce:	683b      	ldr	r3, [r7, #0]
 80053d0:	695b      	ldr	r3, [r3, #20]
 80053d2:	693a      	ldr	r2, [r7, #16]
 80053d4:	4313      	orrs	r3, r2
 80053d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	699b      	ldr	r3, [r3, #24]
 80053dc:	693a      	ldr	r2, [r7, #16]
 80053de:	4313      	orrs	r3, r2
 80053e0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	693a      	ldr	r2, [r7, #16]
 80053e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	68fa      	ldr	r2, [r7, #12]
 80053ec:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80053ee:	683b      	ldr	r3, [r7, #0]
 80053f0:	685a      	ldr	r2, [r3, #4]
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	697a      	ldr	r2, [r7, #20]
 80053fa:	621a      	str	r2, [r3, #32]
}
 80053fc:	bf00      	nop
 80053fe:	371c      	adds	r7, #28
 8005400:	46bd      	mov	sp, r7
 8005402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005406:	4770      	bx	lr
 8005408:	fffeff8f 	.word	0xfffeff8f
 800540c:	40010000 	.word	0x40010000
 8005410:	40010400 	.word	0x40010400

08005414 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005414:	b480      	push	{r7}
 8005416:	b087      	sub	sp, #28
 8005418:	af00      	add	r7, sp, #0
 800541a:	6078      	str	r0, [r7, #4]
 800541c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6a1b      	ldr	r3, [r3, #32]
 8005422:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	6a1b      	ldr	r3, [r3, #32]
 8005428:	f023 0210 	bic.w	r2, r3, #16
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	699b      	ldr	r3, [r3, #24]
 800543a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800543c:	68fa      	ldr	r2, [r7, #12]
 800543e:	4b2e      	ldr	r3, [pc, #184]	@ (80054f8 <TIM_OC2_SetConfig+0xe4>)
 8005440:	4013      	ands	r3, r2
 8005442:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800544a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800544c:	683b      	ldr	r3, [r7, #0]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	021b      	lsls	r3, r3, #8
 8005452:	68fa      	ldr	r2, [r7, #12]
 8005454:	4313      	orrs	r3, r2
 8005456:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	f023 0320 	bic.w	r3, r3, #32
 800545e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005460:	683b      	ldr	r3, [r7, #0]
 8005462:	689b      	ldr	r3, [r3, #8]
 8005464:	011b      	lsls	r3, r3, #4
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	4313      	orrs	r3, r2
 800546a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	4a23      	ldr	r2, [pc, #140]	@ (80054fc <TIM_OC2_SetConfig+0xe8>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d003      	beq.n	800547c <TIM_OC2_SetConfig+0x68>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	4a22      	ldr	r2, [pc, #136]	@ (8005500 <TIM_OC2_SetConfig+0xec>)
 8005478:	4293      	cmp	r3, r2
 800547a:	d10d      	bne.n	8005498 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800547c:	697b      	ldr	r3, [r7, #20]
 800547e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005482:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	011b      	lsls	r3, r3, #4
 800548a:	697a      	ldr	r2, [r7, #20]
 800548c:	4313      	orrs	r3, r2
 800548e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005496:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	4a18      	ldr	r2, [pc, #96]	@ (80054fc <TIM_OC2_SetConfig+0xe8>)
 800549c:	4293      	cmp	r3, r2
 800549e:	d003      	beq.n	80054a8 <TIM_OC2_SetConfig+0x94>
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	4a17      	ldr	r2, [pc, #92]	@ (8005500 <TIM_OC2_SetConfig+0xec>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d113      	bne.n	80054d0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80054ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054b0:	693b      	ldr	r3, [r7, #16]
 80054b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80054b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054b8:	683b      	ldr	r3, [r7, #0]
 80054ba:	695b      	ldr	r3, [r3, #20]
 80054bc:	009b      	lsls	r3, r3, #2
 80054be:	693a      	ldr	r2, [r7, #16]
 80054c0:	4313      	orrs	r3, r2
 80054c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	699b      	ldr	r3, [r3, #24]
 80054c8:	009b      	lsls	r3, r3, #2
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	4313      	orrs	r3, r2
 80054ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	693a      	ldr	r2, [r7, #16]
 80054d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80054d6:	687b      	ldr	r3, [r7, #4]
 80054d8:	68fa      	ldr	r2, [r7, #12]
 80054da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80054dc:	683b      	ldr	r3, [r7, #0]
 80054de:	685a      	ldr	r2, [r3, #4]
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	697a      	ldr	r2, [r7, #20]
 80054e8:	621a      	str	r2, [r3, #32]
}
 80054ea:	bf00      	nop
 80054ec:	371c      	adds	r7, #28
 80054ee:	46bd      	mov	sp, r7
 80054f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054f4:	4770      	bx	lr
 80054f6:	bf00      	nop
 80054f8:	feff8fff 	.word	0xfeff8fff
 80054fc:	40010000 	.word	0x40010000
 8005500:	40010400 	.word	0x40010400

08005504 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005504:	b480      	push	{r7}
 8005506:	b087      	sub	sp, #28
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
 800550c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	6a1b      	ldr	r3, [r3, #32]
 8005512:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	6a1b      	ldr	r3, [r3, #32]
 8005518:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	685b      	ldr	r3, [r3, #4]
 8005524:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	69db      	ldr	r3, [r3, #28]
 800552a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800552c:	68fa      	ldr	r2, [r7, #12]
 800552e:	4b2d      	ldr	r3, [pc, #180]	@ (80055e4 <TIM_OC3_SetConfig+0xe0>)
 8005530:	4013      	ands	r3, r2
 8005532:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	f023 0303 	bic.w	r3, r3, #3
 800553a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800553c:	683b      	ldr	r3, [r7, #0]
 800553e:	681b      	ldr	r3, [r3, #0]
 8005540:	68fa      	ldr	r2, [r7, #12]
 8005542:	4313      	orrs	r3, r2
 8005544:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005546:	697b      	ldr	r3, [r7, #20]
 8005548:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800554c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	021b      	lsls	r3, r3, #8
 8005554:	697a      	ldr	r2, [r7, #20]
 8005556:	4313      	orrs	r3, r2
 8005558:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	4a22      	ldr	r2, [pc, #136]	@ (80055e8 <TIM_OC3_SetConfig+0xe4>)
 800555e:	4293      	cmp	r3, r2
 8005560:	d003      	beq.n	800556a <TIM_OC3_SetConfig+0x66>
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	4a21      	ldr	r2, [pc, #132]	@ (80055ec <TIM_OC3_SetConfig+0xe8>)
 8005566:	4293      	cmp	r3, r2
 8005568:	d10d      	bne.n	8005586 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800556a:	697b      	ldr	r3, [r7, #20]
 800556c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005570:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	68db      	ldr	r3, [r3, #12]
 8005576:	021b      	lsls	r3, r3, #8
 8005578:	697a      	ldr	r2, [r7, #20]
 800557a:	4313      	orrs	r3, r2
 800557c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005584:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	4a17      	ldr	r2, [pc, #92]	@ (80055e8 <TIM_OC3_SetConfig+0xe4>)
 800558a:	4293      	cmp	r3, r2
 800558c:	d003      	beq.n	8005596 <TIM_OC3_SetConfig+0x92>
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a16      	ldr	r2, [pc, #88]	@ (80055ec <TIM_OC3_SetConfig+0xe8>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d113      	bne.n	80055be <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800559c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80055a4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	695b      	ldr	r3, [r3, #20]
 80055aa:	011b      	lsls	r3, r3, #4
 80055ac:	693a      	ldr	r2, [r7, #16]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055b2:	683b      	ldr	r3, [r7, #0]
 80055b4:	699b      	ldr	r3, [r3, #24]
 80055b6:	011b      	lsls	r3, r3, #4
 80055b8:	693a      	ldr	r2, [r7, #16]
 80055ba:	4313      	orrs	r3, r2
 80055bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	693a      	ldr	r2, [r7, #16]
 80055c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	68fa      	ldr	r2, [r7, #12]
 80055c8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055ca:	683b      	ldr	r3, [r7, #0]
 80055cc:	685a      	ldr	r2, [r3, #4]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	697a      	ldr	r2, [r7, #20]
 80055d6:	621a      	str	r2, [r3, #32]
}
 80055d8:	bf00      	nop
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr
 80055e4:	fffeff8f 	.word	0xfffeff8f
 80055e8:	40010000 	.word	0x40010000
 80055ec:	40010400 	.word	0x40010400

080055f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80055f0:	b480      	push	{r7}
 80055f2:	b087      	sub	sp, #28
 80055f4:	af00      	add	r7, sp, #0
 80055f6:	6078      	str	r0, [r7, #4]
 80055f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	6a1b      	ldr	r3, [r3, #32]
 80055fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	6a1b      	ldr	r3, [r3, #32]
 8005604:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	69db      	ldr	r3, [r3, #28]
 8005616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005618:	68fa      	ldr	r2, [r7, #12]
 800561a:	4b1e      	ldr	r3, [pc, #120]	@ (8005694 <TIM_OC4_SetConfig+0xa4>)
 800561c:	4013      	ands	r3, r2
 800561e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005626:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005628:	683b      	ldr	r3, [r7, #0]
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	021b      	lsls	r3, r3, #8
 800562e:	68fa      	ldr	r2, [r7, #12]
 8005630:	4313      	orrs	r3, r2
 8005632:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005634:	693b      	ldr	r3, [r7, #16]
 8005636:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800563a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800563c:	683b      	ldr	r3, [r7, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	031b      	lsls	r3, r3, #12
 8005642:	693a      	ldr	r2, [r7, #16]
 8005644:	4313      	orrs	r3, r2
 8005646:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	4a13      	ldr	r2, [pc, #76]	@ (8005698 <TIM_OC4_SetConfig+0xa8>)
 800564c:	4293      	cmp	r3, r2
 800564e:	d003      	beq.n	8005658 <TIM_OC4_SetConfig+0x68>
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	4a12      	ldr	r2, [pc, #72]	@ (800569c <TIM_OC4_SetConfig+0xac>)
 8005654:	4293      	cmp	r3, r2
 8005656:	d109      	bne.n	800566c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005658:	697b      	ldr	r3, [r7, #20]
 800565a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800565e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	695b      	ldr	r3, [r3, #20]
 8005664:	019b      	lsls	r3, r3, #6
 8005666:	697a      	ldr	r2, [r7, #20]
 8005668:	4313      	orrs	r3, r2
 800566a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	697a      	ldr	r2, [r7, #20]
 8005670:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	68fa      	ldr	r2, [r7, #12]
 8005676:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	685a      	ldr	r2, [r3, #4]
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	693a      	ldr	r2, [r7, #16]
 8005684:	621a      	str	r2, [r3, #32]
}
 8005686:	bf00      	nop
 8005688:	371c      	adds	r7, #28
 800568a:	46bd      	mov	sp, r7
 800568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005690:	4770      	bx	lr
 8005692:	bf00      	nop
 8005694:	feff8fff 	.word	0xfeff8fff
 8005698:	40010000 	.word	0x40010000
 800569c:	40010400 	.word	0x40010400

080056a0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 80056a0:	b480      	push	{r7}
 80056a2:	b087      	sub	sp, #28
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
 80056a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	6a1b      	ldr	r3, [r3, #32]
 80056ae:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6a1b      	ldr	r3, [r3, #32]
 80056b4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	685b      	ldr	r3, [r3, #4]
 80056c0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80056c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80056c8:	68fa      	ldr	r2, [r7, #12]
 80056ca:	4b1b      	ldr	r3, [pc, #108]	@ (8005738 <TIM_OC5_SetConfig+0x98>)
 80056cc:	4013      	ands	r3, r2
 80056ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	68fa      	ldr	r2, [r7, #12]
 80056d6:	4313      	orrs	r3, r2
 80056d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80056da:	693b      	ldr	r3, [r7, #16]
 80056dc:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 80056e0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	689b      	ldr	r3, [r3, #8]
 80056e6:	041b      	lsls	r3, r3, #16
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	4313      	orrs	r3, r2
 80056ec:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	4a12      	ldr	r2, [pc, #72]	@ (800573c <TIM_OC5_SetConfig+0x9c>)
 80056f2:	4293      	cmp	r3, r2
 80056f4:	d003      	beq.n	80056fe <TIM_OC5_SetConfig+0x5e>
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	4a11      	ldr	r2, [pc, #68]	@ (8005740 <TIM_OC5_SetConfig+0xa0>)
 80056fa:	4293      	cmp	r3, r2
 80056fc:	d109      	bne.n	8005712 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80056fe:	697b      	ldr	r3, [r7, #20]
 8005700:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005704:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005706:	683b      	ldr	r3, [r7, #0]
 8005708:	695b      	ldr	r3, [r3, #20]
 800570a:	021b      	lsls	r3, r3, #8
 800570c:	697a      	ldr	r2, [r7, #20]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	68fa      	ldr	r2, [r7, #12]
 800571c:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	685a      	ldr	r2, [r3, #4]
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	693a      	ldr	r2, [r7, #16]
 800572a:	621a      	str	r2, [r3, #32]
}
 800572c:	bf00      	nop
 800572e:	371c      	adds	r7, #28
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr
 8005738:	fffeff8f 	.word	0xfffeff8f
 800573c:	40010000 	.word	0x40010000
 8005740:	40010400 	.word	0x40010400

08005744 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005744:	b480      	push	{r7}
 8005746:	b087      	sub	sp, #28
 8005748:	af00      	add	r7, sp, #0
 800574a:	6078      	str	r0, [r7, #4]
 800574c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	6a1b      	ldr	r3, [r3, #32]
 8005752:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	6a1b      	ldr	r3, [r3, #32]
 8005758:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800576a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	4b1c      	ldr	r3, [pc, #112]	@ (80057e0 <TIM_OC6_SetConfig+0x9c>)
 8005770:	4013      	ands	r3, r2
 8005772:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	021b      	lsls	r3, r3, #8
 800577a:	68fa      	ldr	r2, [r7, #12]
 800577c:	4313      	orrs	r3, r2
 800577e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005780:	693b      	ldr	r3, [r7, #16]
 8005782:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005786:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	689b      	ldr	r3, [r3, #8]
 800578c:	051b      	lsls	r3, r3, #20
 800578e:	693a      	ldr	r2, [r7, #16]
 8005790:	4313      	orrs	r3, r2
 8005792:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a13      	ldr	r2, [pc, #76]	@ (80057e4 <TIM_OC6_SetConfig+0xa0>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d003      	beq.n	80057a4 <TIM_OC6_SetConfig+0x60>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a12      	ldr	r2, [pc, #72]	@ (80057e8 <TIM_OC6_SetConfig+0xa4>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d109      	bne.n	80057b8 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80057a4:	697b      	ldr	r3, [r7, #20]
 80057a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80057aa:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	695b      	ldr	r3, [r3, #20]
 80057b0:	029b      	lsls	r3, r3, #10
 80057b2:	697a      	ldr	r2, [r7, #20]
 80057b4:	4313      	orrs	r3, r2
 80057b6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	697a      	ldr	r2, [r7, #20]
 80057bc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80057c4:	683b      	ldr	r3, [r7, #0]
 80057c6:	685a      	ldr	r2, [r3, #4]
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	693a      	ldr	r2, [r7, #16]
 80057d0:	621a      	str	r2, [r3, #32]
}
 80057d2:	bf00      	nop
 80057d4:	371c      	adds	r7, #28
 80057d6:	46bd      	mov	sp, r7
 80057d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057dc:	4770      	bx	lr
 80057de:	bf00      	nop
 80057e0:	feff8fff 	.word	0xfeff8fff
 80057e4:	40010000 	.word	0x40010000
 80057e8:	40010400 	.word	0x40010400

080057ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b087      	sub	sp, #28
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80057f8:	68bb      	ldr	r3, [r7, #8]
 80057fa:	f003 031f 	and.w	r3, r3, #31
 80057fe:	2201      	movs	r2, #1
 8005800:	fa02 f303 	lsl.w	r3, r2, r3
 8005804:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a1a      	ldr	r2, [r3, #32]
 800580a:	697b      	ldr	r3, [r7, #20]
 800580c:	43db      	mvns	r3, r3
 800580e:	401a      	ands	r2, r3
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a1a      	ldr	r2, [r3, #32]
 8005818:	68bb      	ldr	r3, [r7, #8]
 800581a:	f003 031f 	and.w	r3, r3, #31
 800581e:	6879      	ldr	r1, [r7, #4]
 8005820:	fa01 f303 	lsl.w	r3, r1, r3
 8005824:	431a      	orrs	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	621a      	str	r2, [r3, #32]
}
 800582a:	bf00      	nop
 800582c:	371c      	adds	r7, #28
 800582e:	46bd      	mov	sp, r7
 8005830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005834:	4770      	bx	lr
	...

08005838 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005838:	b480      	push	{r7}
 800583a:	b085      	sub	sp, #20
 800583c:	af00      	add	r7, sp, #0
 800583e:	6078      	str	r0, [r7, #4]
 8005840:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005842:	687b      	ldr	r3, [r7, #4]
 8005844:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005848:	2b01      	cmp	r3, #1
 800584a:	d101      	bne.n	8005850 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800584c:	2302      	movs	r3, #2
 800584e:	e06d      	b.n	800592c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	2201      	movs	r2, #1
 8005854:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	2202      	movs	r2, #2
 800585c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	685b      	ldr	r3, [r3, #4]
 8005866:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	689b      	ldr	r3, [r3, #8]
 800586e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	4a30      	ldr	r2, [pc, #192]	@ (8005938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8005876:	4293      	cmp	r3, r2
 8005878:	d004      	beq.n	8005884 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	681b      	ldr	r3, [r3, #0]
 800587e:	4a2f      	ldr	r2, [pc, #188]	@ (800593c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8005880:	4293      	cmp	r3, r2
 8005882:	d108      	bne.n	8005896 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800588a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	685b      	ldr	r3, [r3, #4]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800589c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	68fa      	ldr	r2, [r7, #12]
 80058a4:	4313      	orrs	r3, r2
 80058a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	68fa      	ldr	r2, [r7, #12]
 80058ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a20      	ldr	r2, [pc, #128]	@ (8005938 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80058b6:	4293      	cmp	r3, r2
 80058b8:	d022      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058c2:	d01d      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	4a1d      	ldr	r2, [pc, #116]	@ (8005940 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d018      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	4a1c      	ldr	r2, [pc, #112]	@ (8005944 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80058d4:	4293      	cmp	r3, r2
 80058d6:	d013      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a1a      	ldr	r2, [pc, #104]	@ (8005948 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d00e      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a15      	ldr	r2, [pc, #84]	@ (800593c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d009      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a16      	ldr	r2, [pc, #88]	@ (800594c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d004      	beq.n	8005900 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	4a15      	ldr	r2, [pc, #84]	@ (8005950 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058fc:	4293      	cmp	r3, r2
 80058fe:	d10c      	bne.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005900:	68bb      	ldr	r3, [r7, #8]
 8005902:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005906:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	689b      	ldr	r3, [r3, #8]
 800590c:	68ba      	ldr	r2, [r7, #8]
 800590e:	4313      	orrs	r3, r2
 8005910:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	68ba      	ldr	r2, [r7, #8]
 8005918:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2201      	movs	r2, #1
 800591e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800592a:	2300      	movs	r3, #0
}
 800592c:	4618      	mov	r0, r3
 800592e:	3714      	adds	r7, #20
 8005930:	46bd      	mov	sp, r7
 8005932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005936:	4770      	bx	lr
 8005938:	40010000 	.word	0x40010000
 800593c:	40010400 	.word	0x40010400
 8005940:	40000400 	.word	0x40000400
 8005944:	40000800 	.word	0x40000800
 8005948:	40000c00 	.word	0x40000c00
 800594c:	40014000 	.word	0x40014000
 8005950:	40001800 	.word	0x40001800

08005954 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005954:	b480      	push	{r7}
 8005956:	b083      	sub	sp, #12
 8005958:	af00      	add	r7, sp, #0
 800595a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800595c:	bf00      	nop
 800595e:	370c      	adds	r7, #12
 8005960:	46bd      	mov	sp, r7
 8005962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005966:	4770      	bx	lr

08005968 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005968:	b480      	push	{r7}
 800596a:	b083      	sub	sp, #12
 800596c:	af00      	add	r7, sp, #0
 800596e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005970:	bf00      	nop
 8005972:	370c      	adds	r7, #12
 8005974:	46bd      	mov	sp, r7
 8005976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800597a:	4770      	bx	lr

0800597c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800597c:	b480      	push	{r7}
 800597e:	b083      	sub	sp, #12
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005984:	bf00      	nop
 8005986:	370c      	adds	r7, #12
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr

08005990 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005990:	b580      	push	{r7, lr}
 8005992:	b082      	sub	sp, #8
 8005994:	af00      	add	r7, sp, #0
 8005996:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2b00      	cmp	r3, #0
 800599c:	d101      	bne.n	80059a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800599e:	2301      	movs	r3, #1
 80059a0:	e040      	b.n	8005a24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d106      	bne.n	80059b8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2200      	movs	r2, #0
 80059ae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80059b2:	6878      	ldr	r0, [r7, #4]
 80059b4:	f7fc f9ee 	bl	8001d94 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	2224      	movs	r2, #36	@ 0x24
 80059bc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	681a      	ldr	r2, [r3, #0]
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f022 0201 	bic.w	r2, r2, #1
 80059cc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d002      	beq.n	80059dc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f000 fff0 	bl	80069bc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80059dc:	6878      	ldr	r0, [r7, #4]
 80059de:	f000 fd89 	bl	80064f4 <UART_SetConfig>
 80059e2:	4603      	mov	r3, r0
 80059e4:	2b01      	cmp	r3, #1
 80059e6:	d101      	bne.n	80059ec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80059e8:	2301      	movs	r3, #1
 80059ea:	e01b      	b.n	8005a24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	685a      	ldr	r2, [r3, #4]
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80059fa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	689a      	ldr	r2, [r3, #8]
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005a0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	681a      	ldr	r2, [r3, #0]
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f042 0201 	orr.w	r2, r2, #1
 8005a1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005a1c:	6878      	ldr	r0, [r7, #4]
 8005a1e:	f001 f86f 	bl	8006b00 <UART_CheckIdleState>
 8005a22:	4603      	mov	r3, r0
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	3708      	adds	r7, #8
 8005a28:	46bd      	mov	sp, r7
 8005a2a:	bd80      	pop	{r7, pc}

08005a2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005a2c:	b580      	push	{r7, lr}
 8005a2e:	b08a      	sub	sp, #40	@ 0x28
 8005a30:	af02      	add	r7, sp, #8
 8005a32:	60f8      	str	r0, [r7, #12]
 8005a34:	60b9      	str	r1, [r7, #8]
 8005a36:	603b      	str	r3, [r7, #0]
 8005a38:	4613      	mov	r3, r2
 8005a3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005a40:	2b20      	cmp	r3, #32
 8005a42:	d177      	bne.n	8005b34 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8005a44:	68bb      	ldr	r3, [r7, #8]
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d002      	beq.n	8005a50 <HAL_UART_Transmit+0x24>
 8005a4a:	88fb      	ldrh	r3, [r7, #6]
 8005a4c:	2b00      	cmp	r3, #0
 8005a4e:	d101      	bne.n	8005a54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8005a50:	2301      	movs	r3, #1
 8005a52:	e070      	b.n	8005b36 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	2200      	movs	r2, #0
 8005a58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	2221      	movs	r2, #33	@ 0x21
 8005a60:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005a62:	f7fc fbd1 	bl	8002208 <HAL_GetTick>
 8005a66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	88fa      	ldrh	r2, [r7, #6]
 8005a6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	88fa      	ldrh	r2, [r7, #6]
 8005a74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	689b      	ldr	r3, [r3, #8]
 8005a7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a80:	d108      	bne.n	8005a94 <HAL_UART_Transmit+0x68>
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	691b      	ldr	r3, [r3, #16]
 8005a86:	2b00      	cmp	r3, #0
 8005a88:	d104      	bne.n	8005a94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8005a8a:	2300      	movs	r3, #0
 8005a8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005a8e:	68bb      	ldr	r3, [r7, #8]
 8005a90:	61bb      	str	r3, [r7, #24]
 8005a92:	e003      	b.n	8005a9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8005a94:	68bb      	ldr	r3, [r7, #8]
 8005a96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005a98:	2300      	movs	r3, #0
 8005a9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005a9c:	e02f      	b.n	8005afe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005a9e:	683b      	ldr	r3, [r7, #0]
 8005aa0:	9300      	str	r3, [sp, #0]
 8005aa2:	697b      	ldr	r3, [r7, #20]
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	2180      	movs	r1, #128	@ 0x80
 8005aa8:	68f8      	ldr	r0, [r7, #12]
 8005aaa:	f001 f8d1 	bl	8006c50 <UART_WaitOnFlagUntilTimeout>
 8005aae:	4603      	mov	r3, r0
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d004      	beq.n	8005abe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2220      	movs	r2, #32
 8005ab8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8005aba:	2303      	movs	r3, #3
 8005abc:	e03b      	b.n	8005b36 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8005abe:	69fb      	ldr	r3, [r7, #28]
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d10b      	bne.n	8005adc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005ac4:	69bb      	ldr	r3, [r7, #24]
 8005ac6:	881b      	ldrh	r3, [r3, #0]
 8005ac8:	461a      	mov	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ad2:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	3302      	adds	r3, #2
 8005ad8:	61bb      	str	r3, [r7, #24]
 8005ada:	e007      	b.n	8005aec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005adc:	69fb      	ldr	r3, [r7, #28]
 8005ade:	781a      	ldrb	r2, [r3, #0]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005ae6:	69fb      	ldr	r3, [r7, #28]
 8005ae8:	3301      	adds	r3, #1
 8005aea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005af2:	b29b      	uxth	r3, r3
 8005af4:	3b01      	subs	r3, #1
 8005af6:	b29a      	uxth	r2, r3
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8005b04:	b29b      	uxth	r3, r3
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1c9      	bne.n	8005a9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005b0a:	683b      	ldr	r3, [r7, #0]
 8005b0c:	9300      	str	r3, [sp, #0]
 8005b0e:	697b      	ldr	r3, [r7, #20]
 8005b10:	2200      	movs	r2, #0
 8005b12:	2140      	movs	r1, #64	@ 0x40
 8005b14:	68f8      	ldr	r0, [r7, #12]
 8005b16:	f001 f89b 	bl	8006c50 <UART_WaitOnFlagUntilTimeout>
 8005b1a:	4603      	mov	r3, r0
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d004      	beq.n	8005b2a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	2220      	movs	r2, #32
 8005b24:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8005b26:	2303      	movs	r3, #3
 8005b28:	e005      	b.n	8005b36 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	2220      	movs	r2, #32
 8005b2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8005b30:	2300      	movs	r3, #0
 8005b32:	e000      	b.n	8005b36 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8005b34:	2302      	movs	r3, #2
  }
}
 8005b36:	4618      	mov	r0, r3
 8005b38:	3720      	adds	r7, #32
 8005b3a:	46bd      	mov	sp, r7
 8005b3c:	bd80      	pop	{r7, pc}
	...

08005b40 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 8005b40:	b580      	push	{r7, lr}
 8005b42:	b08a      	sub	sp, #40	@ 0x28
 8005b44:	af00      	add	r7, sp, #0
 8005b46:	60f8      	str	r0, [r7, #12]
 8005b48:	60b9      	str	r1, [r7, #8]
 8005b4a:	4613      	mov	r3, r2
 8005b4c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b4e:	68fb      	ldr	r3, [r7, #12]
 8005b50:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8005b52:	2b20      	cmp	r3, #32
 8005b54:	d165      	bne.n	8005c22 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b56:	68bb      	ldr	r3, [r7, #8]
 8005b58:	2b00      	cmp	r3, #0
 8005b5a:	d002      	beq.n	8005b62 <HAL_UART_Transmit_DMA+0x22>
 8005b5c:	88fb      	ldrh	r3, [r7, #6]
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d101      	bne.n	8005b66 <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 8005b62:	2301      	movs	r3, #1
 8005b64:	e05e      	b.n	8005c24 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	68ba      	ldr	r2, [r7, #8]
 8005b6a:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	88fa      	ldrh	r2, [r7, #6]
 8005b70:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	88fa      	ldrh	r2, [r7, #6]
 8005b78:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	2200      	movs	r2, #0
 8005b80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	2221      	movs	r2, #33	@ 0x21
 8005b88:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d027      	beq.n	8005be2 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b96:	4a25      	ldr	r2, [pc, #148]	@ (8005c2c <HAL_UART_Transmit_DMA+0xec>)
 8005b98:	63da      	str	r2, [r3, #60]	@ 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
 8005b9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005b9e:	4a24      	ldr	r2, [pc, #144]	@ (8005c30 <HAL_UART_Transmit_DMA+0xf0>)
 8005ba0:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005ba6:	4a23      	ldr	r2, [pc, #140]	@ (8005c34 <HAL_UART_Transmit_DMA+0xf4>)
 8005ba8:	64da      	str	r2, [r3, #76]	@ 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005bae:	2200      	movs	r2, #0
 8005bb0:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 8005bb2:	68fb      	ldr	r3, [r7, #12]
 8005bb4:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005bba:	4619      	mov	r1, r3
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	3328      	adds	r3, #40	@ 0x28
 8005bc2:	461a      	mov	r2, r3
 8005bc4:	88fb      	ldrh	r3, [r7, #6]
 8005bc6:	f7fc fd0f 	bl	80025e8 <HAL_DMA_Start_IT>
 8005bca:	4603      	mov	r3, r0
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d008      	beq.n	8005be2 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005bd0:	68fb      	ldr	r3, [r7, #12]
 8005bd2:	2210      	movs	r2, #16
 8005bd4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	2220      	movs	r2, #32
 8005bdc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8005bde:	2301      	movs	r3, #1
 8005be0:	e020      	b.n	8005c24 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	2240      	movs	r2, #64	@ 0x40
 8005be8:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	3308      	adds	r3, #8
 8005bf0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bf2:	697b      	ldr	r3, [r7, #20]
 8005bf4:	e853 3f00 	ldrex	r3, [r3]
 8005bf8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bfa:	693b      	ldr	r3, [r7, #16]
 8005bfc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c00:	627b      	str	r3, [r7, #36]	@ 0x24
 8005c02:	68fb      	ldr	r3, [r7, #12]
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	3308      	adds	r3, #8
 8005c08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c0a:	623a      	str	r2, [r7, #32]
 8005c0c:	61fb      	str	r3, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c0e:	69f9      	ldr	r1, [r7, #28]
 8005c10:	6a3a      	ldr	r2, [r7, #32]
 8005c12:	e841 2300 	strex	r3, r2, [r1]
 8005c16:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c18:	69bb      	ldr	r3, [r7, #24]
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d1e5      	bne.n	8005bea <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 8005c1e:	2300      	movs	r3, #0
 8005c20:	e000      	b.n	8005c24 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 8005c22:	2302      	movs	r3, #2
  }
}
 8005c24:	4618      	mov	r0, r3
 8005c26:	3728      	adds	r7, #40	@ 0x28
 8005c28:	46bd      	mov	sp, r7
 8005c2a:	bd80      	pop	{r7, pc}
 8005c2c:	08006f81 	.word	0x08006f81
 8005c30:	08007017 	.word	0x08007017
 8005c34:	08007199 	.word	0x08007199

08005c38 <HAL_UART_AbortTransmit>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortTransmit(UART_HandleTypeDef *huart)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b08e      	sub	sp, #56	@ 0x38
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c46:	6a3b      	ldr	r3, [r7, #32]
 8005c48:	e853 3f00 	ldrex	r3, [r3]
 8005c4c:	61fb      	str	r3, [r7, #28]
   return(result);
 8005c4e:	69fb      	ldr	r3, [r7, #28]
 8005c50:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8005c54:	637b      	str	r3, [r7, #52]	@ 0x34
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	461a      	mov	r2, r3
 8005c5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005c60:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c62:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005c64:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005c66:	e841 2300 	strex	r3, r2, [r1]
 8005c6a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d1e6      	bne.n	8005c40 <HAL_UART_AbortTransmit+0x8>

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	689b      	ldr	r3, [r3, #8]
 8005c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005c7c:	2b80      	cmp	r3, #128	@ 0x80
 8005c7e:	d137      	bne.n	8005cf0 <HAL_UART_AbortTransmit+0xb8>
  {
    /* Disable the UART DMA Tx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	3308      	adds	r3, #8
 8005c86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	e853 3f00 	ldrex	r3, [r3]
 8005c8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c90:	68bb      	ldr	r3, [r7, #8]
 8005c92:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005c96:	633b      	str	r3, [r7, #48]	@ 0x30
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	681b      	ldr	r3, [r3, #0]
 8005c9c:	3308      	adds	r3, #8
 8005c9e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ca0:	61ba      	str	r2, [r7, #24]
 8005ca2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca4:	6979      	ldr	r1, [r7, #20]
 8005ca6:	69ba      	ldr	r2, [r7, #24]
 8005ca8:	e841 2300 	strex	r3, r2, [r1]
 8005cac:	613b      	str	r3, [r7, #16]
   return(result);
 8005cae:	693b      	ldr	r3, [r7, #16]
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d1e5      	bne.n	8005c80 <HAL_UART_AbortTransmit+0x48>

    /* Abort the UART DMA Tx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmatx != NULL)
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d019      	beq.n	8005cf0 <HAL_UART_AbortTransmit+0xb8>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmatx->XferAbortCallback = NULL;
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc0:	2200      	movs	r2, #0
 8005cc2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmatx) != HAL_OK)
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f7fc fced 	bl	80026a8 <HAL_DMA_Abort>
 8005cce:	4603      	mov	r3, r0
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d00d      	beq.n	8005cf0 <HAL_UART_AbortTransmit+0xb8>
      {
        if (HAL_DMA_GetError(huart->hdmatx) == HAL_DMA_ERROR_TIMEOUT)
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005cd8:	4618      	mov	r0, r3
 8005cda:	f7fc ff01 	bl	8002ae0 <HAL_DMA_GetError>
 8005cde:	4603      	mov	r3, r0
 8005ce0:	2b20      	cmp	r3, #32
 8005ce2:	d105      	bne.n	8005cf0 <HAL_UART_AbortTransmit+0xb8>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	2210      	movs	r2, #16
 8005ce8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005cec:	2303      	movs	r3, #3
 8005cee:	e007      	b.n	8005d00 <HAL_UART_AbortTransmit+0xc8>
      }
    }
  }

  /* Reset Tx transfer counter */
  huart->TxXferCount = 0U;
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52


  /* Restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005cf8:	687b      	ldr	r3, [r7, #4]
 8005cfa:	2220      	movs	r2, #32
 8005cfc:	67da      	str	r2, [r3, #124]	@ 0x7c

  return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
}
 8005d00:	4618      	mov	r0, r3
 8005d02:	3738      	adds	r7, #56	@ 0x38
 8005d04:	46bd      	mov	sp, r7
 8005d06:	bd80      	pop	{r7, pc}

08005d08 <HAL_UART_AbortReceive>:
  *           - Set handle State to READY
  * @note   This procedure is executed in blocking mode : when exiting function, Abort is considered as completed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_AbortReceive(UART_HandleTypeDef *huart)
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b09a      	sub	sp, #104	@ 0x68
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d16:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005d18:	e853 3f00 	ldrex	r3, [r3]
 8005d1c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005d20:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005d24:	667b      	str	r3, [r7, #100]	@ 0x64
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005d2e:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d30:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d32:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8005d34:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8005d36:	e841 2300 	strex	r3, r2, [r1]
 8005d3a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005d3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d1e6      	bne.n	8005d10 <HAL_UART_AbortReceive+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	3308      	adds	r3, #8
 8005d48:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d4a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d4c:	e853 3f00 	ldrex	r3, [r3]
 8005d50:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005d52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d54:	f023 0301 	bic.w	r3, r3, #1
 8005d58:	663b      	str	r3, [r7, #96]	@ 0x60
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	681b      	ldr	r3, [r3, #0]
 8005d5e:	3308      	adds	r3, #8
 8005d60:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8005d62:	643a      	str	r2, [r7, #64]	@ 0x40
 8005d64:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d66:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005d68:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005d6a:	e841 2300 	strex	r3, r2, [r1]
 8005d6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d1e5      	bne.n	8005d42 <HAL_UART_AbortReceive+0x3a>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8005d7a:	2b01      	cmp	r3, #1
 8005d7c:	d118      	bne.n	8005db0 <HAL_UART_AbortReceive+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	6a3b      	ldr	r3, [r7, #32]
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005d8c:	69fb      	ldr	r3, [r7, #28]
 8005d8e:	f023 0310 	bic.w	r3, r3, #16
 8005d92:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	461a      	mov	r2, r3
 8005d9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005d9e:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005da2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005daa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e6      	bne.n	8005d7e <HAL_UART_AbortReceive+0x76>
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005dba:	2b40      	cmp	r3, #64	@ 0x40
 8005dbc:	d137      	bne.n	8005e2e <HAL_UART_AbortReceive+0x126>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	3308      	adds	r3, #8
 8005dc4:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	e853 3f00 	ldrex	r3, [r3]
 8005dcc:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dce:	68bb      	ldr	r3, [r7, #8]
 8005dd0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005dd4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	3308      	adds	r3, #8
 8005ddc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005dde:	61ba      	str	r2, [r7, #24]
 8005de0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005de2:	6979      	ldr	r1, [r7, #20]
 8005de4:	69ba      	ldr	r2, [r7, #24]
 8005de6:	e841 2300 	strex	r3, r2, [r1]
 8005dea:	613b      	str	r3, [r7, #16]
   return(result);
 8005dec:	693b      	ldr	r3, [r7, #16]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d1e5      	bne.n	8005dbe <HAL_UART_AbortReceive+0xb6>

    /* Abort the UART DMA Rx channel : use blocking DMA Abort API (no callback) */
    if (huart->hdmarx != NULL)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d019      	beq.n	8005e2e <HAL_UART_AbortReceive+0x126>
    {
      /* Set the UART DMA Abort callback to Null.
         No call back execution at end of DMA abort procedure */
      huart->hdmarx->XferAbortCallback = NULL;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005dfe:	2200      	movs	r2, #0
 8005e00:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort(huart->hdmarx) != HAL_OK)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e06:	4618      	mov	r0, r3
 8005e08:	f7fc fc4e 	bl	80026a8 <HAL_DMA_Abort>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	d00d      	beq.n	8005e2e <HAL_UART_AbortReceive+0x126>
      {
        if (HAL_DMA_GetError(huart->hdmarx) == HAL_DMA_ERROR_TIMEOUT)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005e16:	4618      	mov	r0, r3
 8005e18:	f7fc fe62 	bl	8002ae0 <HAL_DMA_GetError>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b20      	cmp	r3, #32
 8005e20:	d105      	bne.n	8005e2e <HAL_UART_AbortReceive+0x126>
        {
          /* Set error code to DMA */
          huart->ErrorCode = HAL_UART_ERROR_DMA;
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	2210      	movs	r2, #16
 8005e26:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005e2a:	2303      	movs	r3, #3
 8005e2c:	e017      	b.n	8005e5e <HAL_UART_AbortReceive+0x156>
      }
    }
  }

  /* Reset Rx transfer counter */
  huart->RxXferCount = 0U;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2200      	movs	r2, #0
 8005e32:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	220f      	movs	r2, #15
 8005e3c:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	681b      	ldr	r3, [r3, #0]
 8005e42:	699a      	ldr	r2, [r3, #24]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	f042 0208 	orr.w	r2, r2, #8
 8005e4c:	619a      	str	r2, [r3, #24]

  /* Restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	2220      	movs	r2, #32
 8005e52:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	2200      	movs	r2, #0
 8005e5a:	661a      	str	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8005e5c:	2300      	movs	r3, #0
}
 8005e5e:	4618      	mov	r0, r3
 8005e60:	3768      	adds	r7, #104	@ 0x68
 8005e62:	46bd      	mov	sp, r7
 8005e64:	bd80      	pop	{r7, pc}
	...

08005e68 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e68:	b580      	push	{r7, lr}
 8005e6a:	b0ba      	sub	sp, #232	@ 0xe8
 8005e6c:	af00      	add	r7, sp, #0
 8005e6e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	689b      	ldr	r3, [r3, #8]
 8005e8a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005e8e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005e92:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005e96:	4013      	ands	r3, r2
 8005e98:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005e9c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d115      	bne.n	8005ed0 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ea4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ea8:	f003 0320 	and.w	r3, r3, #32
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d00f      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8005eb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005eb4:	f003 0320 	and.w	r3, r3, #32
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d009      	beq.n	8005ed0 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8005ebc:	687b      	ldr	r3, [r7, #4]
 8005ebe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	f000 82ac 	beq.w	800641e <HAL_UART_IRQHandler+0x5b6>
      {
        huart->RxISR(huart);
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8005eca:	6878      	ldr	r0, [r7, #4]
 8005ecc:	4798      	blx	r3
      }
      return;
 8005ece:	e2a6      	b.n	800641e <HAL_UART_IRQHandler+0x5b6>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ed0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	f000 8117 	beq.w	8006108 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8005eda:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005ede:	f003 0301 	and.w	r3, r3, #1
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d106      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8005ee6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005eea:	4b85      	ldr	r3, [pc, #532]	@ (8006100 <HAL_UART_IRQHandler+0x298>)
 8005eec:	4013      	ands	r3, r2
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	f000 810a 	beq.w	8006108 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005ef4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ef8:	f003 0301 	and.w	r3, r3, #1
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d011      	beq.n	8005f24 <HAL_UART_IRQHandler+0xbc>
 8005f00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d00b      	beq.n	8005f24 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	2201      	movs	r2, #1
 8005f12:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f1a:	f043 0201 	orr.w	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f24:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f28:	f003 0302 	and.w	r3, r3, #2
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d011      	beq.n	8005f54 <HAL_UART_IRQHandler+0xec>
 8005f30:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f34:	f003 0301 	and.w	r3, r3, #1
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d00b      	beq.n	8005f54 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	2202      	movs	r2, #2
 8005f42:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f4a:	f043 0204 	orr.w	r2, r3, #4
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f58:	f003 0304 	and.w	r3, r3, #4
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d011      	beq.n	8005f84 <HAL_UART_IRQHandler+0x11c>
 8005f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f64:	f003 0301 	and.w	r3, r3, #1
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d00b      	beq.n	8005f84 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	681b      	ldr	r3, [r3, #0]
 8005f70:	2204      	movs	r2, #4
 8005f72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005f7a:	f043 0202 	orr.w	r2, r3, #2
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f88:	f003 0308 	and.w	r3, r3, #8
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d017      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f94:	f003 0320 	and.w	r3, r3, #32
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d105      	bne.n	8005fa8 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8005f9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fa0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d00b      	beq.n	8005fc0 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	681b      	ldr	r3, [r3, #0]
 8005fac:	2208      	movs	r2, #8
 8005fae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fb6:	f043 0208 	orr.w	r2, r3, #8
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fc4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d012      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x18a>
 8005fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fd0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00c      	beq.n	8005ff2 <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005fe0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005fe8:	f043 0220 	orr.w	r2, r3, #32
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	f000 8212 	beq.w	8006422 <HAL_UART_IRQHandler+0x5ba>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006002:	f003 0320 	and.w	r3, r3, #32
 8006006:	2b00      	cmp	r3, #0
 8006008:	d00d      	beq.n	8006026 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800600a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800600e:	f003 0320 	and.w	r3, r3, #32
 8006012:	2b00      	cmp	r3, #0
 8006014:	d007      	beq.n	8006026 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800601a:	2b00      	cmp	r3, #0
 800601c:	d003      	beq.n	8006026 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800602c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	689b      	ldr	r3, [r3, #8]
 8006036:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800603a:	2b40      	cmp	r3, #64	@ 0x40
 800603c:	d005      	beq.n	800604a <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800603e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006042:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006046:	2b00      	cmp	r3, #0
 8006048:	d04f      	beq.n	80060ea <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800604a:	6878      	ldr	r0, [r7, #4]
 800604c:	f000 ff34 	bl	8006eb8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800605a:	2b40      	cmp	r3, #64	@ 0x40
 800605c:	d141      	bne.n	80060e2 <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	3308      	adds	r3, #8
 8006064:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006068:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800606c:	e853 3f00 	ldrex	r3, [r3]
 8006070:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006074:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006078:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800607c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	3308      	adds	r3, #8
 8006086:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800608a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800608e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006092:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8006096:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800609a:	e841 2300 	strex	r3, r2, [r1]
 800609e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80060a2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80060a6:	2b00      	cmp	r3, #0
 80060a8:	d1d9      	bne.n	800605e <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d013      	beq.n	80060da <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060b6:	4a13      	ldr	r2, [pc, #76]	@ (8006104 <HAL_UART_IRQHandler+0x29c>)
 80060b8:	651a      	str	r2, [r3, #80]	@ 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060be:	4618      	mov	r0, r3
 80060c0:	f7fc fb62 	bl	8002788 <HAL_DMA_Abort_IT>
 80060c4:	4603      	mov	r3, r0
 80060c6:	2b00      	cmp	r3, #0
 80060c8:	d017      	beq.n	80060fa <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80060ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060d0:	687a      	ldr	r2, [r7, #4]
 80060d2:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80060d4:	4610      	mov	r0, r2
 80060d6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d8:	e00f      	b.n	80060fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060da:	6878      	ldr	r0, [r7, #4]
 80060dc:	f000 f9d4 	bl	8006488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e0:	e00b      	b.n	80060fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060e2:	6878      	ldr	r0, [r7, #4]
 80060e4:	f000 f9d0 	bl	8006488 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060e8:	e007      	b.n	80060fa <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060ea:	6878      	ldr	r0, [r7, #4]
 80060ec:	f000 f9cc 	bl	8006488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	2200      	movs	r2, #0
 80060f4:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 80060f8:	e193      	b.n	8006422 <HAL_UART_IRQHandler+0x5ba>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060fa:	bf00      	nop
    return;
 80060fc:	e191      	b.n	8006422 <HAL_UART_IRQHandler+0x5ba>
 80060fe:	bf00      	nop
 8006100:	04000120 	.word	0x04000120
 8006104:	08007217 	.word	0x08007217

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800610c:	2b01      	cmp	r3, #1
 800610e:	f040 814c 	bne.w	80063aa <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006116:	f003 0310 	and.w	r3, r3, #16
 800611a:	2b00      	cmp	r3, #0
 800611c:	f000 8145 	beq.w	80063aa <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006120:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006124:	f003 0310 	and.w	r3, r3, #16
 8006128:	2b00      	cmp	r3, #0
 800612a:	f000 813e 	beq.w	80063aa <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	2210      	movs	r2, #16
 8006134:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	689b      	ldr	r3, [r3, #8]
 800613c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006140:	2b40      	cmp	r3, #64	@ 0x40
 8006142:	f040 80b6 	bne.w	80062b2 <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006152:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006156:	2b00      	cmp	r3, #0
 8006158:	f000 8165 	beq.w	8006426 <HAL_UART_IRQHandler+0x5be>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8006162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006166:	429a      	cmp	r2, r3
 8006168:	f080 815d 	bcs.w	8006426 <HAL_UART_IRQHandler+0x5be>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006172:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006180:	f000 8086 	beq.w	8006290 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800618c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006190:	e853 3f00 	ldrex	r3, [r3]
 8006194:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8006198:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800619c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80061a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	681b      	ldr	r3, [r3, #0]
 80061a8:	461a      	mov	r2, r3
 80061aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80061ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80061b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061be:	e841 2300 	strex	r3, r2, [r1]
 80061c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d1da      	bne.n	8006184 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	3308      	adds	r3, #8
 80061d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061d8:	e853 3f00 	ldrex	r3, [r3]
 80061dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061e0:	f023 0301 	bic.w	r3, r3, #1
 80061e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	3308      	adds	r3, #8
 80061ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8006204:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e1      	bne.n	80061ce <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800621a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800621c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006220:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	3308      	adds	r3, #8
 800622a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 800622e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006230:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006232:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006234:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 800623c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e3      	bne.n	800620a <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2220      	movs	r2, #32
 8006246:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	2200      	movs	r2, #0
 800624e:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	681b      	ldr	r3, [r3, #0]
 8006254:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006256:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006258:	e853 3f00 	ldrex	r3, [r3]
 800625c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800625e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006260:	f023 0310 	bic.w	r3, r3, #16
 8006264:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	461a      	mov	r2, r3
 800626e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006272:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006274:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006276:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8006278:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800627a:	e841 2300 	strex	r3, r2, [r1]
 800627e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006280:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006282:	2b00      	cmp	r3, #0
 8006284:	d1e4      	bne.n	8006250 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800628a:	4618      	mov	r0, r3
 800628c:	f7fc fa0c 	bl	80026a8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062a2:	b29b      	uxth	r3, r3
 80062a4:	1ad3      	subs	r3, r2, r3
 80062a6:	b29b      	uxth	r3, r3
 80062a8:	4619      	mov	r1, r3
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f7fa fa7a 	bl	80007a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062b0:	e0b9      	b.n	8006426 <HAL_UART_IRQHandler+0x5be>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	1ad3      	subs	r3, r2, r3
 80062c2:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 80062cc:	b29b      	uxth	r3, r3
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	f000 80ab 	beq.w	800642a <HAL_UART_IRQHandler+0x5c2>
          && (nb_rx_data > 0U))
 80062d4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062d8:	2b00      	cmp	r3, #0
 80062da:	f000 80a6 	beq.w	800642a <HAL_UART_IRQHandler+0x5c2>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80062e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e6:	e853 3f00 	ldrex	r3, [r3]
 80062ea:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80062ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062ee:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80062f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	461a      	mov	r2, r3
 80062fc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006300:	647b      	str	r3, [r7, #68]	@ 0x44
 8006302:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006304:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006306:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006308:	e841 2300 	strex	r3, r2, [r1]
 800630c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800630e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006310:	2b00      	cmp	r3, #0
 8006312:	d1e4      	bne.n	80062de <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	3308      	adds	r3, #8
 800631a:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800631c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800631e:	e853 3f00 	ldrex	r3, [r3]
 8006322:	623b      	str	r3, [r7, #32]
   return(result);
 8006324:	6a3b      	ldr	r3, [r7, #32]
 8006326:	f023 0301 	bic.w	r3, r3, #1
 800632a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3308      	adds	r3, #8
 8006334:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006338:	633a      	str	r2, [r7, #48]	@ 0x30
 800633a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800633c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800633e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006340:	e841 2300 	strex	r3, r2, [r1]
 8006344:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006346:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006348:	2b00      	cmp	r3, #0
 800634a:	d1e3      	bne.n	8006314 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2220      	movs	r2, #32
 8006350:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2200      	movs	r2, #0
 8006358:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	2200      	movs	r2, #0
 800635e:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	e853 3f00 	ldrex	r3, [r3]
 800636c:	60fb      	str	r3, [r7, #12]
   return(result);
 800636e:	68fb      	ldr	r3, [r7, #12]
 8006370:	f023 0310 	bic.w	r3, r3, #16
 8006374:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	681b      	ldr	r3, [r3, #0]
 800637c:	461a      	mov	r2, r3
 800637e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006382:	61fb      	str	r3, [r7, #28]
 8006384:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006386:	69b9      	ldr	r1, [r7, #24]
 8006388:	69fa      	ldr	r2, [r7, #28]
 800638a:	e841 2300 	strex	r3, r2, [r1]
 800638e:	617b      	str	r3, [r7, #20]
   return(result);
 8006390:	697b      	ldr	r3, [r7, #20]
 8006392:	2b00      	cmp	r3, #0
 8006394:	d1e4      	bne.n	8006360 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2202      	movs	r2, #2
 800639a:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800639c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063a0:	4619      	mov	r1, r3
 80063a2:	6878      	ldr	r0, [r7, #4]
 80063a4:	f7fa f9fe 	bl	80007a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063a8:	e03f      	b.n	800642a <HAL_UART_IRQHandler+0x5c2>
  }
#if defined(USART_CR1_UESM)
#if defined(USART_CR3_WUFIE)

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063aa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ae:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80063b2:	2b00      	cmp	r3, #0
 80063b4:	d00e      	beq.n	80063d4 <HAL_UART_IRQHandler+0x56c>
 80063b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80063ba:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d008      	beq.n	80063d4 <HAL_UART_IRQHandler+0x56c>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80063ca:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 f865 	bl	800649c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80063d2:	e02d      	b.n	8006430 <HAL_UART_IRQHandler+0x5c8>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 80063d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d00e      	beq.n	80063fe <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 80063e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d008      	beq.n	80063fe <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d01c      	beq.n	800642e <HAL_UART_IRQHandler+0x5c6>
    {
      huart->TxISR(huart);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80063f8:	6878      	ldr	r0, [r7, #4]
 80063fa:	4798      	blx	r3
    }
    return;
 80063fc:	e017      	b.n	800642e <HAL_UART_IRQHandler+0x5c6>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80063fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006402:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006406:	2b00      	cmp	r3, #0
 8006408:	d012      	beq.n	8006430 <HAL_UART_IRQHandler+0x5c8>
 800640a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800640e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	d00c      	beq.n	8006430 <HAL_UART_IRQHandler+0x5c8>
  {
    UART_EndTransmit_IT(huart);
 8006416:	6878      	ldr	r0, [r7, #4]
 8006418:	f000 ff13 	bl	8007242 <UART_EndTransmit_IT>
    return;
 800641c:	e008      	b.n	8006430 <HAL_UART_IRQHandler+0x5c8>
      return;
 800641e:	bf00      	nop
 8006420:	e006      	b.n	8006430 <HAL_UART_IRQHandler+0x5c8>
    return;
 8006422:	bf00      	nop
 8006424:	e004      	b.n	8006430 <HAL_UART_IRQHandler+0x5c8>
      return;
 8006426:	bf00      	nop
 8006428:	e002      	b.n	8006430 <HAL_UART_IRQHandler+0x5c8>
      return;
 800642a:	bf00      	nop
 800642c:	e000      	b.n	8006430 <HAL_UART_IRQHandler+0x5c8>
    return;
 800642e:	bf00      	nop
  }

}
 8006430:	37e8      	adds	r7, #232	@ 0xe8
 8006432:	46bd      	mov	sp, r7
 8006434:	bd80      	pop	{r7, pc}
 8006436:	bf00      	nop

08006438 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006440:	bf00      	nop
 8006442:	370c      	adds	r7, #12
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr

0800644c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800644c:	b480      	push	{r7}
 800644e:	b083      	sub	sp, #12
 8006450:	af00      	add	r7, sp, #0
 8006452:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8006454:	bf00      	nop
 8006456:	370c      	adds	r7, #12
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <HAL_UART_RxCpltCallback>:
  * @brief  Rx Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8006460:	b480      	push	{r7}
 8006462:	b083      	sub	sp, #12
 8006464:	af00      	add	r7, sp, #0
 8006466:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_RxCpltCallback can be implemented in the user file.
   */
}
 8006468:	bf00      	nop
 800646a:	370c      	adds	r7, #12
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8006474:	b480      	push	{r7}
 8006476:	b083      	sub	sp, #12
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800647c:	bf00      	nop
 800647e:	370c      	adds	r7, #12
 8006480:	46bd      	mov	sp, r7
 8006482:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006486:	4770      	bx	lr

08006488 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006488:	b480      	push	{r7}
 800648a:	b083      	sub	sp, #12
 800648c:	af00      	add	r7, sp, #0
 800648e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006490:	bf00      	nop
 8006492:	370c      	adds	r7, #12
 8006494:	46bd      	mov	sp, r7
 8006496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800649a:	4770      	bx	lr

0800649c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800649c:	b480      	push	{r7}
 800649e:	b083      	sub	sp, #12
 80064a0:	af00      	add	r7, sp, #0
 80064a2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80064a4:	bf00      	nop
 80064a6:	370c      	adds	r7, #12
 80064a8:	46bd      	mov	sp, r7
 80064aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ae:	4770      	bx	lr

080064b0 <HAL_UART_GetState>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval HAL state
  */
HAL_UART_StateTypeDef HAL_UART_GetState(const UART_HandleTypeDef *huart)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b085      	sub	sp, #20
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  uint32_t temp1;
  uint32_t temp2;
  temp1 = huart->gState;
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80064bc:	60fb      	str	r3, [r7, #12]
  temp2 = huart->RxState;
 80064be:	687b      	ldr	r3, [r7, #4]
 80064c0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80064c4:	60bb      	str	r3, [r7, #8]

  return (HAL_UART_StateTypeDef)(temp1 | temp2);
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	4313      	orrs	r3, r2
}
 80064cc:	4618      	mov	r0, r3
 80064ce:	3714      	adds	r7, #20
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_UART_GetError>:
  * @param  huart Pointer to a UART_HandleTypeDef structure that contains
  *               the configuration information for the specified UART.
  * @retval UART Error Code
  */
uint32_t HAL_UART_GetError(const UART_HandleTypeDef *huart)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
  return huart->ErrorCode;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
}
 80064e6:	4618      	mov	r0, r3
 80064e8:	370c      	adds	r7, #12
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
	...

080064f4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f4:	b580      	push	{r7, lr}
 80064f6:	b088      	sub	sp, #32
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	431a      	orrs	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	431a      	orrs	r2, r3
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	4313      	orrs	r3, r2
 8006516:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4ba6      	ldr	r3, [pc, #664]	@ (80067b8 <UART_SetConfig+0x2c4>)
 8006520:	4013      	ands	r3, r2
 8006522:	687a      	ldr	r2, [r7, #4]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	6979      	ldr	r1, [r7, #20]
 8006528:	430b      	orrs	r3, r1
 800652a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	6a1b      	ldr	r3, [r3, #32]
 800654c:	697a      	ldr	r2, [r7, #20]
 800654e:	4313      	orrs	r3, r2
 8006550:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	689b      	ldr	r3, [r3, #8]
 8006558:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	697a      	ldr	r2, [r7, #20]
 8006562:	430a      	orrs	r2, r1
 8006564:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a94      	ldr	r2, [pc, #592]	@ (80067bc <UART_SetConfig+0x2c8>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d120      	bne.n	80065b2 <UART_SetConfig+0xbe>
 8006570:	4b93      	ldr	r3, [pc, #588]	@ (80067c0 <UART_SetConfig+0x2cc>)
 8006572:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006576:	f003 0303 	and.w	r3, r3, #3
 800657a:	2b03      	cmp	r3, #3
 800657c:	d816      	bhi.n	80065ac <UART_SetConfig+0xb8>
 800657e:	a201      	add	r2, pc, #4	@ (adr r2, 8006584 <UART_SetConfig+0x90>)
 8006580:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006584:	08006595 	.word	0x08006595
 8006588:	080065a1 	.word	0x080065a1
 800658c:	0800659b 	.word	0x0800659b
 8006590:	080065a7 	.word	0x080065a7
 8006594:	2301      	movs	r3, #1
 8006596:	77fb      	strb	r3, [r7, #31]
 8006598:	e150      	b.n	800683c <UART_SetConfig+0x348>
 800659a:	2302      	movs	r3, #2
 800659c:	77fb      	strb	r3, [r7, #31]
 800659e:	e14d      	b.n	800683c <UART_SetConfig+0x348>
 80065a0:	2304      	movs	r3, #4
 80065a2:	77fb      	strb	r3, [r7, #31]
 80065a4:	e14a      	b.n	800683c <UART_SetConfig+0x348>
 80065a6:	2308      	movs	r3, #8
 80065a8:	77fb      	strb	r3, [r7, #31]
 80065aa:	e147      	b.n	800683c <UART_SetConfig+0x348>
 80065ac:	2310      	movs	r3, #16
 80065ae:	77fb      	strb	r3, [r7, #31]
 80065b0:	e144      	b.n	800683c <UART_SetConfig+0x348>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	681b      	ldr	r3, [r3, #0]
 80065b6:	4a83      	ldr	r2, [pc, #524]	@ (80067c4 <UART_SetConfig+0x2d0>)
 80065b8:	4293      	cmp	r3, r2
 80065ba:	d132      	bne.n	8006622 <UART_SetConfig+0x12e>
 80065bc:	4b80      	ldr	r3, [pc, #512]	@ (80067c0 <UART_SetConfig+0x2cc>)
 80065be:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80065c2:	f003 030c 	and.w	r3, r3, #12
 80065c6:	2b0c      	cmp	r3, #12
 80065c8:	d828      	bhi.n	800661c <UART_SetConfig+0x128>
 80065ca:	a201      	add	r2, pc, #4	@ (adr r2, 80065d0 <UART_SetConfig+0xdc>)
 80065cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d0:	08006605 	.word	0x08006605
 80065d4:	0800661d 	.word	0x0800661d
 80065d8:	0800661d 	.word	0x0800661d
 80065dc:	0800661d 	.word	0x0800661d
 80065e0:	08006611 	.word	0x08006611
 80065e4:	0800661d 	.word	0x0800661d
 80065e8:	0800661d 	.word	0x0800661d
 80065ec:	0800661d 	.word	0x0800661d
 80065f0:	0800660b 	.word	0x0800660b
 80065f4:	0800661d 	.word	0x0800661d
 80065f8:	0800661d 	.word	0x0800661d
 80065fc:	0800661d 	.word	0x0800661d
 8006600:	08006617 	.word	0x08006617
 8006604:	2300      	movs	r3, #0
 8006606:	77fb      	strb	r3, [r7, #31]
 8006608:	e118      	b.n	800683c <UART_SetConfig+0x348>
 800660a:	2302      	movs	r3, #2
 800660c:	77fb      	strb	r3, [r7, #31]
 800660e:	e115      	b.n	800683c <UART_SetConfig+0x348>
 8006610:	2304      	movs	r3, #4
 8006612:	77fb      	strb	r3, [r7, #31]
 8006614:	e112      	b.n	800683c <UART_SetConfig+0x348>
 8006616:	2308      	movs	r3, #8
 8006618:	77fb      	strb	r3, [r7, #31]
 800661a:	e10f      	b.n	800683c <UART_SetConfig+0x348>
 800661c:	2310      	movs	r3, #16
 800661e:	77fb      	strb	r3, [r7, #31]
 8006620:	e10c      	b.n	800683c <UART_SetConfig+0x348>
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	4a68      	ldr	r2, [pc, #416]	@ (80067c8 <UART_SetConfig+0x2d4>)
 8006628:	4293      	cmp	r3, r2
 800662a:	d120      	bne.n	800666e <UART_SetConfig+0x17a>
 800662c:	4b64      	ldr	r3, [pc, #400]	@ (80067c0 <UART_SetConfig+0x2cc>)
 800662e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006632:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006636:	2b30      	cmp	r3, #48	@ 0x30
 8006638:	d013      	beq.n	8006662 <UART_SetConfig+0x16e>
 800663a:	2b30      	cmp	r3, #48	@ 0x30
 800663c:	d814      	bhi.n	8006668 <UART_SetConfig+0x174>
 800663e:	2b20      	cmp	r3, #32
 8006640:	d009      	beq.n	8006656 <UART_SetConfig+0x162>
 8006642:	2b20      	cmp	r3, #32
 8006644:	d810      	bhi.n	8006668 <UART_SetConfig+0x174>
 8006646:	2b00      	cmp	r3, #0
 8006648:	d002      	beq.n	8006650 <UART_SetConfig+0x15c>
 800664a:	2b10      	cmp	r3, #16
 800664c:	d006      	beq.n	800665c <UART_SetConfig+0x168>
 800664e:	e00b      	b.n	8006668 <UART_SetConfig+0x174>
 8006650:	2300      	movs	r3, #0
 8006652:	77fb      	strb	r3, [r7, #31]
 8006654:	e0f2      	b.n	800683c <UART_SetConfig+0x348>
 8006656:	2302      	movs	r3, #2
 8006658:	77fb      	strb	r3, [r7, #31]
 800665a:	e0ef      	b.n	800683c <UART_SetConfig+0x348>
 800665c:	2304      	movs	r3, #4
 800665e:	77fb      	strb	r3, [r7, #31]
 8006660:	e0ec      	b.n	800683c <UART_SetConfig+0x348>
 8006662:	2308      	movs	r3, #8
 8006664:	77fb      	strb	r3, [r7, #31]
 8006666:	e0e9      	b.n	800683c <UART_SetConfig+0x348>
 8006668:	2310      	movs	r3, #16
 800666a:	77fb      	strb	r3, [r7, #31]
 800666c:	e0e6      	b.n	800683c <UART_SetConfig+0x348>
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	4a56      	ldr	r2, [pc, #344]	@ (80067cc <UART_SetConfig+0x2d8>)
 8006674:	4293      	cmp	r3, r2
 8006676:	d120      	bne.n	80066ba <UART_SetConfig+0x1c6>
 8006678:	4b51      	ldr	r3, [pc, #324]	@ (80067c0 <UART_SetConfig+0x2cc>)
 800667a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800667e:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8006682:	2bc0      	cmp	r3, #192	@ 0xc0
 8006684:	d013      	beq.n	80066ae <UART_SetConfig+0x1ba>
 8006686:	2bc0      	cmp	r3, #192	@ 0xc0
 8006688:	d814      	bhi.n	80066b4 <UART_SetConfig+0x1c0>
 800668a:	2b80      	cmp	r3, #128	@ 0x80
 800668c:	d009      	beq.n	80066a2 <UART_SetConfig+0x1ae>
 800668e:	2b80      	cmp	r3, #128	@ 0x80
 8006690:	d810      	bhi.n	80066b4 <UART_SetConfig+0x1c0>
 8006692:	2b00      	cmp	r3, #0
 8006694:	d002      	beq.n	800669c <UART_SetConfig+0x1a8>
 8006696:	2b40      	cmp	r3, #64	@ 0x40
 8006698:	d006      	beq.n	80066a8 <UART_SetConfig+0x1b4>
 800669a:	e00b      	b.n	80066b4 <UART_SetConfig+0x1c0>
 800669c:	2300      	movs	r3, #0
 800669e:	77fb      	strb	r3, [r7, #31]
 80066a0:	e0cc      	b.n	800683c <UART_SetConfig+0x348>
 80066a2:	2302      	movs	r3, #2
 80066a4:	77fb      	strb	r3, [r7, #31]
 80066a6:	e0c9      	b.n	800683c <UART_SetConfig+0x348>
 80066a8:	2304      	movs	r3, #4
 80066aa:	77fb      	strb	r3, [r7, #31]
 80066ac:	e0c6      	b.n	800683c <UART_SetConfig+0x348>
 80066ae:	2308      	movs	r3, #8
 80066b0:	77fb      	strb	r3, [r7, #31]
 80066b2:	e0c3      	b.n	800683c <UART_SetConfig+0x348>
 80066b4:	2310      	movs	r3, #16
 80066b6:	77fb      	strb	r3, [r7, #31]
 80066b8:	e0c0      	b.n	800683c <UART_SetConfig+0x348>
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	4a44      	ldr	r2, [pc, #272]	@ (80067d0 <UART_SetConfig+0x2dc>)
 80066c0:	4293      	cmp	r3, r2
 80066c2:	d125      	bne.n	8006710 <UART_SetConfig+0x21c>
 80066c4:	4b3e      	ldr	r3, [pc, #248]	@ (80067c0 <UART_SetConfig+0x2cc>)
 80066c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80066ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80066ce:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066d2:	d017      	beq.n	8006704 <UART_SetConfig+0x210>
 80066d4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80066d8:	d817      	bhi.n	800670a <UART_SetConfig+0x216>
 80066da:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066de:	d00b      	beq.n	80066f8 <UART_SetConfig+0x204>
 80066e0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80066e4:	d811      	bhi.n	800670a <UART_SetConfig+0x216>
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d003      	beq.n	80066f2 <UART_SetConfig+0x1fe>
 80066ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80066ee:	d006      	beq.n	80066fe <UART_SetConfig+0x20a>
 80066f0:	e00b      	b.n	800670a <UART_SetConfig+0x216>
 80066f2:	2300      	movs	r3, #0
 80066f4:	77fb      	strb	r3, [r7, #31]
 80066f6:	e0a1      	b.n	800683c <UART_SetConfig+0x348>
 80066f8:	2302      	movs	r3, #2
 80066fa:	77fb      	strb	r3, [r7, #31]
 80066fc:	e09e      	b.n	800683c <UART_SetConfig+0x348>
 80066fe:	2304      	movs	r3, #4
 8006700:	77fb      	strb	r3, [r7, #31]
 8006702:	e09b      	b.n	800683c <UART_SetConfig+0x348>
 8006704:	2308      	movs	r3, #8
 8006706:	77fb      	strb	r3, [r7, #31]
 8006708:	e098      	b.n	800683c <UART_SetConfig+0x348>
 800670a:	2310      	movs	r3, #16
 800670c:	77fb      	strb	r3, [r7, #31]
 800670e:	e095      	b.n	800683c <UART_SetConfig+0x348>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	4a2f      	ldr	r2, [pc, #188]	@ (80067d4 <UART_SetConfig+0x2e0>)
 8006716:	4293      	cmp	r3, r2
 8006718:	d125      	bne.n	8006766 <UART_SetConfig+0x272>
 800671a:	4b29      	ldr	r3, [pc, #164]	@ (80067c0 <UART_SetConfig+0x2cc>)
 800671c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006720:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006724:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006728:	d017      	beq.n	800675a <UART_SetConfig+0x266>
 800672a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800672e:	d817      	bhi.n	8006760 <UART_SetConfig+0x26c>
 8006730:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006734:	d00b      	beq.n	800674e <UART_SetConfig+0x25a>
 8006736:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800673a:	d811      	bhi.n	8006760 <UART_SetConfig+0x26c>
 800673c:	2b00      	cmp	r3, #0
 800673e:	d003      	beq.n	8006748 <UART_SetConfig+0x254>
 8006740:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006744:	d006      	beq.n	8006754 <UART_SetConfig+0x260>
 8006746:	e00b      	b.n	8006760 <UART_SetConfig+0x26c>
 8006748:	2301      	movs	r3, #1
 800674a:	77fb      	strb	r3, [r7, #31]
 800674c:	e076      	b.n	800683c <UART_SetConfig+0x348>
 800674e:	2302      	movs	r3, #2
 8006750:	77fb      	strb	r3, [r7, #31]
 8006752:	e073      	b.n	800683c <UART_SetConfig+0x348>
 8006754:	2304      	movs	r3, #4
 8006756:	77fb      	strb	r3, [r7, #31]
 8006758:	e070      	b.n	800683c <UART_SetConfig+0x348>
 800675a:	2308      	movs	r3, #8
 800675c:	77fb      	strb	r3, [r7, #31]
 800675e:	e06d      	b.n	800683c <UART_SetConfig+0x348>
 8006760:	2310      	movs	r3, #16
 8006762:	77fb      	strb	r3, [r7, #31]
 8006764:	e06a      	b.n	800683c <UART_SetConfig+0x348>
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	4a1b      	ldr	r2, [pc, #108]	@ (80067d8 <UART_SetConfig+0x2e4>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d138      	bne.n	80067e2 <UART_SetConfig+0x2ee>
 8006770:	4b13      	ldr	r3, [pc, #76]	@ (80067c0 <UART_SetConfig+0x2cc>)
 8006772:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006776:	f403 5340 	and.w	r3, r3, #12288	@ 0x3000
 800677a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800677e:	d017      	beq.n	80067b0 <UART_SetConfig+0x2bc>
 8006780:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006784:	d82a      	bhi.n	80067dc <UART_SetConfig+0x2e8>
 8006786:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800678a:	d00b      	beq.n	80067a4 <UART_SetConfig+0x2b0>
 800678c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006790:	d824      	bhi.n	80067dc <UART_SetConfig+0x2e8>
 8006792:	2b00      	cmp	r3, #0
 8006794:	d003      	beq.n	800679e <UART_SetConfig+0x2aa>
 8006796:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800679a:	d006      	beq.n	80067aa <UART_SetConfig+0x2b6>
 800679c:	e01e      	b.n	80067dc <UART_SetConfig+0x2e8>
 800679e:	2300      	movs	r3, #0
 80067a0:	77fb      	strb	r3, [r7, #31]
 80067a2:	e04b      	b.n	800683c <UART_SetConfig+0x348>
 80067a4:	2302      	movs	r3, #2
 80067a6:	77fb      	strb	r3, [r7, #31]
 80067a8:	e048      	b.n	800683c <UART_SetConfig+0x348>
 80067aa:	2304      	movs	r3, #4
 80067ac:	77fb      	strb	r3, [r7, #31]
 80067ae:	e045      	b.n	800683c <UART_SetConfig+0x348>
 80067b0:	2308      	movs	r3, #8
 80067b2:	77fb      	strb	r3, [r7, #31]
 80067b4:	e042      	b.n	800683c <UART_SetConfig+0x348>
 80067b6:	bf00      	nop
 80067b8:	efff69f3 	.word	0xefff69f3
 80067bc:	40011000 	.word	0x40011000
 80067c0:	40023800 	.word	0x40023800
 80067c4:	40004400 	.word	0x40004400
 80067c8:	40004800 	.word	0x40004800
 80067cc:	40004c00 	.word	0x40004c00
 80067d0:	40005000 	.word	0x40005000
 80067d4:	40011400 	.word	0x40011400
 80067d8:	40007800 	.word	0x40007800
 80067dc:	2310      	movs	r3, #16
 80067de:	77fb      	strb	r3, [r7, #31]
 80067e0:	e02c      	b.n	800683c <UART_SetConfig+0x348>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	4a72      	ldr	r2, [pc, #456]	@ (80069b0 <UART_SetConfig+0x4bc>)
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d125      	bne.n	8006838 <UART_SetConfig+0x344>
 80067ec:	4b71      	ldr	r3, [pc, #452]	@ (80069b4 <UART_SetConfig+0x4c0>)
 80067ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80067f2:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80067f6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80067fa:	d017      	beq.n	800682c <UART_SetConfig+0x338>
 80067fc:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8006800:	d817      	bhi.n	8006832 <UART_SetConfig+0x33e>
 8006802:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006806:	d00b      	beq.n	8006820 <UART_SetConfig+0x32c>
 8006808:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800680c:	d811      	bhi.n	8006832 <UART_SetConfig+0x33e>
 800680e:	2b00      	cmp	r3, #0
 8006810:	d003      	beq.n	800681a <UART_SetConfig+0x326>
 8006812:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006816:	d006      	beq.n	8006826 <UART_SetConfig+0x332>
 8006818:	e00b      	b.n	8006832 <UART_SetConfig+0x33e>
 800681a:	2300      	movs	r3, #0
 800681c:	77fb      	strb	r3, [r7, #31]
 800681e:	e00d      	b.n	800683c <UART_SetConfig+0x348>
 8006820:	2302      	movs	r3, #2
 8006822:	77fb      	strb	r3, [r7, #31]
 8006824:	e00a      	b.n	800683c <UART_SetConfig+0x348>
 8006826:	2304      	movs	r3, #4
 8006828:	77fb      	strb	r3, [r7, #31]
 800682a:	e007      	b.n	800683c <UART_SetConfig+0x348>
 800682c:	2308      	movs	r3, #8
 800682e:	77fb      	strb	r3, [r7, #31]
 8006830:	e004      	b.n	800683c <UART_SetConfig+0x348>
 8006832:	2310      	movs	r3, #16
 8006834:	77fb      	strb	r3, [r7, #31]
 8006836:	e001      	b.n	800683c <UART_SetConfig+0x348>
 8006838:	2310      	movs	r3, #16
 800683a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	69db      	ldr	r3, [r3, #28]
 8006840:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006844:	d15b      	bne.n	80068fe <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8006846:	7ffb      	ldrb	r3, [r7, #31]
 8006848:	2b08      	cmp	r3, #8
 800684a:	d828      	bhi.n	800689e <UART_SetConfig+0x3aa>
 800684c:	a201      	add	r2, pc, #4	@ (adr r2, 8006854 <UART_SetConfig+0x360>)
 800684e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006852:	bf00      	nop
 8006854:	08006879 	.word	0x08006879
 8006858:	08006881 	.word	0x08006881
 800685c:	08006889 	.word	0x08006889
 8006860:	0800689f 	.word	0x0800689f
 8006864:	0800688f 	.word	0x0800688f
 8006868:	0800689f 	.word	0x0800689f
 800686c:	0800689f 	.word	0x0800689f
 8006870:	0800689f 	.word	0x0800689f
 8006874:	08006897 	.word	0x08006897
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006878:	f7fd fa44 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 800687c:	61b8      	str	r0, [r7, #24]
        break;
 800687e:	e013      	b.n	80068a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006880:	f7fd fa54 	bl	8003d2c <HAL_RCC_GetPCLK2Freq>
 8006884:	61b8      	str	r0, [r7, #24]
        break;
 8006886:	e00f      	b.n	80068a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006888:	4b4b      	ldr	r3, [pc, #300]	@ (80069b8 <UART_SetConfig+0x4c4>)
 800688a:	61bb      	str	r3, [r7, #24]
        break;
 800688c:	e00c      	b.n	80068a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800688e:	f7fd f927 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 8006892:	61b8      	str	r0, [r7, #24]
        break;
 8006894:	e008      	b.n	80068a8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006896:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800689a:	61bb      	str	r3, [r7, #24]
        break;
 800689c:	e004      	b.n	80068a8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800689e:	2300      	movs	r3, #0
 80068a0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80068a2:	2301      	movs	r3, #1
 80068a4:	77bb      	strb	r3, [r7, #30]
        break;
 80068a6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80068a8:	69bb      	ldr	r3, [r7, #24]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d074      	beq.n	8006998 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80068ae:	69bb      	ldr	r3, [r7, #24]
 80068b0:	005a      	lsls	r2, r3, #1
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	685b      	ldr	r3, [r3, #4]
 80068b6:	085b      	lsrs	r3, r3, #1
 80068b8:	441a      	add	r2, r3
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	fbb2 f3f3 	udiv	r3, r2, r3
 80068c2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068c4:	693b      	ldr	r3, [r7, #16]
 80068c6:	2b0f      	cmp	r3, #15
 80068c8:	d916      	bls.n	80068f8 <UART_SetConfig+0x404>
 80068ca:	693b      	ldr	r3, [r7, #16]
 80068cc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068d0:	d212      	bcs.n	80068f8 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	b29b      	uxth	r3, r3
 80068d6:	f023 030f 	bic.w	r3, r3, #15
 80068da:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80068dc:	693b      	ldr	r3, [r7, #16]
 80068de:	085b      	lsrs	r3, r3, #1
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	f003 0307 	and.w	r3, r3, #7
 80068e6:	b29a      	uxth	r2, r3
 80068e8:	89fb      	ldrh	r3, [r7, #14]
 80068ea:	4313      	orrs	r3, r2
 80068ec:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	89fa      	ldrh	r2, [r7, #14]
 80068f4:	60da      	str	r2, [r3, #12]
 80068f6:	e04f      	b.n	8006998 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80068f8:	2301      	movs	r3, #1
 80068fa:	77bb      	strb	r3, [r7, #30]
 80068fc:	e04c      	b.n	8006998 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80068fe:	7ffb      	ldrb	r3, [r7, #31]
 8006900:	2b08      	cmp	r3, #8
 8006902:	d828      	bhi.n	8006956 <UART_SetConfig+0x462>
 8006904:	a201      	add	r2, pc, #4	@ (adr r2, 800690c <UART_SetConfig+0x418>)
 8006906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800690a:	bf00      	nop
 800690c:	08006931 	.word	0x08006931
 8006910:	08006939 	.word	0x08006939
 8006914:	08006941 	.word	0x08006941
 8006918:	08006957 	.word	0x08006957
 800691c:	08006947 	.word	0x08006947
 8006920:	08006957 	.word	0x08006957
 8006924:	08006957 	.word	0x08006957
 8006928:	08006957 	.word	0x08006957
 800692c:	0800694f 	.word	0x0800694f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006930:	f7fd f9e8 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8006934:	61b8      	str	r0, [r7, #24]
        break;
 8006936:	e013      	b.n	8006960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006938:	f7fd f9f8 	bl	8003d2c <HAL_RCC_GetPCLK2Freq>
 800693c:	61b8      	str	r0, [r7, #24]
        break;
 800693e:	e00f      	b.n	8006960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006940:	4b1d      	ldr	r3, [pc, #116]	@ (80069b8 <UART_SetConfig+0x4c4>)
 8006942:	61bb      	str	r3, [r7, #24]
        break;
 8006944:	e00c      	b.n	8006960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006946:	f7fd f8cb 	bl	8003ae0 <HAL_RCC_GetSysClockFreq>
 800694a:	61b8      	str	r0, [r7, #24]
        break;
 800694c:	e008      	b.n	8006960 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800694e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006952:	61bb      	str	r3, [r7, #24]
        break;
 8006954:	e004      	b.n	8006960 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8006956:	2300      	movs	r3, #0
 8006958:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800695a:	2301      	movs	r3, #1
 800695c:	77bb      	strb	r3, [r7, #30]
        break;
 800695e:	bf00      	nop
    }

    if (pclk != 0U)
 8006960:	69bb      	ldr	r3, [r7, #24]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d018      	beq.n	8006998 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	685b      	ldr	r3, [r3, #4]
 800696a:	085a      	lsrs	r2, r3, #1
 800696c:	69bb      	ldr	r3, [r7, #24]
 800696e:	441a      	add	r2, r3
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	fbb2 f3f3 	udiv	r3, r2, r3
 8006978:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800697a:	693b      	ldr	r3, [r7, #16]
 800697c:	2b0f      	cmp	r3, #15
 800697e:	d909      	bls.n	8006994 <UART_SetConfig+0x4a0>
 8006980:	693b      	ldr	r3, [r7, #16]
 8006982:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006986:	d205      	bcs.n	8006994 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	b29a      	uxth	r2, r3
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	681b      	ldr	r3, [r3, #0]
 8006990:	60da      	str	r2, [r3, #12]
 8006992:	e001      	b.n	8006998 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8006994:	2301      	movs	r3, #1
 8006996:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2200      	movs	r2, #0
 800699c:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2200      	movs	r2, #0
 80069a2:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 80069a4:	7fbb      	ldrb	r3, [r7, #30]
}
 80069a6:	4618      	mov	r0, r3
 80069a8:	3720      	adds	r7, #32
 80069aa:	46bd      	mov	sp, r7
 80069ac:	bd80      	pop	{r7, pc}
 80069ae:	bf00      	nop
 80069b0:	40007c00 	.word	0x40007c00
 80069b4:	40023800 	.word	0x40023800
 80069b8:	00f42400 	.word	0x00f42400

080069bc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80069bc:	b480      	push	{r7}
 80069be:	b083      	sub	sp, #12
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069c8:	f003 0308 	and.w	r3, r3, #8
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00a      	beq.n	80069e6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	681b      	ldr	r3, [r3, #0]
 80069d4:	685b      	ldr	r3, [r3, #4]
 80069d6:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80069da:	687b      	ldr	r3, [r7, #4]
 80069dc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069ea:	f003 0301 	and.w	r3, r3, #1
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d00a      	beq.n	8006a08 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	685b      	ldr	r3, [r3, #4]
 80069f8:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	430a      	orrs	r2, r1
 8006a06:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0c:	f003 0302 	and.w	r3, r3, #2
 8006a10:	2b00      	cmp	r3, #0
 8006a12:	d00a      	beq.n	8006a2a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	685b      	ldr	r3, [r3, #4]
 8006a1a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	430a      	orrs	r2, r1
 8006a28:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a2e:	f003 0304 	and.w	r3, r3, #4
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00a      	beq.n	8006a4c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006a44:	687b      	ldr	r3, [r7, #4]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	430a      	orrs	r2, r1
 8006a4a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a50:	f003 0310 	and.w	r3, r3, #16
 8006a54:	2b00      	cmp	r3, #0
 8006a56:	d00a      	beq.n	8006a6e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	689b      	ldr	r3, [r3, #8]
 8006a5e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	430a      	orrs	r2, r1
 8006a6c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a72:	f003 0320 	and.w	r3, r3, #32
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d00a      	beq.n	8006a90 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	681b      	ldr	r3, [r3, #0]
 8006a8c:	430a      	orrs	r2, r1
 8006a8e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006a90:	687b      	ldr	r3, [r7, #4]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a94:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d01a      	beq.n	8006ad2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	685b      	ldr	r3, [r3, #4]
 8006aa2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	430a      	orrs	r2, r1
 8006ab0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ab6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006aba:	d10a      	bne.n	8006ad2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	685b      	ldr	r3, [r3, #4]
 8006ac2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ad6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d00a      	beq.n	8006af4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	681b      	ldr	r3, [r3, #0]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	430a      	orrs	r2, r1
 8006af2:	605a      	str	r2, [r3, #4]
  }
}
 8006af4:	bf00      	nop
 8006af6:	370c      	adds	r7, #12
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr

08006b00 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006b00:	b580      	push	{r7, lr}
 8006b02:	b098      	sub	sp, #96	@ 0x60
 8006b04:	af02      	add	r7, sp, #8
 8006b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	2200      	movs	r2, #0
 8006b0c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006b10:	f7fb fb7a 	bl	8002208 <HAL_GetTick>
 8006b14:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 0308 	and.w	r3, r3, #8
 8006b20:	2b08      	cmp	r3, #8
 8006b22:	d12e      	bne.n	8006b82 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b24:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b28:	9300      	str	r3, [sp, #0]
 8006b2a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b2c:	2200      	movs	r2, #0
 8006b2e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 f88c 	bl	8006c50 <UART_WaitOnFlagUntilTimeout>
 8006b38:	4603      	mov	r3, r0
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d021      	beq.n	8006b82 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	681b      	ldr	r3, [r3, #0]
 8006b42:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006b46:	e853 3f00 	ldrex	r3, [r3]
 8006b4a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006b4c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006b4e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006b52:	653b      	str	r3, [r7, #80]	@ 0x50
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	461a      	mov	r2, r3
 8006b5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006b5c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006b5e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b60:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006b62:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006b64:	e841 2300 	strex	r3, r2, [r1]
 8006b68:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006b6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1e6      	bne.n	8006b3e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2220      	movs	r2, #32
 8006b74:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b7e:	2303      	movs	r3, #3
 8006b80:	e062      	b.n	8006c48 <UART_CheckIdleState+0x148>
    }
  }
#if defined(USART_ISR_REACK)

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	681b      	ldr	r3, [r3, #0]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	f003 0304 	and.w	r3, r3, #4
 8006b8c:	2b04      	cmp	r3, #4
 8006b8e:	d149      	bne.n	8006c24 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006b90:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006b94:	9300      	str	r3, [sp, #0]
 8006b96:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006b98:	2200      	movs	r2, #0
 8006b9a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006b9e:	6878      	ldr	r0, [r7, #4]
 8006ba0:	f000 f856 	bl	8006c50 <UART_WaitOnFlagUntilTimeout>
 8006ba4:	4603      	mov	r3, r0
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d03c      	beq.n	8006c24 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006bb2:	e853 3f00 	ldrex	r3, [r3]
 8006bb6:	623b      	str	r3, [r7, #32]
   return(result);
 8006bb8:	6a3b      	ldr	r3, [r7, #32]
 8006bba:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006bbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	461a      	mov	r2, r3
 8006bc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006bc8:	633b      	str	r3, [r7, #48]	@ 0x30
 8006bca:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bcc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006bce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bd0:	e841 2300 	strex	r3, r2, [r1]
 8006bd4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006bd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d1e6      	bne.n	8006baa <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	681b      	ldr	r3, [r3, #0]
 8006be0:	3308      	adds	r3, #8
 8006be2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006be4:	693b      	ldr	r3, [r7, #16]
 8006be6:	e853 3f00 	ldrex	r3, [r3]
 8006bea:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bec:	68fb      	ldr	r3, [r7, #12]
 8006bee:	f023 0301 	bic.w	r3, r3, #1
 8006bf2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	3308      	adds	r3, #8
 8006bfa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006bfc:	61fa      	str	r2, [r7, #28]
 8006bfe:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c00:	69b9      	ldr	r1, [r7, #24]
 8006c02:	69fa      	ldr	r2, [r7, #28]
 8006c04:	e841 2300 	strex	r3, r2, [r1]
 8006c08:	617b      	str	r3, [r7, #20]
   return(result);
 8006c0a:	697b      	ldr	r3, [r7, #20]
 8006c0c:	2b00      	cmp	r3, #0
 8006c0e:	d1e5      	bne.n	8006bdc <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2220      	movs	r2, #32
 8006c14:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	2200      	movs	r2, #0
 8006c1c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c20:	2303      	movs	r3, #3
 8006c22:	e011      	b.n	8006c48 <UART_CheckIdleState+0x148>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	2220      	movs	r2, #32
 8006c28:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2220      	movs	r2, #32
 8006c2e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	2200      	movs	r2, #0
 8006c36:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	2200      	movs	r2, #0
 8006c3c:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	2200      	movs	r2, #0
 8006c42:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8006c46:	2300      	movs	r3, #0
}
 8006c48:	4618      	mov	r0, r3
 8006c4a:	3758      	adds	r7, #88	@ 0x58
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	603b      	str	r3, [r7, #0]
 8006c5c:	4613      	mov	r3, r2
 8006c5e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c60:	e04f      	b.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c62:	69bb      	ldr	r3, [r7, #24]
 8006c64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c68:	d04b      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c6a:	f7fb facd 	bl	8002208 <HAL_GetTick>
 8006c6e:	4602      	mov	r2, r0
 8006c70:	683b      	ldr	r3, [r7, #0]
 8006c72:	1ad3      	subs	r3, r2, r3
 8006c74:	69ba      	ldr	r2, [r7, #24]
 8006c76:	429a      	cmp	r2, r3
 8006c78:	d302      	bcc.n	8006c80 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c7a:	69bb      	ldr	r3, [r7, #24]
 8006c7c:	2b00      	cmp	r3, #0
 8006c7e:	d101      	bne.n	8006c84 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006c80:	2303      	movs	r3, #3
 8006c82:	e04e      	b.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006c84:	68fb      	ldr	r3, [r7, #12]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f003 0304 	and.w	r3, r3, #4
 8006c8e:	2b00      	cmp	r3, #0
 8006c90:	d037      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c92:	68bb      	ldr	r3, [r7, #8]
 8006c94:	2b80      	cmp	r3, #128	@ 0x80
 8006c96:	d034      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006c98:	68bb      	ldr	r3, [r7, #8]
 8006c9a:	2b40      	cmp	r3, #64	@ 0x40
 8006c9c:	d031      	beq.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	69db      	ldr	r3, [r3, #28]
 8006ca4:	f003 0308 	and.w	r3, r3, #8
 8006ca8:	2b08      	cmp	r3, #8
 8006caa:	d110      	bne.n	8006cce <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	2208      	movs	r2, #8
 8006cb2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006cb4:	68f8      	ldr	r0, [r7, #12]
 8006cb6:	f000 f8ff 	bl	8006eb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	2208      	movs	r2, #8
 8006cbe:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cc2:	68fb      	ldr	r3, [r7, #12]
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8006cca:	2301      	movs	r3, #1
 8006ccc:	e029      	b.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	69db      	ldr	r3, [r3, #28]
 8006cd4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006cd8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006cdc:	d111      	bne.n	8006d02 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ce6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f8e5 	bl	8006eb8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	2220      	movs	r2, #32
 8006cf2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006cf6:	68fb      	ldr	r3, [r7, #12]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8006cfe:	2303      	movs	r3, #3
 8006d00:	e00f      	b.n	8006d22 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	69da      	ldr	r2, [r3, #28]
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	4013      	ands	r3, r2
 8006d0c:	68ba      	ldr	r2, [r7, #8]
 8006d0e:	429a      	cmp	r2, r3
 8006d10:	bf0c      	ite	eq
 8006d12:	2301      	moveq	r3, #1
 8006d14:	2300      	movne	r3, #0
 8006d16:	b2db      	uxtb	r3, r3
 8006d18:	461a      	mov	r2, r3
 8006d1a:	79fb      	ldrb	r3, [r7, #7]
 8006d1c:	429a      	cmp	r2, r3
 8006d1e:	d0a0      	beq.n	8006c62 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006d20:	2300      	movs	r3, #0
}
 8006d22:	4618      	mov	r0, r3
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
	...

08006d2c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d2c:	b580      	push	{r7, lr}
 8006d2e:	b096      	sub	sp, #88	@ 0x58
 8006d30:	af00      	add	r7, sp, #0
 8006d32:	60f8      	str	r0, [r7, #12]
 8006d34:	60b9      	str	r1, [r7, #8]
 8006d36:	4613      	mov	r3, r2
 8006d38:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	68ba      	ldr	r2, [r7, #8]
 8006d3e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	88fa      	ldrh	r2, [r7, #6]
 8006d44:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	2222      	movs	r2, #34	@ 0x22
 8006d54:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  if (huart->hdmarx != NULL)
 8006d58:	68fb      	ldr	r3, [r7, #12]
 8006d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d028      	beq.n	8006db2 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8006d60:	68fb      	ldr	r3, [r7, #12]
 8006d62:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d64:	4a3e      	ldr	r2, [pc, #248]	@ (8006e60 <UART_Start_Receive_DMA+0x134>)
 8006d66:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d6c:	4a3d      	ldr	r2, [pc, #244]	@ (8006e64 <UART_Start_Receive_DMA+0x138>)
 8006d6e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d74:	4a3c      	ldr	r2, [pc, #240]	@ (8006e68 <UART_Start_Receive_DMA+0x13c>)
 8006d76:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006d7c:	2200      	movs	r2, #0
 8006d7e:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	3324      	adds	r3, #36	@ 0x24
 8006d8a:	4619      	mov	r1, r3
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006d90:	461a      	mov	r2, r3
 8006d92:	88fb      	ldrh	r3, [r7, #6]
 8006d94:	f7fb fc28 	bl	80025e8 <HAL_DMA_Start_IT>
 8006d98:	4603      	mov	r3, r0
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d009      	beq.n	8006db2 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	2210      	movs	r2, #16
 8006da2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2220      	movs	r2, #32
 8006daa:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      return HAL_ERROR;
 8006dae:	2301      	movs	r3, #1
 8006db0:	e051      	b.n	8006e56 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d018      	beq.n	8006dec <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006dba:	68fb      	ldr	r3, [r7, #12]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dc0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006dc2:	e853 3f00 	ldrex	r3, [r3]
 8006dc6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006dc8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006dca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006dce:	657b      	str	r3, [r7, #84]	@ 0x54
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006dd8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006dda:	647a      	str	r2, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ddc:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8006dde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006de0:	e841 2300 	strex	r3, r2, [r1]
 8006de4:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8006de6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d1e6      	bne.n	8006dba <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	3308      	adds	r3, #8
 8006df2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006df6:	e853 3f00 	ldrex	r3, [r3]
 8006dfa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006dfc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006dfe:	f043 0301 	orr.w	r3, r3, #1
 8006e02:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	3308      	adds	r3, #8
 8006e0a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8006e0c:	637a      	str	r2, [r7, #52]	@ 0x34
 8006e0e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e10:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8006e12:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006e14:	e841 2300 	strex	r3, r2, [r1]
 8006e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8006e1a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d1e5      	bne.n	8006dec <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006e20:	68fb      	ldr	r3, [r7, #12]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3308      	adds	r3, #8
 8006e26:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	e853 3f00 	ldrex	r3, [r3]
 8006e2e:	613b      	str	r3, [r7, #16]
   return(result);
 8006e30:	693b      	ldr	r3, [r7, #16]
 8006e32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e36:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e38:	68fb      	ldr	r3, [r7, #12]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	3308      	adds	r3, #8
 8006e3e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8006e40:	623a      	str	r2, [r7, #32]
 8006e42:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e44:	69f9      	ldr	r1, [r7, #28]
 8006e46:	6a3a      	ldr	r2, [r7, #32]
 8006e48:	e841 2300 	strex	r3, r2, [r1]
 8006e4c:	61bb      	str	r3, [r7, #24]
   return(result);
 8006e4e:	69bb      	ldr	r3, [r7, #24]
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d1e5      	bne.n	8006e20 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 8006e54:	2300      	movs	r3, #0
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3758      	adds	r7, #88	@ 0x58
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	08007033 	.word	0x08007033
 8006e64:	0800715b 	.word	0x0800715b
 8006e68:	08007199 	.word	0x08007199

08006e6c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8006e6c:	b480      	push	{r7}
 8006e6e:	b089      	sub	sp, #36	@ 0x24
 8006e70:	af00      	add	r7, sp, #0
 8006e72:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	e853 3f00 	ldrex	r3, [r3]
 8006e80:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e82:	68bb      	ldr	r3, [r7, #8]
 8006e84:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8006e88:	61fb      	str	r3, [r7, #28]
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	681b      	ldr	r3, [r3, #0]
 8006e8e:	461a      	mov	r2, r3
 8006e90:	69fb      	ldr	r3, [r7, #28]
 8006e92:	61bb      	str	r3, [r7, #24]
 8006e94:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e96:	6979      	ldr	r1, [r7, #20]
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	e841 2300 	strex	r3, r2, [r1]
 8006e9e:	613b      	str	r3, [r7, #16]
   return(result);
 8006ea0:	693b      	ldr	r3, [r7, #16]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d1e6      	bne.n	8006e74 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	2220      	movs	r2, #32
 8006eaa:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8006eac:	bf00      	nop
 8006eae:	3724      	adds	r7, #36	@ 0x24
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr

08006eb8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006eb8:	b480      	push	{r7}
 8006eba:	b095      	sub	sp, #84	@ 0x54
 8006ebc:	af00      	add	r7, sp, #0
 8006ebe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	681b      	ldr	r3, [r3, #0]
 8006ec4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ec6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ec8:	e853 3f00 	ldrex	r3, [r3]
 8006ecc:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006ece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ed0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006ed4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	461a      	mov	r2, r3
 8006edc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006ede:	643b      	str	r3, [r7, #64]	@ 0x40
 8006ee0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ee2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006ee4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006ee6:	e841 2300 	strex	r3, r2, [r1]
 8006eea:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006eec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d1e6      	bne.n	8006ec0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	3308      	adds	r3, #8
 8006ef8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efa:	6a3b      	ldr	r3, [r7, #32]
 8006efc:	e853 3f00 	ldrex	r3, [r3]
 8006f00:	61fb      	str	r3, [r7, #28]
   return(result);
 8006f02:	69fb      	ldr	r3, [r7, #28]
 8006f04:	f023 0301 	bic.w	r3, r3, #1
 8006f08:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3308      	adds	r3, #8
 8006f10:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006f12:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006f14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f16:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006f18:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f1a:	e841 2300 	strex	r3, r2, [r1]
 8006f1e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006f22:	2b00      	cmp	r3, #0
 8006f24:	d1e5      	bne.n	8006ef2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8006f2a:	2b01      	cmp	r3, #1
 8006f2c:	d118      	bne.n	8006f60 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	e853 3f00 	ldrex	r3, [r3]
 8006f3a:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f3c:	68bb      	ldr	r3, [r7, #8]
 8006f3e:	f023 0310 	bic.w	r3, r3, #16
 8006f42:	647b      	str	r3, [r7, #68]	@ 0x44
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	461a      	mov	r2, r3
 8006f4a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f4c:	61bb      	str	r3, [r7, #24]
 8006f4e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f50:	6979      	ldr	r1, [r7, #20]
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	e841 2300 	strex	r3, r2, [r1]
 8006f58:	613b      	str	r3, [r7, #16]
   return(result);
 8006f5a:	693b      	ldr	r3, [r7, #16]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d1e6      	bne.n	8006f2e <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f60:	687b      	ldr	r3, [r7, #4]
 8006f62:	2220      	movs	r2, #32
 8006f64:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2200      	movs	r2, #0
 8006f72:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8006f74:	bf00      	nop
 8006f76:	3754      	adds	r7, #84	@ 0x54
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8006f80:	b580      	push	{r7, lr}
 8006f82:	b090      	sub	sp, #64	@ 0x40
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8006f88:	687b      	ldr	r3, [r7, #4]
 8006f8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	69db      	ldr	r3, [r3, #28]
 8006f92:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006f96:	d037      	beq.n	8007008 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 8006f98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8006fa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fa2:	681b      	ldr	r3, [r3, #0]
 8006fa4:	3308      	adds	r3, #8
 8006fa6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006faa:	e853 3f00 	ldrex	r3, [r3]
 8006fae:	623b      	str	r3, [r7, #32]
   return(result);
 8006fb0:	6a3b      	ldr	r3, [r7, #32]
 8006fb2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006fb6:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006fb8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	3308      	adds	r3, #8
 8006fbe:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8006fc0:	633a      	str	r2, [r7, #48]	@ 0x30
 8006fc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fc4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006fc6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006fc8:	e841 2300 	strex	r3, r2, [r1]
 8006fcc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd0:	2b00      	cmp	r3, #0
 8006fd2:	d1e5      	bne.n	8006fa0 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8006fd4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fda:	693b      	ldr	r3, [r7, #16]
 8006fdc:	e853 3f00 	ldrex	r3, [r3]
 8006fe0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8006fea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006fec:	681b      	ldr	r3, [r3, #0]
 8006fee:	461a      	mov	r2, r3
 8006ff0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006ff2:	61fb      	str	r3, [r7, #28]
 8006ff4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ff6:	69b9      	ldr	r1, [r7, #24]
 8006ff8:	69fa      	ldr	r2, [r7, #28]
 8006ffa:	e841 2300 	strex	r3, r2, [r1]
 8006ffe:	617b      	str	r3, [r7, #20]
   return(result);
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	2b00      	cmp	r3, #0
 8007004:	d1e6      	bne.n	8006fd4 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007006:	e002      	b.n	800700e <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 8007008:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 800700a:	f7ff fa15 	bl	8006438 <HAL_UART_TxCpltCallback>
}
 800700e:	bf00      	nop
 8007010:	3740      	adds	r7, #64	@ 0x40
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}

08007016 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007016:	b580      	push	{r7, lr}
 8007018:	b084      	sub	sp, #16
 800701a:	af00      	add	r7, sp, #0
 800701c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007022:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007024:	68f8      	ldr	r0, [r7, #12]
 8007026:	f7ff fa11 	bl	800644c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800702a:	bf00      	nop
 800702c:	3710      	adds	r7, #16
 800702e:	46bd      	mov	sp, r7
 8007030:	bd80      	pop	{r7, pc}

08007032 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007032:	b580      	push	{r7, lr}
 8007034:	b09c      	sub	sp, #112	@ 0x70
 8007036:	af00      	add	r7, sp, #0
 8007038:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800703e:	66fb      	str	r3, [r7, #108]	@ 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	69db      	ldr	r3, [r3, #28]
 8007044:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007048:	d071      	beq.n	800712e <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800704a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800704c:	2200      	movs	r2, #0
 800704e:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007052:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007058:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800705a:	e853 3f00 	ldrex	r3, [r3]
 800705e:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007060:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007062:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007066:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007068:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	461a      	mov	r2, r3
 800706e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8007070:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007072:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007074:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007076:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007078:	e841 2300 	strex	r3, r2, [r1]
 800707c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800707e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007080:	2b00      	cmp	r3, #0
 8007082:	d1e6      	bne.n	8007052 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007084:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	3308      	adds	r3, #8
 800708a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800708e:	e853 3f00 	ldrex	r3, [r3]
 8007092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007096:	f023 0301 	bic.w	r3, r3, #1
 800709a:	667b      	str	r3, [r7, #100]	@ 0x64
 800709c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	3308      	adds	r3, #8
 80070a2:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 80070a4:	647a      	str	r2, [r7, #68]	@ 0x44
 80070a6:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80070aa:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80070ac:	e841 2300 	strex	r3, r2, [r1]
 80070b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80070b2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d1e5      	bne.n	8007084 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80070b8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	3308      	adds	r3, #8
 80070be:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070c2:	e853 3f00 	ldrex	r3, [r3]
 80070c6:	623b      	str	r3, [r7, #32]
   return(result);
 80070c8:	6a3b      	ldr	r3, [r7, #32]
 80070ca:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80070ce:	663b      	str	r3, [r7, #96]	@ 0x60
 80070d0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	3308      	adds	r3, #8
 80070d6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80070d8:	633a      	str	r2, [r7, #48]	@ 0x30
 80070da:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070dc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80070de:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80070e0:	e841 2300 	strex	r3, r2, [r1]
 80070e4:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80070e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070e8:	2b00      	cmp	r3, #0
 80070ea:	d1e5      	bne.n	80070b8 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80070ec:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070ee:	2220      	movs	r2, #32
 80070f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80070f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070f6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80070f8:	2b01      	cmp	r3, #1
 80070fa:	d118      	bne.n	800712e <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80070fc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007102:	693b      	ldr	r3, [r7, #16]
 8007104:	e853 3f00 	ldrex	r3, [r3]
 8007108:	60fb      	str	r3, [r7, #12]
   return(result);
 800710a:	68fb      	ldr	r3, [r7, #12]
 800710c:	f023 0310 	bic.w	r3, r3, #16
 8007110:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007112:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	461a      	mov	r2, r3
 8007118:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800711a:	61fb      	str	r3, [r7, #28]
 800711c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800711e:	69b9      	ldr	r1, [r7, #24]
 8007120:	69fa      	ldr	r2, [r7, #28]
 8007122:	e841 2300 	strex	r3, r2, [r1]
 8007126:	617b      	str	r3, [r7, #20]
   return(result);
 8007128:	697b      	ldr	r3, [r7, #20]
 800712a:	2b00      	cmp	r3, #0
 800712c:	d1e6      	bne.n	80070fc <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800712e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007130:	2200      	movs	r2, #0
 8007132:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007134:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007136:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007138:	2b01      	cmp	r3, #1
 800713a:	d107      	bne.n	800714c <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800713c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800713e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8007142:	4619      	mov	r1, r3
 8007144:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 8007146:	f7f9 fb2d 	bl	80007a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800714a:	e002      	b.n	8007152 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800714c:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800714e:	f7ff f987 	bl	8006460 <HAL_UART_RxCpltCallback>
}
 8007152:	bf00      	nop
 8007154:	3770      	adds	r7, #112	@ 0x70
 8007156:	46bd      	mov	sp, r7
 8007158:	bd80      	pop	{r7, pc}

0800715a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800715a:	b580      	push	{r7, lr}
 800715c:	b084      	sub	sp, #16
 800715e:	af00      	add	r7, sp, #0
 8007160:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007166:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8007168:	68fb      	ldr	r3, [r7, #12]
 800716a:	2201      	movs	r2, #1
 800716c:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800716e:	68fb      	ldr	r3, [r7, #12]
 8007170:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8007172:	2b01      	cmp	r3, #1
 8007174:	d109      	bne.n	800718a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 800717c:	085b      	lsrs	r3, r3, #1
 800717e:	b29b      	uxth	r3, r3
 8007180:	4619      	mov	r1, r3
 8007182:	68f8      	ldr	r0, [r7, #12]
 8007184:	f7f9 fb0e 	bl	80007a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007188:	e002      	b.n	8007190 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800718a:	68f8      	ldr	r0, [r7, #12]
 800718c:	f7ff f972 	bl	8006474 <HAL_UART_RxHalfCpltCallback>
}
 8007190:	bf00      	nop
 8007192:	3710      	adds	r7, #16
 8007194:	46bd      	mov	sp, r7
 8007196:	bd80      	pop	{r7, pc}

08007198 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b086      	sub	sp, #24
 800719c:	af00      	add	r7, sp, #0
 800719e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80071a4:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 80071a6:	697b      	ldr	r3, [r7, #20]
 80071a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80071aa:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 80071ac:	697b      	ldr	r3, [r7, #20]
 80071ae:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80071b2:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 80071b4:	697b      	ldr	r3, [r7, #20]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	689b      	ldr	r3, [r3, #8]
 80071ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80071be:	2b80      	cmp	r3, #128	@ 0x80
 80071c0:	d109      	bne.n	80071d6 <UART_DMAError+0x3e>
 80071c2:	693b      	ldr	r3, [r7, #16]
 80071c4:	2b21      	cmp	r3, #33	@ 0x21
 80071c6:	d106      	bne.n	80071d6 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	2200      	movs	r2, #0
 80071cc:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    UART_EndTxTransfer(huart);
 80071d0:	6978      	ldr	r0, [r7, #20]
 80071d2:	f7ff fe4b 	bl	8006e6c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	689b      	ldr	r3, [r3, #8]
 80071dc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80071e0:	2b40      	cmp	r3, #64	@ 0x40
 80071e2:	d109      	bne.n	80071f8 <UART_DMAError+0x60>
 80071e4:	68fb      	ldr	r3, [r7, #12]
 80071e6:	2b22      	cmp	r3, #34	@ 0x22
 80071e8:	d106      	bne.n	80071f8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 80071ea:	697b      	ldr	r3, [r7, #20]
 80071ec:	2200      	movs	r2, #0
 80071ee:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
    UART_EndRxTransfer(huart);
 80071f2:	6978      	ldr	r0, [r7, #20]
 80071f4:	f7ff fe60 	bl	8006eb8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80071fe:	f043 0210 	orr.w	r2, r3, #16
 8007202:	697b      	ldr	r3, [r7, #20]
 8007204:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007208:	6978      	ldr	r0, [r7, #20]
 800720a:	f7ff f93d 	bl	8006488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720e:	bf00      	nop
 8007210:	3718      	adds	r7, #24
 8007212:	46bd      	mov	sp, r7
 8007214:	bd80      	pop	{r7, pc}

08007216 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007216:	b580      	push	{r7, lr}
 8007218:	b084      	sub	sp, #16
 800721a:	af00      	add	r7, sp, #0
 800721c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007222:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2200      	movs	r2, #0
 8007230:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f7ff f927 	bl	8006488 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800723a:	bf00      	nop
 800723c:	3710      	adds	r7, #16
 800723e:	46bd      	mov	sp, r7
 8007240:	bd80      	pop	{r7, pc}

08007242 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007242:	b580      	push	{r7, lr}
 8007244:	b088      	sub	sp, #32
 8007246:	af00      	add	r7, sp, #0
 8007248:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	681b      	ldr	r3, [r3, #0]
 800724e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	e853 3f00 	ldrex	r3, [r3]
 8007256:	60bb      	str	r3, [r7, #8]
   return(result);
 8007258:	68bb      	ldr	r3, [r7, #8]
 800725a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800725e:	61fb      	str	r3, [r7, #28]
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	461a      	mov	r2, r3
 8007266:	69fb      	ldr	r3, [r7, #28]
 8007268:	61bb      	str	r3, [r7, #24]
 800726a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800726c:	6979      	ldr	r1, [r7, #20]
 800726e:	69ba      	ldr	r2, [r7, #24]
 8007270:	e841 2300 	strex	r3, r2, [r1]
 8007274:	613b      	str	r3, [r7, #16]
   return(result);
 8007276:	693b      	ldr	r3, [r7, #16]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d1e6      	bne.n	800724a <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	2220      	movs	r2, #32
 8007280:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	2200      	movs	r2, #0
 8007286:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007288:	6878      	ldr	r0, [r7, #4]
 800728a:	f7ff f8d5 	bl	8006438 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800728e:	bf00      	nop
 8007290:	3720      	adds	r7, #32
 8007292:	46bd      	mov	sp, r7
 8007294:	bd80      	pop	{r7, pc}

08007296 <HAL_UARTEx_ReceiveToIdle_DMA>:
  * @param pData Pointer to data buffer (uint8_t or uint16_t data elements).
  * @param Size  Amount of data elements (uint8_t or uint16_t) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_ReceiveToIdle_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007296:	b580      	push	{r7, lr}
 8007298:	b08c      	sub	sp, #48	@ 0x30
 800729a:	af00      	add	r7, sp, #0
 800729c:	60f8      	str	r0, [r7, #12]
 800729e:	60b9      	str	r1, [r7, #8]
 80072a0:	4613      	mov	r3, r2
 80072a2:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef status;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80072a4:	68fb      	ldr	r3, [r7, #12]
 80072a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80072aa:	2b20      	cmp	r3, #32
 80072ac:	d142      	bne.n	8007334 <HAL_UARTEx_ReceiveToIdle_DMA+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 80072ae:	68bb      	ldr	r3, [r7, #8]
 80072b0:	2b00      	cmp	r3, #0
 80072b2:	d002      	beq.n	80072ba <HAL_UARTEx_ReceiveToIdle_DMA+0x24>
 80072b4:	88fb      	ldrh	r3, [r7, #6]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <HAL_UARTEx_ReceiveToIdle_DMA+0x28>
    {
      return HAL_ERROR;
 80072ba:	2301      	movs	r3, #1
 80072bc:	e03b      	b.n	8007336 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
    }

    /* Set Reception type to reception till IDLE Event*/
    huart->ReceptionType = HAL_UART_RECEPTION_TOIDLE;
 80072be:	68fb      	ldr	r3, [r7, #12]
 80072c0:	2201      	movs	r2, #1
 80072c2:	661a      	str	r2, [r3, #96]	@ 0x60
    huart->RxEventType = HAL_UART_RXEVENT_TC;
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	2200      	movs	r2, #0
 80072c8:	665a      	str	r2, [r3, #100]	@ 0x64

    status =  UART_Start_Receive_DMA(huart, pData, Size);
 80072ca:	88fb      	ldrh	r3, [r7, #6]
 80072cc:	461a      	mov	r2, r3
 80072ce:	68b9      	ldr	r1, [r7, #8]
 80072d0:	68f8      	ldr	r0, [r7, #12]
 80072d2:	f7ff fd2b 	bl	8006d2c <UART_Start_Receive_DMA>
 80072d6:	4603      	mov	r3, r0
 80072d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f

    /* Check Rx process has been successfully started */
    if (status == HAL_OK)
 80072dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d124      	bne.n	800732e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
    {
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072e4:	68fb      	ldr	r3, [r7, #12]
 80072e6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80072e8:	2b01      	cmp	r3, #1
 80072ea:	d11d      	bne.n	8007328 <HAL_UARTEx_ReceiveToIdle_DMA+0x92>
      {
        __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	2210      	movs	r2, #16
 80072f2:	621a      	str	r2, [r3, #32]
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072f4:	68fb      	ldr	r3, [r7, #12]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072fa:	69bb      	ldr	r3, [r7, #24]
 80072fc:	e853 3f00 	ldrex	r3, [r3]
 8007300:	617b      	str	r3, [r7, #20]
   return(result);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	f043 0310 	orr.w	r3, r3, #16
 8007308:	62bb      	str	r3, [r7, #40]	@ 0x28
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	681b      	ldr	r3, [r3, #0]
 800730e:	461a      	mov	r2, r3
 8007310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007312:	627b      	str	r3, [r7, #36]	@ 0x24
 8007314:	623a      	str	r2, [r7, #32]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007316:	6a39      	ldr	r1, [r7, #32]
 8007318:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800731a:	e841 2300 	strex	r3, r2, [r1]
 800731e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007320:	69fb      	ldr	r3, [r7, #28]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d1e6      	bne.n	80072f4 <HAL_UARTEx_ReceiveToIdle_DMA+0x5e>
 8007326:	e002      	b.n	800732e <HAL_UARTEx_ReceiveToIdle_DMA+0x98>
      {
        /* In case of errors already pending when reception is started,
           Interrupts may have already been raised and lead to reception abortion.
           (Overrun error for instance).
           In such case Reception Type has been reset to HAL_UART_RECEPTION_STANDARD. */
        status = HAL_ERROR;
 8007328:	2301      	movs	r3, #1
 800732a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }

    return status;
 800732e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8007332:	e000      	b.n	8007336 <HAL_UARTEx_ReceiveToIdle_DMA+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007334:	2302      	movs	r3, #2
  }
}
 8007336:	4618      	mov	r0, r3
 8007338:	3730      	adds	r7, #48	@ 0x30
 800733a:	46bd      	mov	sp, r7
 800733c:	bd80      	pop	{r7, pc}
	...

08007340 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8007340:	b084      	sub	sp, #16
 8007342:	b580      	push	{r7, lr}
 8007344:	b084      	sub	sp, #16
 8007346:	af00      	add	r7, sp, #0
 8007348:	6078      	str	r0, [r7, #4]
 800734a:	f107 001c 	add.w	r0, r7, #28
 800734e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007352:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8007356:	2b01      	cmp	r3, #1
 8007358:	d121      	bne.n	800739e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800735e:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8007362:	687b      	ldr	r3, [r7, #4]
 8007364:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	68da      	ldr	r2, [r3, #12]
 800736a:	4b21      	ldr	r3, [pc, #132]	@ (80073f0 <USB_CoreInit+0xb0>)
 800736c:	4013      	ands	r3, r2
 800736e:	687a      	ldr	r2, [r7, #4]
 8007370:	60d3      	str	r3, [r2, #12]
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	68db      	ldr	r3, [r3, #12]
 8007376:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800737e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8007382:	2b01      	cmp	r3, #1
 8007384:	d105      	bne.n	8007392 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8007386:	687b      	ldr	r3, [r7, #4]
 8007388:	68db      	ldr	r3, [r3, #12]
 800738a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8007392:	6878      	ldr	r0, [r7, #4]
 8007394:	f000 fa92 	bl	80078bc <USB_CoreReset>
 8007398:	4603      	mov	r3, r0
 800739a:	73fb      	strb	r3, [r7, #15]
 800739c:	e010      	b.n	80073c0 <USB_CoreInit+0x80>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	68db      	ldr	r3, [r3, #12]
 80073a2:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80073aa:	6878      	ldr	r0, [r7, #4]
 80073ac:	f000 fa86 	bl	80078bc <USB_CoreReset>
 80073b0:	4603      	mov	r3, r0
 80073b2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  if (cfg.dma_enable == 1U)
 80073c0:	7fbb      	ldrb	r3, [r7, #30]
 80073c2:	2b01      	cmp	r3, #1
 80073c4:	d10b      	bne.n	80073de <USB_CoreInit+0x9e>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	689b      	ldr	r3, [r3, #8]
 80073ca:	f043 0206 	orr.w	r2, r3, #6
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	689b      	ldr	r3, [r3, #8]
 80073d6:	f043 0220 	orr.w	r2, r3, #32
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80073de:	7bfb      	ldrb	r3, [r7, #15]
}
 80073e0:	4618      	mov	r0, r3
 80073e2:	3710      	adds	r7, #16
 80073e4:	46bd      	mov	sp, r7
 80073e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80073ea:	b004      	add	sp, #16
 80073ec:	4770      	bx	lr
 80073ee:	bf00      	nop
 80073f0:	ffbdffbf 	.word	0xffbdffbf

080073f4 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80073f4:	b480      	push	{r7}
 80073f6:	b083      	sub	sp, #12
 80073f8:	af00      	add	r7, sp, #0
 80073fa:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	689b      	ldr	r3, [r3, #8]
 8007400:	f023 0201 	bic.w	r2, r3, #1
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8007408:	2300      	movs	r3, #0
}
 800740a:	4618      	mov	r0, r3
 800740c:	370c      	adds	r7, #12
 800740e:	46bd      	mov	sp, r7
 8007410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007414:	4770      	bx	lr

08007416 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]
 800741e:	460b      	mov	r3, r1
 8007420:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8007422:	2300      	movs	r3, #0
 8007424:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	68db      	ldr	r3, [r3, #12]
 800742a:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8007432:	78fb      	ldrb	r3, [r7, #3]
 8007434:	2b01      	cmp	r3, #1
 8007436:	d115      	bne.n	8007464 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007444:	200a      	movs	r0, #10
 8007446:	f7fa feeb 	bl	8002220 <HAL_Delay>
      ms += 10U;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	330a      	adds	r3, #10
 800744e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007450:	6878      	ldr	r0, [r7, #4]
 8007452:	f000 fa25 	bl	80078a0 <USB_GetMode>
 8007456:	4603      	mov	r3, r0
 8007458:	2b01      	cmp	r3, #1
 800745a:	d01e      	beq.n	800749a <USB_SetCurrentMode+0x84>
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	2bc7      	cmp	r3, #199	@ 0xc7
 8007460:	d9f0      	bls.n	8007444 <USB_SetCurrentMode+0x2e>
 8007462:	e01a      	b.n	800749a <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8007464:	78fb      	ldrb	r3, [r7, #3]
 8007466:	2b00      	cmp	r3, #0
 8007468:	d115      	bne.n	8007496 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	68db      	ldr	r3, [r3, #12]
 800746e:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 8007476:	200a      	movs	r0, #10
 8007478:	f7fa fed2 	bl	8002220 <HAL_Delay>
      ms += 10U;
 800747c:	68fb      	ldr	r3, [r7, #12]
 800747e:	330a      	adds	r3, #10
 8007480:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8007482:	6878      	ldr	r0, [r7, #4]
 8007484:	f000 fa0c 	bl	80078a0 <USB_GetMode>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d005      	beq.n	800749a <USB_SetCurrentMode+0x84>
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	2bc7      	cmp	r3, #199	@ 0xc7
 8007492:	d9f0      	bls.n	8007476 <USB_SetCurrentMode+0x60>
 8007494:	e001      	b.n	800749a <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8007496:	2301      	movs	r3, #1
 8007498:	e005      	b.n	80074a6 <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	2bc8      	cmp	r3, #200	@ 0xc8
 800749e:	d101      	bne.n	80074a4 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	e000      	b.n	80074a6 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80074a4:	2300      	movs	r3, #0
}
 80074a6:	4618      	mov	r0, r3
 80074a8:	3710      	adds	r7, #16
 80074aa:	46bd      	mov	sp, r7
 80074ac:	bd80      	pop	{r7, pc}
	...

080074b0 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80074b0:	b084      	sub	sp, #16
 80074b2:	b580      	push	{r7, lr}
 80074b4:	b086      	sub	sp, #24
 80074b6:	af00      	add	r7, sp, #0
 80074b8:	6078      	str	r0, [r7, #4]
 80074ba:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80074be:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80074c2:	2300      	movs	r3, #0
 80074c4:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80074ca:	2300      	movs	r3, #0
 80074cc:	613b      	str	r3, [r7, #16]
 80074ce:	e009      	b.n	80074e4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	693b      	ldr	r3, [r7, #16]
 80074d4:	3340      	adds	r3, #64	@ 0x40
 80074d6:	009b      	lsls	r3, r3, #2
 80074d8:	4413      	add	r3, r2
 80074da:	2200      	movs	r2, #0
 80074dc:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80074de:	693b      	ldr	r3, [r7, #16]
 80074e0:	3301      	adds	r3, #1
 80074e2:	613b      	str	r3, [r7, #16]
 80074e4:	693b      	ldr	r3, [r7, #16]
 80074e6:	2b0e      	cmp	r3, #14
 80074e8:	d9f2      	bls.n	80074d0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80074ea:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80074ee:	2b00      	cmp	r3, #0
 80074f0:	d11c      	bne.n	800752c <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80074f2:	68fb      	ldr	r3, [r7, #12]
 80074f4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80074f8:	685b      	ldr	r3, [r3, #4]
 80074fa:	68fa      	ldr	r2, [r7, #12]
 80074fc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8007500:	f043 0302 	orr.w	r3, r3, #2
 8007504:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8007506:	687b      	ldr	r3, [r7, #4]
 8007508:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800750a:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	601a      	str	r2, [r3, #0]
 800752a:	e005      	b.n	8007538 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007530:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 800753e:	461a      	mov	r2, r3
 8007540:	2300      	movs	r3, #0
 8007542:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8007544:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8007548:	2b01      	cmp	r3, #1
 800754a:	d10d      	bne.n	8007568 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800754c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007550:	2b00      	cmp	r3, #0
 8007552:	d104      	bne.n	800755e <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8007554:	2100      	movs	r1, #0
 8007556:	6878      	ldr	r0, [r7, #4]
 8007558:	f000 f968 	bl	800782c <USB_SetDevSpeed>
 800755c:	e008      	b.n	8007570 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 800755e:	2101      	movs	r1, #1
 8007560:	6878      	ldr	r0, [r7, #4]
 8007562:	f000 f963 	bl	800782c <USB_SetDevSpeed>
 8007566:	e003      	b.n	8007570 <USB_DevInit+0xc0>
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) ||
          defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8007568:	2103      	movs	r1, #3
 800756a:	6878      	ldr	r0, [r7, #4]
 800756c:	f000 f95e 	bl	800782c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8007570:	2110      	movs	r1, #16
 8007572:	6878      	ldr	r0, [r7, #4]
 8007574:	f000 f8fa 	bl	800776c <USB_FlushTxFifo>
 8007578:	4603      	mov	r3, r0
 800757a:	2b00      	cmp	r3, #0
 800757c:	d001      	beq.n	8007582 <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 800757e:	2301      	movs	r3, #1
 8007580:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8007582:	6878      	ldr	r0, [r7, #4]
 8007584:	f000 f924 	bl	80077d0 <USB_FlushRxFifo>
 8007588:	4603      	mov	r3, r0
 800758a:	2b00      	cmp	r3, #0
 800758c:	d001      	beq.n	8007592 <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 800758e:	2301      	movs	r3, #1
 8007590:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8007592:	68fb      	ldr	r3, [r7, #12]
 8007594:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007598:	461a      	mov	r2, r3
 800759a:	2300      	movs	r3, #0
 800759c:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075a4:	461a      	mov	r2, r3
 80075a6:	2300      	movs	r3, #0
 80075a8:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80075b0:	461a      	mov	r2, r3
 80075b2:	2300      	movs	r3, #0
 80075b4:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80075b6:	2300      	movs	r3, #0
 80075b8:	613b      	str	r3, [r7, #16]
 80075ba:	e043      	b.n	8007644 <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80075bc:	693b      	ldr	r3, [r7, #16]
 80075be:	015a      	lsls	r2, r3, #5
 80075c0:	68fb      	ldr	r3, [r7, #12]
 80075c2:	4413      	add	r3, r2
 80075c4:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80075ce:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80075d2:	d118      	bne.n	8007606 <USB_DevInit+0x156>
    {
      if (i == 0U)
 80075d4:	693b      	ldr	r3, [r7, #16]
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d10a      	bne.n	80075f0 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80075da:	693b      	ldr	r3, [r7, #16]
 80075dc:	015a      	lsls	r2, r3, #5
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	4413      	add	r3, r2
 80075e2:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075e6:	461a      	mov	r2, r3
 80075e8:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 80075ec:	6013      	str	r3, [r2, #0]
 80075ee:	e013      	b.n	8007618 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80075f0:	693b      	ldr	r3, [r7, #16]
 80075f2:	015a      	lsls	r2, r3, #5
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	4413      	add	r3, r2
 80075f8:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 80075fc:	461a      	mov	r2, r3
 80075fe:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8007602:	6013      	str	r3, [r2, #0]
 8007604:	e008      	b.n	8007618 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	015a      	lsls	r2, r3, #5
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	4413      	add	r3, r2
 800760e:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007612:	461a      	mov	r2, r3
 8007614:	2300      	movs	r3, #0
 8007616:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	015a      	lsls	r2, r3, #5
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	4413      	add	r3, r2
 8007620:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007624:	461a      	mov	r2, r3
 8007626:	2300      	movs	r3, #0
 8007628:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	015a      	lsls	r2, r3, #5
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	4413      	add	r3, r2
 8007632:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8007636:	461a      	mov	r2, r3
 8007638:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 800763c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800763e:	693b      	ldr	r3, [r7, #16]
 8007640:	3301      	adds	r3, #1
 8007642:	613b      	str	r3, [r7, #16]
 8007644:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8007648:	461a      	mov	r2, r3
 800764a:	693b      	ldr	r3, [r7, #16]
 800764c:	4293      	cmp	r3, r2
 800764e:	d3b5      	bcc.n	80075bc <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8007650:	2300      	movs	r3, #0
 8007652:	613b      	str	r3, [r7, #16]
 8007654:	e043      	b.n	80076de <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8007656:	693b      	ldr	r3, [r7, #16]
 8007658:	015a      	lsls	r2, r3, #5
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	4413      	add	r3, r2
 800765e:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8007668:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 800766c:	d118      	bne.n	80076a0 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d10a      	bne.n	800768a <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	015a      	lsls	r2, r3, #5
 8007678:	68fb      	ldr	r3, [r7, #12]
 800767a:	4413      	add	r3, r2
 800767c:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007680:	461a      	mov	r2, r3
 8007682:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8007686:	6013      	str	r3, [r2, #0]
 8007688:	e013      	b.n	80076b2 <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 800768a:	693b      	ldr	r3, [r7, #16]
 800768c:	015a      	lsls	r2, r3, #5
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	4413      	add	r3, r2
 8007692:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8007696:	461a      	mov	r2, r3
 8007698:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 800769c:	6013      	str	r3, [r2, #0]
 800769e:	e008      	b.n	80076b2 <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	015a      	lsls	r2, r3, #5
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	4413      	add	r3, r2
 80076a8:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076ac:	461a      	mov	r2, r3
 80076ae:	2300      	movs	r3, #0
 80076b0:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80076b2:	693b      	ldr	r3, [r7, #16]
 80076b4:	015a      	lsls	r2, r3, #5
 80076b6:	68fb      	ldr	r3, [r7, #12]
 80076b8:	4413      	add	r3, r2
 80076ba:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076be:	461a      	mov	r2, r3
 80076c0:	2300      	movs	r3, #0
 80076c2:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80076c4:	693b      	ldr	r3, [r7, #16]
 80076c6:	015a      	lsls	r2, r3, #5
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	4413      	add	r3, r2
 80076cc:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 80076d0:	461a      	mov	r2, r3
 80076d2:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 80076d6:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80076d8:	693b      	ldr	r3, [r7, #16]
 80076da:	3301      	adds	r3, #1
 80076dc:	613b      	str	r3, [r7, #16]
 80076de:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80076e2:	461a      	mov	r2, r3
 80076e4:	693b      	ldr	r3, [r7, #16]
 80076e6:	4293      	cmp	r3, r2
 80076e8:	d3b5      	bcc.n	8007656 <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 80076f0:	691b      	ldr	r3, [r3, #16]
 80076f2:	68fa      	ldr	r2, [r7, #12]
 80076f4:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 80076f8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80076fc:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2200      	movs	r2, #0
 8007702:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 800770a:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800770c:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007710:	2b00      	cmp	r3, #0
 8007712:	d105      	bne.n	8007720 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	699b      	ldr	r3, [r3, #24]
 8007718:	f043 0210 	orr.w	r2, r3, #16
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8007720:	687b      	ldr	r3, [r7, #4]
 8007722:	699a      	ldr	r2, [r3, #24]
 8007724:	4b0f      	ldr	r3, [pc, #60]	@ (8007764 <USB_DevInit+0x2b4>)
 8007726:	4313      	orrs	r3, r2
 8007728:	687a      	ldr	r2, [r7, #4]
 800772a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800772c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8007730:	2b00      	cmp	r3, #0
 8007732:	d005      	beq.n	8007740 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	699b      	ldr	r3, [r3, #24]
 8007738:	f043 0208 	orr.w	r2, r3, #8
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8007740:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8007744:	2b01      	cmp	r3, #1
 8007746:	d105      	bne.n	8007754 <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	699a      	ldr	r2, [r3, #24]
 800774c:	4b06      	ldr	r3, [pc, #24]	@ (8007768 <USB_DevInit+0x2b8>)
 800774e:	4313      	orrs	r3, r2
 8007750:	687a      	ldr	r2, [r7, #4]
 8007752:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
}
 8007756:	4618      	mov	r0, r3
 8007758:	3718      	adds	r7, #24
 800775a:	46bd      	mov	sp, r7
 800775c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8007760:	b004      	add	sp, #16
 8007762:	4770      	bx	lr
 8007764:	803c3800 	.word	0x803c3800
 8007768:	40000004 	.word	0x40000004

0800776c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800776c:	b480      	push	{r7}
 800776e:	b085      	sub	sp, #20
 8007770:	af00      	add	r7, sp, #0
 8007772:	6078      	str	r0, [r7, #4]
 8007774:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8007776:	2300      	movs	r3, #0
 8007778:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800777a:	68fb      	ldr	r3, [r7, #12]
 800777c:	3301      	adds	r3, #1
 800777e:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8007786:	d901      	bls.n	800778c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8007788:	2303      	movs	r3, #3
 800778a:	e01b      	b.n	80077c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	691b      	ldr	r3, [r3, #16]
 8007790:	2b00      	cmp	r3, #0
 8007792:	daf2      	bge.n	800777a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8007794:	2300      	movs	r3, #0
 8007796:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8007798:	683b      	ldr	r3, [r7, #0]
 800779a:	019b      	lsls	r3, r3, #6
 800779c:	f043 0220 	orr.w	r2, r3, #32
 80077a0:	687b      	ldr	r3, [r7, #4]
 80077a2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3301      	adds	r3, #1
 80077a8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077b0:	d901      	bls.n	80077b6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80077b2:	2303      	movs	r3, #3
 80077b4:	e006      	b.n	80077c4 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	691b      	ldr	r3, [r3, #16]
 80077ba:	f003 0320 	and.w	r3, r3, #32
 80077be:	2b20      	cmp	r3, #32
 80077c0:	d0f0      	beq.n	80077a4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 80077c2:	2300      	movs	r3, #0
}
 80077c4:	4618      	mov	r0, r3
 80077c6:	3714      	adds	r7, #20
 80077c8:	46bd      	mov	sp, r7
 80077ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ce:	4770      	bx	lr

080077d0 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80077d8:	2300      	movs	r3, #0
 80077da:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	3301      	adds	r3, #1
 80077e0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80077e8:	d901      	bls.n	80077ee <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 80077ea:	2303      	movs	r3, #3
 80077ec:	e018      	b.n	8007820 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80077ee:	687b      	ldr	r3, [r7, #4]
 80077f0:	691b      	ldr	r3, [r3, #16]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	daf2      	bge.n	80077dc <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 80077f6:	2300      	movs	r3, #0
 80077f8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2210      	movs	r2, #16
 80077fe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	3301      	adds	r3, #1
 8007804:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 800780c:	d901      	bls.n	8007812 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 800780e:	2303      	movs	r3, #3
 8007810:	e006      	b.n	8007820 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	691b      	ldr	r3, [r3, #16]
 8007816:	f003 0310 	and.w	r3, r3, #16
 800781a:	2b10      	cmp	r3, #16
 800781c:	d0f0      	beq.n	8007800 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3714      	adds	r7, #20
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
 8007834:	460b      	mov	r3, r1
 8007836:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 800783c:	68fb      	ldr	r3, [r7, #12]
 800783e:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007842:	681a      	ldr	r2, [r3, #0]
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	68f9      	ldr	r1, [r7, #12]
 8007848:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 800784c:	4313      	orrs	r3, r2
 800784e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8007850:	2300      	movs	r3, #0
}
 8007852:	4618      	mov	r0, r3
 8007854:	3714      	adds	r7, #20
 8007856:	46bd      	mov	sp, r7
 8007858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800785c:	4770      	bx	lr

0800785e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 800785e:	b480      	push	{r7}
 8007860:	b085      	sub	sp, #20
 8007862:	af00      	add	r7, sp, #0
 8007864:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800786a:	68fb      	ldr	r3, [r7, #12]
 800786c:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68fa      	ldr	r2, [r7, #12]
 8007874:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8007878:	f023 0303 	bic.w	r3, r3, #3
 800787c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800787e:	68fb      	ldr	r3, [r7, #12]
 8007880:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8007884:	685b      	ldr	r3, [r3, #4]
 8007886:	68fa      	ldr	r2, [r7, #12]
 8007888:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 800788c:	f043 0302 	orr.w	r3, r3, #2
 8007890:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8007892:	2300      	movs	r3, #0
}
 8007894:	4618      	mov	r0, r3
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr

080078a0 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 80078a0:	b480      	push	{r7}
 80078a2:	b083      	sub	sp, #12
 80078a4:	af00      	add	r7, sp, #0
 80078a6:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	695b      	ldr	r3, [r3, #20]
 80078ac:	f003 0301 	and.w	r3, r3, #1
}
 80078b0:	4618      	mov	r0, r3
 80078b2:	370c      	adds	r7, #12
 80078b4:	46bd      	mov	sp, r7
 80078b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ba:	4770      	bx	lr

080078bc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80078bc:	b480      	push	{r7}
 80078be:	b085      	sub	sp, #20
 80078c0:	af00      	add	r7, sp, #0
 80078c2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80078c4:	2300      	movs	r3, #0
 80078c6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	3301      	adds	r3, #1
 80078cc:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078d4:	d901      	bls.n	80078da <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80078d6:	2303      	movs	r3, #3
 80078d8:	e01b      	b.n	8007912 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	691b      	ldr	r3, [r3, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	daf2      	bge.n	80078c8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80078e2:	2300      	movs	r3, #0
 80078e4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f043 0201 	orr.w	r2, r3, #1
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	3301      	adds	r3, #1
 80078f6:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 80078fe:	d901      	bls.n	8007904 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8007900:	2303      	movs	r3, #3
 8007902:	e006      	b.n	8007912 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	691b      	ldr	r3, [r3, #16]
 8007908:	f003 0301 	and.w	r3, r3, #1
 800790c:	2b01      	cmp	r3, #1
 800790e:	d0f0      	beq.n	80078f2 <USB_CoreReset+0x36>

  return HAL_OK;
 8007910:	2300      	movs	r3, #0
}
 8007912:	4618      	mov	r0, r3
 8007914:	3714      	adds	r7, #20
 8007916:	46bd      	mov	sp, r7
 8007918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791c:	4770      	bx	lr

0800791e <ATC_Malloc>:
void              ATC_TempCallback(const char *str);

/***********************************************************************************************************/

void* ATC_Malloc(size_t size)
{
 800791e:	b580      	push	{r7, lr}
 8007920:	b084      	sub	sp, #16
 8007922:	af00      	add	r7, sp, #0
 8007924:	6078      	str	r0, [r7, #4]
  void *ptr = NULL;
 8007926:	2300      	movs	r3, #0
 8007928:	60fb      	str	r3, [r7, #12]
#if ATC_RTOS == ATC_RTOS_DISABLE
  ptr = malloc(size);
 800792a:	6878      	ldr	r0, [r7, #4]
 800792c:	f000 fc28 	bl	8008180 <malloc>
 8007930:	4603      	mov	r3, r0
 8007932:	60fb      	str	r3, [r7, #12]
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
  ptr = pvPortMalloc(size);
#elif ATC_RTOS == ATC_RTOS_THREADX
  ??
#endif
  return ptr;
 8007934:	68fb      	ldr	r3, [r7, #12]
}
 8007936:	4618      	mov	r0, r3
 8007938:	3710      	adds	r7, #16
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}

0800793e <ATC_Free>:

/***********************************************************************************************************/

void ATC_Free(void** ptr)
{
 800793e:	b580      	push	{r7, lr}
 8007940:	b082      	sub	sp, #8
 8007942:	af00      	add	r7, sp, #0
 8007944:	6078      	str	r0, [r7, #4]
  if (ptr != NULL && *ptr != NULL)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	2b00      	cmp	r3, #0
 800794a:	d00b      	beq.n	8007964 <ATC_Free+0x26>
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d007      	beq.n	8007964 <ATC_Free+0x26>
  {
#if ATC_RTOS == ATC_RTOS_DISABLE
    free(*ptr);
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4618      	mov	r0, r3
 800795a:	f000 fc19 	bl	8008190 <free>
#elif (ATC_RTOS == ATC_RTOS_CMSIS_V1) || (ATC_RTOS == ATC_RTOS_CMSIS_V2)
    vPortFree(*ptr);
#elif ATC_RTOS == ATC_RTOS_THREADX
    ??
#endif
     *ptr = NULL;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	601a      	str	r2, [r3, #0]
  }
}
 8007964:	bf00      	nop
 8007966:	3708      	adds	r7, #8
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <ATC_RxFlush>:

/***********************************************************************************************************/

void ATC_RxFlush(ATC_HandleTypeDef* hAtc)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	b082      	sub	sp, #8
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  hAtc->RxIndex = 0;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	831a      	strh	r2, [r3, #24]
  memset(hAtc->pReadBuff, 0, hAtc->Size);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	8a9b      	ldrh	r3, [r3, #20]
 8007982:	461a      	mov	r2, r3
 8007984:	2100      	movs	r1, #0
 8007986:	f000 fd3d 	bl	8008404 <memset>
}
 800798a:	bf00      	nop
 800798c:	3708      	adds	r7, #8
 800798e:	46bd      	mov	sp, r7
 8007990:	bd80      	pop	{r7, pc}

08007992 <ATC_TxRaw>:

/***********************************************************************************************************/

bool ATC_TxRaw(ATC_HandleTypeDef* hAtc, const uint8_t* Data, uint16_t Len)
{
 8007992:	b580      	push	{r7, lr}
 8007994:	b086      	sub	sp, #24
 8007996:	af00      	add	r7, sp, #0
 8007998:	60f8      	str	r0, [r7, #12]
 800799a:	60b9      	str	r1, [r7, #8]
 800799c:	4613      	mov	r3, r2
 800799e:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 80079a0:	2300      	movs	r3, #0
 80079a2:	75fb      	strb	r3, [r7, #23]
    {
      dprintf("%c", Data[i]);
    }
    dprintf("\r\n");
#endif
    hAtc->TxLen = Len;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	88fa      	ldrh	r2, [r7, #6]
 80079a8:	835a      	strh	r2, [r3, #26]
    if (HAL_UART_Transmit_DMA(hAtc->hUart, Data, Len) != HAL_OK)
 80079aa:	68fb      	ldr	r3, [r7, #12]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	88fa      	ldrh	r2, [r7, #6]
 80079b0:	68b9      	ldr	r1, [r7, #8]
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe f8c4 	bl	8005b40 <HAL_UART_Transmit_DMA>
 80079b8:	4603      	mov	r3, r0
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d102      	bne.n	80079c4 <ATC_TxRaw+0x32>
    {
      break;
    }
    answer = true;
 80079be:	2301      	movs	r3, #1
 80079c0:	75fb      	strb	r3, [r7, #23]
 80079c2:	e000      	b.n	80079c6 <ATC_TxRaw+0x34>
      break;
 80079c4:	bf00      	nop

  } while (0);

  return answer;
 80079c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80079c8:	4618      	mov	r0, r3
 80079ca:	3718      	adds	r7, #24
 80079cc:	46bd      	mov	sp, r7
 80079ce:	bd80      	pop	{r7, pc}

080079d0 <ATC_TxBusy>:

/***********************************************************************************************************/

bool ATC_TxBusy(ATC_HandleTypeDef* hAtc)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX))
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	4618      	mov	r0, r3
 80079de:	f7fe fd67 	bl	80064b0 <HAL_UART_GetState>
 80079e2:	4603      	mov	r3, r0
 80079e4:	2b21      	cmp	r3, #33	@ 0x21
 80079e6:	d007      	beq.n	80079f8 <ATC_TxBusy+0x28>
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	4618      	mov	r0, r3
 80079ee:	f7fe fd5f 	bl	80064b0 <HAL_UART_GetState>
 80079f2:	4603      	mov	r3, r0
 80079f4:	2b23      	cmp	r3, #35	@ 0x23
 80079f6:	d101      	bne.n	80079fc <ATC_TxBusy+0x2c>
  {
    return true;
 80079f8:	2301      	movs	r3, #1
 80079fa:	e000      	b.n	80079fe <ATC_TxBusy+0x2e>
  }
  else
  {
    return false;
 80079fc:	2300      	movs	r3, #0
  }
}
 80079fe:	4618      	mov	r0, r3
 8007a00:	3708      	adds	r7, #8
 8007a02:	46bd      	mov	sp, r7
 8007a04:	bd80      	pop	{r7, pc}

08007a06 <ATC_TxWait>:

/***********************************************************************************************************/

bool ATC_TxWait(ATC_HandleTypeDef* hAtc, uint32_t Timeout)
{
 8007a06:	b580      	push	{r7, lr}
 8007a08:	b084      	sub	sp, #16
 8007a0a:	af00      	add	r7, sp, #0
 8007a0c:	6078      	str	r0, [r7, #4]
 8007a0e:	6039      	str	r1, [r7, #0]
  bool answer = false;
 8007a10:	2300      	movs	r3, #0
 8007a12:	73fb      	strb	r3, [r7, #15]
  uint32_t start_time = HAL_GetTick();
 8007a14:	f7fa fbf8 	bl	8002208 <HAL_GetTick>
 8007a18:	60b8      	str	r0, [r7, #8]
  while (1)
  {
    ATC_Delay(1);
 8007a1a:	2001      	movs	r0, #1
 8007a1c:	f000 fba1 	bl	8008162 <ATC_Delay>
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_READY))
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	4618      	mov	r0, r3
 8007a26:	f7fe fd43 	bl	80064b0 <HAL_UART_GetState>
 8007a2a:	4603      	mov	r3, r0
 8007a2c:	2b22      	cmp	r3, #34	@ 0x22
 8007a2e:	d007      	beq.n	8007a40 <ATC_TxWait+0x3a>
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	4618      	mov	r0, r3
 8007a36:	f7fe fd3b 	bl	80064b0 <HAL_UART_GetState>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b20      	cmp	r3, #32
 8007a3e:	d102      	bne.n	8007a46 <ATC_TxWait+0x40>
    {
      answer = true;
 8007a40:	2301      	movs	r3, #1
 8007a42:	73fb      	strb	r3, [r7, #15]
      break;
 8007a44:	e01c      	b.n	8007a80 <ATC_TxWait+0x7a>
    }
    if ((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_ERROR) || (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_TIMEOUT))
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4618      	mov	r0, r3
 8007a4c:	f7fe fd30 	bl	80064b0 <HAL_UART_GetState>
 8007a50:	4603      	mov	r3, r0
 8007a52:	2be0      	cmp	r3, #224	@ 0xe0
 8007a54:	d014      	beq.n	8007a80 <ATC_TxWait+0x7a>
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4618      	mov	r0, r3
 8007a5c:	f7fe fd28 	bl	80064b0 <HAL_UART_GetState>
 8007a60:	4603      	mov	r3, r0
 8007a62:	2ba0      	cmp	r3, #160	@ 0xa0
 8007a64:	d00c      	beq.n	8007a80 <ATC_TxWait+0x7a>
    {
      break;
    }
    if (HAL_GetTick() - start_time >= Timeout)
 8007a66:	f7fa fbcf 	bl	8002208 <HAL_GetTick>
 8007a6a:	4602      	mov	r2, r0
 8007a6c:	68bb      	ldr	r3, [r7, #8]
 8007a6e:	1ad3      	subs	r3, r2, r3
 8007a70:	683a      	ldr	r2, [r7, #0]
 8007a72:	429a      	cmp	r2, r3
 8007a74:	d8d1      	bhi.n	8007a1a <ATC_TxWait+0x14>
    {
      HAL_UART_AbortTransmit(hAtc->hUart);
 8007a76:	687b      	ldr	r3, [r7, #4]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f7fe f8dc 	bl	8005c38 <HAL_UART_AbortTransmit>
      break;
    }
  }

  return answer;
 8007a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <ATC_CheckEvents>:

/***********************************************************************************************************/

void ATC_CheckEvents(ATC_HandleTypeDef* hAtc)
{
 8007a8a:	b580      	push	{r7, lr}
 8007a8c:	b084      	sub	sp, #16
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  if (hAtc->RxIndex > 0)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	8b1b      	ldrh	r3, [r3, #24]
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d024      	beq.n	8007ae4 <ATC_CheckEvents+0x5a>
  {
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8007a9a:	2300      	movs	r3, #0
 8007a9c:	60fb      	str	r3, [r7, #12]
 8007a9e:	e019      	b.n	8007ad4 <ATC_CheckEvents+0x4a>
    {
      char *found = strstr((char*)hAtc->pReadBuff, hAtc->psEvents[ev].Event);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	68da      	ldr	r2, [r3, #12]
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	00db      	lsls	r3, r3, #3
 8007aac:	4413      	add	r3, r2
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4619      	mov	r1, r3
 8007ab2:	f000 fce1 	bl	8008478 <strstr>
 8007ab6:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 8007ab8:	68bb      	ldr	r3, [r7, #8]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d007      	beq.n	8007ace <ATC_CheckEvents+0x44>
      {
        hAtc->psEvents[ev].EventCallback(found);
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	68da      	ldr	r2, [r3, #12]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	00db      	lsls	r3, r3, #3
 8007ac6:	4413      	add	r3, r2
 8007ac8:	685b      	ldr	r3, [r3, #4]
 8007aca:	68b8      	ldr	r0, [r7, #8]
 8007acc:	4798      	blx	r3
    for (uint32_t ev = 0; ev < hAtc->Events; ev++)
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	3301      	adds	r3, #1
 8007ad2:	60fb      	str	r3, [r7, #12]
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	691b      	ldr	r3, [r3, #16]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	429a      	cmp	r2, r3
 8007adc:	d3e0      	bcc.n	8007aa0 <ATC_CheckEvents+0x16>
      }
    }
    ATC_RxFlush(hAtc);
 8007ade:	6878      	ldr	r0, [r7, #4]
 8007ae0:	f7ff ff44 	bl	800796c <ATC_RxFlush>
  }
}
 8007ae4:	bf00      	nop
 8007ae6:	3710      	adds	r7, #16
 8007ae8:	46bd      	mov	sp, r7
 8007aea:	bd80      	pop	{r7, pc}

08007aec <ATC_CheckResponse>:

/***********************************************************************************************************/

uint8_t ATC_CheckResponse(ATC_HandleTypeDef* hAtc, char** ppFound)
{
 8007aec:	b580      	push	{r7, lr}
 8007aee:	b084      	sub	sp, #16
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]
 8007af4:	6039      	str	r1, [r7, #0]
  uint8_t index = 0;
 8007af6:	2300      	movs	r3, #0
 8007af8:	73fb      	strb	r3, [r7, #15]
  if (hAtc->RxIndex > 0)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	8b1b      	ldrh	r3, [r3, #24]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d023      	beq.n	8007b4a <ATC_CheckResponse+0x5e>
  {
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8007b02:	2300      	movs	r3, #0
 8007b04:	81bb      	strh	r3, [r7, #12]
 8007b06:	e01b      	b.n	8007b40 <ATC_CheckResponse+0x54>
    {
      char *found = strstr((char*)hAtc->pReadBuff, (char*)hAtc->ppResp[i]);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8007b0c:	89ba      	ldrh	r2, [r7, #12]
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	320a      	adds	r2, #10
 8007b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007b16:	4619      	mov	r1, r3
 8007b18:	f000 fcae 	bl	8008478 <strstr>
 8007b1c:	60b8      	str	r0, [r7, #8]
      if (found != NULL)
 8007b1e:	68bb      	ldr	r3, [r7, #8]
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	d00a      	beq.n	8007b3a <ATC_CheckResponse+0x4e>
      {
        if (ppFound != NULL)
 8007b24:	683b      	ldr	r3, [r7, #0]
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	d002      	beq.n	8007b30 <ATC_CheckResponse+0x44>
        {
          *ppFound = found;
 8007b2a:	683b      	ldr	r3, [r7, #0]
 8007b2c:	68ba      	ldr	r2, [r7, #8]
 8007b2e:	601a      	str	r2, [r3, #0]
        }
        index = i + 1;
 8007b30:	89bb      	ldrh	r3, [r7, #12]
 8007b32:	b2db      	uxtb	r3, r3
 8007b34:	3301      	adds	r3, #1
 8007b36:	73fb      	strb	r3, [r7, #15]
        break;
 8007b38:	e007      	b.n	8007b4a <ATC_CheckResponse+0x5e>
    for (uint16_t i = 0; i < hAtc->RespCount; i++)
 8007b3a:	89bb      	ldrh	r3, [r7, #12]
 8007b3c:	3301      	adds	r3, #1
 8007b3e:	81bb      	strh	r3, [r7, #12]
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	8adb      	ldrh	r3, [r3, #22]
 8007b44:	89ba      	ldrh	r2, [r7, #12]
 8007b46:	429a      	cmp	r2, r3
 8007b48:	d3de      	bcc.n	8007b08 <ATC_CheckResponse+0x1c>
      }
    }
  }
  return index;
 8007b4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007b4c:	4618      	mov	r0, r3
 8007b4e:	3710      	adds	r7, #16
 8007b50:	46bd      	mov	sp, r7
 8007b52:	bd80      	pop	{r7, pc}

08007b54 <ATC_CheckErrors>:

/***********************************************************************************************************/

void ATC_CheckErrors(ATC_HandleTypeDef* hAtc)
{
 8007b54:	b580      	push	{r7, lr}
 8007b56:	b082      	sub	sp, #8
 8007b58:	af00      	add	r7, sp, #0
 8007b5a:	6078      	str	r0, [r7, #4]
  if (HAL_UART_GetError(hAtc->hUart) != HAL_UART_ERROR_NONE)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	4618      	mov	r0, r3
 8007b62:	f7fe fcb9 	bl	80064d8 <HAL_UART_GetError>
 8007b66:	4603      	mov	r3, r0
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	d01f      	beq.n	8007bac <ATC_CheckErrors+0x58>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f04f 32ff 	mov.w	r2, #4294967295
 8007b76:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	f7fe f8c3 	bl	8005d08 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6818      	ldr	r0, [r3, #0]
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	69d9      	ldr	r1, [r3, #28]
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	8a9b      	ldrh	r3, [r3, #20]
 8007b8e:	461a      	mov	r2, r3
 8007b90:	f7ff fb81 	bl	8007296 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	681a      	ldr	r2, [r3, #0]
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f022 0208 	bic.w	r2, r2, #8
 8007baa:	601a      	str	r2, [r3, #0]
  }
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	4618      	mov	r0, r3
 8007bb2:	f7fe fc7d 	bl	80064b0 <HAL_UART_GetState>
 8007bb6:	4603      	mov	r3, r0
 8007bb8:	2b22      	cmp	r3, #34	@ 0x22
 8007bba:	d027      	beq.n	8007c0c <ATC_CheckErrors+0xb8>
      (HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_TX_RX)))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	f7fe fc75 	bl	80064b0 <HAL_UART_GetState>
 8007bc6:	4603      	mov	r3, r0
  if (!((HAL_UART_GetState(hAtc->hUart) == HAL_UART_STATE_BUSY_RX) ||
 8007bc8:	2b23      	cmp	r3, #35	@ 0x23
 8007bca:	d01f      	beq.n	8007c0c <ATC_CheckErrors+0xb8>
  {
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	681b      	ldr	r3, [r3, #0]
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bd6:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	4618      	mov	r0, r3
 8007bde:	f7fe f893 	bl	8005d08 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6818      	ldr	r0, [r3, #0]
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	69d9      	ldr	r1, [r3, #28]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	8a9b      	ldrh	r3, [r3, #20]
 8007bee:	461a      	mov	r2, r3
 8007bf0:	f7ff fb51 	bl	8007296 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	681a      	ldr	r2, [r3, #0]
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	f022 0208 	bic.w	r2, r2, #8
 8007c0a:	601a      	str	r2, [r3, #0]
  }
}
 8007c0c:	bf00      	nop
 8007c0e:	3708      	adds	r7, #8
 8007c10:	46bd      	mov	sp, r7
 8007c12:	bd80      	pop	{r7, pc}

08007c14 <ATC_Init>:
  * @param  BufferSize: Size of the RX buffer. It needs 2X memory.
  * @param  pName: Name identifier for the ATC.
  * @retval true if initialization is successful, false otherwise.
  */
bool ATC_Init(ATC_HandleTypeDef* hAtc, UART_HandleTypeDef* hUart, uint16_t BufferSize, const char* pName)
{
 8007c14:	b580      	push	{r7, lr}
 8007c16:	b086      	sub	sp, #24
 8007c18:	af00      	add	r7, sp, #0
 8007c1a:	60f8      	str	r0, [r7, #12]
 8007c1c:	60b9      	str	r1, [r7, #8]
 8007c1e:	603b      	str	r3, [r7, #0]
 8007c20:	4613      	mov	r3, r2
 8007c22:	80fb      	strh	r3, [r7, #6]
  bool answer = false;
 8007c24:	2300      	movs	r3, #0
 8007c26:	75fb      	strb	r3, [r7, #23]
  do
  {
    if (hAtc == NULL || hUart == NULL)
 8007c28:	68fb      	ldr	r3, [r7, #12]
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d075      	beq.n	8007d1a <ATC_Init+0x106>
 8007c2e:	68bb      	ldr	r3, [r7, #8]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d072      	beq.n	8007d1a <ATC_Init+0x106>
    {
      break;
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007c34:	223c      	movs	r2, #60	@ 0x3c
 8007c36:	2100      	movs	r1, #0
 8007c38:	68f8      	ldr	r0, [r7, #12]
 8007c3a:	f000 fbe3 	bl	8008404 <memset>
    if (pName != NULL)
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d006      	beq.n	8007c52 <ATC_Init+0x3e>
    {
      strncpy(hAtc->Name, pName, sizeof(hAtc->Name) - 1);
 8007c44:	68fb      	ldr	r3, [r7, #12]
 8007c46:	3304      	adds	r3, #4
 8007c48:	2207      	movs	r2, #7
 8007c4a:	6839      	ldr	r1, [r7, #0]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 fc00 	bl	8008452 <strncpy>
    }
    hAtc->hUart = hUart;
 8007c52:	68fb      	ldr	r3, [r7, #12]
 8007c54:	68ba      	ldr	r2, [r7, #8]
 8007c56:	601a      	str	r2, [r3, #0]
    hAtc->pRxBuff = ATC_Malloc(BufferSize);
 8007c58:	88fb      	ldrh	r3, [r7, #6]
 8007c5a:	4618      	mov	r0, r3
 8007c5c:	f7ff fe5f 	bl	800791e <ATC_Malloc>
 8007c60:	4602      	mov	r2, r0
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	61da      	str	r2, [r3, #28]
    if (hAtc->pRxBuff != NULL)
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	69db      	ldr	r3, [r3, #28]
 8007c6a:	2b00      	cmp	r3, #0
 8007c6c:	d04e      	beq.n	8007d0c <ATC_Init+0xf8>
    {
      memset(hAtc->pRxBuff, 0, BufferSize);
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	69db      	ldr	r3, [r3, #28]
 8007c72:	88fa      	ldrh	r2, [r7, #6]
 8007c74:	2100      	movs	r1, #0
 8007c76:	4618      	mov	r0, r3
 8007c78:	f000 fbc4 	bl	8008404 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC RX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pTxBuff = ATC_Malloc(BufferSize);
 8007c7c:	88fb      	ldrh	r3, [r7, #6]
 8007c7e:	4618      	mov	r0, r3
 8007c80:	f7ff fe4d 	bl	800791e <ATC_Malloc>
 8007c84:	4602      	mov	r2, r0
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	621a      	str	r2, [r3, #32]
    if (hAtc->pTxBuff != NULL)
 8007c8a:	68fb      	ldr	r3, [r7, #12]
 8007c8c:	6a1b      	ldr	r3, [r3, #32]
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d03e      	beq.n	8007d10 <ATC_Init+0xfc>
    {
      memset(hAtc->pTxBuff, 0, BufferSize);
 8007c92:	68fb      	ldr	r3, [r7, #12]
 8007c94:	6a1b      	ldr	r3, [r3, #32]
 8007c96:	88fa      	ldrh	r2, [r7, #6]
 8007c98:	2100      	movs	r1, #0
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 fbb2 	bl	8008404 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC TX BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->pReadBuff = ATC_Malloc(BufferSize);
 8007ca0:	88fb      	ldrh	r3, [r7, #6]
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	f7ff fe3b 	bl	800791e <ATC_Malloc>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	68fb      	ldr	r3, [r7, #12]
 8007cac:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hAtc->pReadBuff != NULL)
 8007cae:	68fb      	ldr	r3, [r7, #12]
 8007cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d02e      	beq.n	8007d14 <ATC_Init+0x100>
    {
      memset(hAtc->pReadBuff, 0, BufferSize);
 8007cb6:	68fb      	ldr	r3, [r7, #12]
 8007cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007cba:	88fa      	ldrh	r2, [r7, #6]
 8007cbc:	2100      	movs	r1, #0
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f000 fba0 	bl	8008404 <memset>
    else
    {
      dprintf("ATC<%s> - ERROR MALLOC READ BUFF\r\n", hAtc->Name);
      break;
    }
    hAtc->Size = BufferSize;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	88fa      	ldrh	r2, [r7, #6]
 8007cc8:	829a      	strh	r2, [r3, #20]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681b      	ldr	r3, [r3, #0]
 8007cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8007cd4:	621a      	str	r2, [r3, #32]
    if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) != HAL_OK)
 8007cd6:	68fb      	ldr	r3, [r7, #12]
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	69d9      	ldr	r1, [r3, #28]
 8007cde:	68fb      	ldr	r3, [r7, #12]
 8007ce0:	8a9b      	ldrh	r3, [r3, #20]
 8007ce2:	461a      	mov	r2, r3
 8007ce4:	f7ff fad7 	bl	8007296 <HAL_UARTEx_ReceiveToIdle_DMA>
 8007ce8:	4603      	mov	r3, r0
 8007cea:	2b00      	cmp	r3, #0
 8007cec:	d114      	bne.n	8007d18 <ATC_Init+0x104>
    {
      dprintf("ATC<%s> - ERROR ENABLE RX DMA\r\n", hAtc->Name);
      break;
    }
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8007cee:	68fb      	ldr	r3, [r7, #12]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	68fb      	ldr	r3, [r7, #12]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f022 0208 	bic.w	r2, r2, #8
 8007d04:	601a      	str	r2, [r3, #0]
    answer = true;
 8007d06:	2301      	movs	r3, #1
 8007d08:	75fb      	strb	r3, [r7, #23]
 8007d0a:	e006      	b.n	8007d1a <ATC_Init+0x106>
      break;
 8007d0c:	bf00      	nop
 8007d0e:	e004      	b.n	8007d1a <ATC_Init+0x106>
      break;
 8007d10:	bf00      	nop
 8007d12:	e002      	b.n	8007d1a <ATC_Init+0x106>
      break;
 8007d14:	bf00      	nop
 8007d16:	e000      	b.n	8007d1a <ATC_Init+0x106>
      break;
 8007d18:	bf00      	nop

  } while (0);

  if (answer == false)
 8007d1a:	7dfb      	ldrb	r3, [r7, #23]
 8007d1c:	f083 0301 	eor.w	r3, r3, #1
 8007d20:	b2db      	uxtb	r3, r3
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d016      	beq.n	8007d54 <ATC_Init+0x140>
  {
    if (hAtc->pRxBuff != NULL)
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	69db      	ldr	r3, [r3, #28]
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d004      	beq.n	8007d38 <ATC_Init+0x124>
    {
      ATC_Free((void**)&hAtc->pRxBuff);
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	331c      	adds	r3, #28
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7ff fe03 	bl	800793e <ATC_Free>
    }
    if (hAtc->pReadBuff != NULL)
 8007d38:	68fb      	ldr	r3, [r7, #12]
 8007d3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007d3c:	2b00      	cmp	r3, #0
 8007d3e:	d004      	beq.n	8007d4a <ATC_Init+0x136>
    {
      ATC_Free((void**)&hAtc->pReadBuff);
 8007d40:	68fb      	ldr	r3, [r7, #12]
 8007d42:	3324      	adds	r3, #36	@ 0x24
 8007d44:	4618      	mov	r0, r3
 8007d46:	f7ff fdfa 	bl	800793e <ATC_Free>
    }
    memset(hAtc, 0, sizeof(ATC_HandleTypeDef));
 8007d4a:	223c      	movs	r2, #60	@ 0x3c
 8007d4c:	2100      	movs	r1, #0
 8007d4e:	68f8      	ldr	r0, [r7, #12]
 8007d50:	f000 fb58 	bl	8008404 <memset>
  }
  else
  {
    dprintf("ATC<%s> - INIT DONE\r\n", hAtc->Name);
  }
  return answer;
 8007d54:	7dfb      	ldrb	r3, [r7, #23]
}
 8007d56:	4618      	mov	r0, r3
 8007d58:	3718      	adds	r7, #24
 8007d5a:	46bd      	mov	sp, r7
 8007d5c:	bd80      	pop	{r7, pc}

08007d5e <ATC_Loop>:
  * @brief  Main loop for processing ATC events and errors.
  * @param  hAtc: Pointer to the ATC handle.
  * @retval None.
  */
void ATC_Loop(ATC_HandleTypeDef* hAtc)
{
 8007d5e:	b580      	push	{r7, lr}
 8007d60:	b082      	sub	sp, #8
 8007d62:	af00      	add	r7, sp, #0
 8007d64:	6078      	str	r0, [r7, #4]
  ATC_CheckErrors(hAtc);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7ff fef4 	bl	8007b54 <ATC_CheckErrors>
  ATC_CheckEvents(hAtc);
 8007d6c:	6878      	ldr	r0, [r7, #4]
 8007d6e:	f7ff fe8c 	bl	8007a8a <ATC_CheckEvents>
}
 8007d72:	bf00      	nop
 8007d74:	3708      	adds	r7, #8
 8007d76:	46bd      	mov	sp, r7
 8007d78:	bd80      	pop	{r7, pc}

08007d7a <ATC_SendReceive>:
  * @param  Items: Number of String for Searching
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_SendReceive(ATC_HandleTypeDef* hAtc, const char* pCommand, uint32_t TxTimeout, char** ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8007d7a:	b590      	push	{r4, r7, lr}
 8007d7c:	b08d      	sub	sp, #52	@ 0x34
 8007d7e:	af00      	add	r7, sp, #0
 8007d80:	60f8      	str	r0, [r7, #12]
 8007d82:	60b9      	str	r1, [r7, #8]
 8007d84:	607a      	str	r2, [r7, #4]
 8007d86:	603b      	str	r3, [r7, #0]
  int answer = ATC_RESP_NOT_FOUND;
 8007d88:	2300      	movs	r3, #0
 8007d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (ATC_TxBusy(hAtc) == true)
 8007d8c:	68f8      	ldr	r0, [r7, #12]
 8007d8e:	f7ff fe1f 	bl	80079d0 <ATC_TxBusy>
 8007d92:	4603      	mov	r3, r0
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d002      	beq.n	8007d9e <ATC_SendReceive+0x24>
  {
    return ATC_RESP_TX_BUSY;
 8007d98:	f06f 0303 	mvn.w	r3, #3
 8007d9c:	e0c8      	b.n	8007f30 <ATC_SendReceive+0x1b6>
  }
  if (Items > ATC_RESP_MAX)
 8007d9e:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007da2:	2b05      	cmp	r3, #5
 8007da4:	d902      	bls.n	8007dac <ATC_SendReceive+0x32>
  {
    return ATC_RESP_ITEMS;
 8007da6:	f06f 0304 	mvn.w	r3, #4
 8007daa:	e0c1      	b.n	8007f30 <ATC_SendReceive+0x1b6>
  }
  ATC_CheckErrors(hAtc);
 8007dac:	68f8      	ldr	r0, [r7, #12]
 8007dae:	f7ff fed1 	bl	8007b54 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8007db2:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8007db6:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8007db8:	2300      	movs	r3, #0
 8007dba:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007dbc:	e04b      	b.n	8007e56 <ATC_SendReceive+0xdc>
  {
    char *arg = va_arg(args, char*);
 8007dbe:	697b      	ldr	r3, [r7, #20]
 8007dc0:	1d1a      	adds	r2, r3, #4
 8007dc2:	617a      	str	r2, [r7, #20]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8007dc8:	69b8      	ldr	r0, [r7, #24]
 8007dca:	f7f8 fa3f 	bl	800024c <strlen>
 8007dce:	4603      	mov	r3, r0
 8007dd0:	3301      	adds	r3, #1
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7ff fda3 	bl	800791e <ATC_Malloc>
 8007dd8:	4601      	mov	r1, r0
 8007dda:	68fb      	ldr	r3, [r7, #12]
 8007ddc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007dde:	320a      	adds	r2, #10
 8007de0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 8007de4:	68fb      	ldr	r3, [r7, #12]
 8007de6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007de8:	320a      	adds	r2, #10
 8007dea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007dee:	2b00      	cmp	r3, #0
 8007df0:	d119      	bne.n	8007e26 <ATC_SendReceive+0xac>
    {
      for (uint8_t j = 0; j < i; j++)
 8007df2:	2300      	movs	r3, #0
 8007df4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007df8:	e00d      	b.n	8007e16 <ATC_SendReceive+0x9c>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8007dfa:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007dfe:	330a      	adds	r3, #10
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	68fa      	ldr	r2, [r7, #12]
 8007e04:	4413      	add	r3, r2
 8007e06:	4618      	mov	r0, r3
 8007e08:	f7ff fd99 	bl	800793e <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8007e0c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e10:	3301      	adds	r3, #1
 8007e12:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007e16:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007e1a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	dcec      	bgt.n	8007dfa <ATC_SendReceive+0x80>
      }
      return ATC_RESP_MEM_ERROR;
 8007e20:	f06f 0302 	mvn.w	r3, #2
 8007e24:	e084      	b.n	8007f30 <ATC_SendReceive+0x1b6>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8007e26:	68fb      	ldr	r3, [r7, #12]
 8007e28:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e2a:	320a      	adds	r2, #10
 8007e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007e30:	69b9      	ldr	r1, [r7, #24]
 8007e32:	4618      	mov	r0, r3
 8007e34:	f000 fb72 	bl	800851c <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e3c:	320a      	adds	r2, #10
 8007e3e:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8007e42:	69b8      	ldr	r0, [r7, #24]
 8007e44:	f7f8 fa02 	bl	800024c <strlen>
 8007e48:	4603      	mov	r3, r0
 8007e4a:	4423      	add	r3, r4
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8007e50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007e52:	3301      	adds	r3, #1
 8007e54:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e56:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007e5a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007e5c:	429a      	cmp	r2, r3
 8007e5e:	dbae      	blt.n	8007dbe <ATC_SendReceive+0x44>
  }
  va_end(args);

  do
  {
    ATC_RxFlush(hAtc);
 8007e60:	68f8      	ldr	r0, [r7, #12]
 8007e62:	f7ff fd83 	bl	800796c <ATC_RxFlush>
    if (ATC_TxRaw(hAtc, (const uint8_t*)pCommand, strlen((char*)pCommand)) == false)
 8007e66:	68b8      	ldr	r0, [r7, #8]
 8007e68:	f7f8 f9f0 	bl	800024c <strlen>
 8007e6c:	4603      	mov	r3, r0
 8007e6e:	b29b      	uxth	r3, r3
 8007e70:	461a      	mov	r2, r3
 8007e72:	68b9      	ldr	r1, [r7, #8]
 8007e74:	68f8      	ldr	r0, [r7, #12]
 8007e76:	f7ff fd8c 	bl	8007992 <ATC_TxRaw>
 8007e7a:	4603      	mov	r3, r0
 8007e7c:	f083 0301 	eor.w	r3, r3, #1
 8007e80:	b2db      	uxtb	r3, r3
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d003      	beq.n	8007e8e <ATC_SendReceive+0x114>
    {
      answer = ATC_RESP_SENDING_ERROR;
 8007e86:	f04f 33ff 	mov.w	r3, #4294967295
 8007e8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8007e8c:	e00d      	b.n	8007eaa <ATC_SendReceive+0x130>
    }
    if (ATC_TxWait(hAtc, TxTimeout) == false)
 8007e8e:	6879      	ldr	r1, [r7, #4]
 8007e90:	68f8      	ldr	r0, [r7, #12]
 8007e92:	f7ff fdb8 	bl	8007a06 <ATC_TxWait>
 8007e96:	4603      	mov	r3, r0
 8007e98:	f083 0301 	eor.w	r3, r3, #1
 8007e9c:	b2db      	uxtb	r3, r3
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d003      	beq.n	8007eaa <ATC_SendReceive+0x130>
    {
      answer = ATC_RESP_SENDING_TIMEOUT;
 8007ea2:	f06f 0301 	mvn.w	r3, #1
 8007ea6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      break;
 8007ea8:	bf00      	nop
    }

  } while (0);

  if ((Items > 0) && (answer == ATC_RESP_NOT_FOUND))
 8007eaa:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d022      	beq.n	8007ef8 <ATC_SendReceive+0x17e>
 8007eb2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007eb4:	2b00      	cmp	r3, #0
 8007eb6:	d11f      	bne.n	8007ef8 <ATC_SendReceive+0x17e>
  {
    uint32_t start_time = HAL_GetTick();
 8007eb8:	f7fa f9a6 	bl	8002208 <HAL_GetTick>
 8007ebc:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 8007ebe:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007ec2:	b29a      	uxth	r2, r3
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8007ec8:	e00e      	b.n	8007ee8 <ATC_SendReceive+0x16e>
    {
      ATC_Delay(1);
 8007eca:	2001      	movs	r0, #1
 8007ecc:	f000 f949 	bl	8008162 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 8007ed0:	6839      	ldr	r1, [r7, #0]
 8007ed2:	68f8      	ldr	r0, [r7, #12]
 8007ed4:	f7ff fe0a 	bl	8007aec <ATC_CheckResponse>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 8007edc:	7ffb      	ldrb	r3, [r7, #31]
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d002      	beq.n	8007ee8 <ATC_SendReceive+0x16e>
      {
        answer = found_index;
 8007ee2:	7ffb      	ldrb	r3, [r7, #31]
 8007ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8007ee6:	e007      	b.n	8007ef8 <ATC_SendReceive+0x17e>
    while (HAL_GetTick() - start_time < RxTimeout)
 8007ee8:	f7fa f98e 	bl	8002208 <HAL_GetTick>
 8007eec:	4602      	mov	r2, r0
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	1ad3      	subs	r3, r2, r3
 8007ef2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007ef4:	429a      	cmp	r2, r3
 8007ef6:	d8e8      	bhi.n	8007eca <ATC_SendReceive+0x150>
      }
    }
  }
  hAtc->RespCount = 0;
 8007ef8:	68fb      	ldr	r3, [r7, #12]
 8007efa:	2200      	movs	r2, #0
 8007efc:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 8007efe:	2300      	movs	r3, #0
 8007f00:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007f04:	e00d      	b.n	8007f22 <ATC_SendReceive+0x1a8>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8007f06:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f0a:	330a      	adds	r3, #10
 8007f0c:	009b      	lsls	r3, r3, #2
 8007f0e:	68fa      	ldr	r2, [r7, #12]
 8007f10:	4413      	add	r3, r2
 8007f12:	4618      	mov	r0, r3
 8007f14:	f7ff fd13 	bl	800793e <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8007f18:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8007f1c:	3301      	adds	r3, #1
 8007f1e:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8007f22:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8007f26:	f897 3044 	ldrb.w	r3, [r7, #68]	@ 0x44
 8007f2a:	429a      	cmp	r2, r3
 8007f2c:	d3eb      	bcc.n	8007f06 <ATC_SendReceive+0x18c>
  }
  return answer;
 8007f2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8007f30:	4618      	mov	r0, r3
 8007f32:	3734      	adds	r7, #52	@ 0x34
 8007f34:	46bd      	mov	sp, r7
 8007f36:	bd90      	pop	{r4, r7, pc}

08007f38 <ATC_Receive>:
  * @param  Items: Number of searching strings
  * @param  ...: Variable arguments for expected responses.
  * @retval Response index if found, error code otherwise.
  */
int ATC_Receive(ATC_HandleTypeDef *hAtc, char **ppResp, uint32_t RxTimeout, uint8_t Items, ...)
{
 8007f38:	b408      	push	{r3}
 8007f3a:	b590      	push	{r4, r7, lr}
 8007f3c:	b08c      	sub	sp, #48	@ 0x30
 8007f3e:	af00      	add	r7, sp, #0
 8007f40:	60f8      	str	r0, [r7, #12]
 8007f42:	60b9      	str	r1, [r7, #8]
 8007f44:	607a      	str	r2, [r7, #4]
  int answer = ATC_RESP_NOT_FOUND;
 8007f46:	2300      	movs	r3, #0
 8007f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (Items > ATC_RESP_MAX)
 8007f4a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8007f4e:	2b05      	cmp	r3, #5
 8007f50:	d902      	bls.n	8007f58 <ATC_Receive+0x20>
  {
    return ATC_RESP_ITEMS;
 8007f52:	f06f 0304 	mvn.w	r3, #4
 8007f56:	e099      	b.n	800808c <ATC_Receive+0x154>
  }
  ATC_CheckErrors(hAtc);
 8007f58:	68f8      	ldr	r0, [r7, #12]
 8007f5a:	f7ff fdfb 	bl	8007b54 <ATC_CheckErrors>
  va_list args;
  va_start(args, Items);
 8007f5e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8007f62:	617b      	str	r3, [r7, #20]
  for (int i = 0; i < Items; i++)
 8007f64:	2300      	movs	r3, #0
 8007f66:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007f68:	e04b      	b.n	8008002 <ATC_Receive+0xca>
  {
    char *arg = va_arg(args, char*);
 8007f6a:	697b      	ldr	r3, [r7, #20]
 8007f6c:	1d1a      	adds	r2, r3, #4
 8007f6e:	617a      	str	r2, [r7, #20]
 8007f70:	681b      	ldr	r3, [r3, #0]
 8007f72:	61bb      	str	r3, [r7, #24]
    hAtc->ppResp[i] = (uint8_t*) ATC_Malloc(strlen(arg) + 1);
 8007f74:	69b8      	ldr	r0, [r7, #24]
 8007f76:	f7f8 f969 	bl	800024c <strlen>
 8007f7a:	4603      	mov	r3, r0
 8007f7c:	3301      	adds	r3, #1
 8007f7e:	4618      	mov	r0, r3
 8007f80:	f7ff fccd 	bl	800791e <ATC_Malloc>
 8007f84:	4601      	mov	r1, r0
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f8a:	320a      	adds	r2, #10
 8007f8c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    if (hAtc->ppResp[i] == NULL)
 8007f90:	68fb      	ldr	r3, [r7, #12]
 8007f92:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007f94:	320a      	adds	r2, #10
 8007f96:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d119      	bne.n	8007fd2 <ATC_Receive+0x9a>
    {
      for (uint8_t j = 0; j < i; j++)
 8007f9e:	2300      	movs	r3, #0
 8007fa0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007fa4:	e00d      	b.n	8007fc2 <ATC_Receive+0x8a>
      {
        ATC_Free((void**)&hAtc->ppResp[j]);
 8007fa6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007faa:	330a      	adds	r3, #10
 8007fac:	009b      	lsls	r3, r3, #2
 8007fae:	68fa      	ldr	r2, [r7, #12]
 8007fb0:	4413      	add	r3, r2
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f7ff fcc3 	bl	800793e <ATC_Free>
      for (uint8_t j = 0; j < i; j++)
 8007fb8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fbc:	3301      	adds	r3, #1
 8007fbe:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8007fc2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8007fc6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fc8:	429a      	cmp	r2, r3
 8007fca:	dcec      	bgt.n	8007fa6 <ATC_Receive+0x6e>
      }
      return ATC_RESP_MEM_ERROR;
 8007fcc:	f06f 0302 	mvn.w	r3, #2
 8007fd0:	e05c      	b.n	800808c <ATC_Receive+0x154>
    }
    strcpy((char*) hAtc->ppResp[i], arg);
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fd6:	320a      	adds	r2, #10
 8007fd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007fdc:	69b9      	ldr	r1, [r7, #24]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 fa9c 	bl	800851c <strcpy>
    hAtc->ppResp[i][strlen(arg)] = 0;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007fe8:	320a      	adds	r2, #10
 8007fea:	f853 4022 	ldr.w	r4, [r3, r2, lsl #2]
 8007fee:	69b8      	ldr	r0, [r7, #24]
 8007ff0:	f7f8 f92c 	bl	800024c <strlen>
 8007ff4:	4603      	mov	r3, r0
 8007ff6:	4423      	add	r3, r4
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	701a      	strb	r2, [r3, #0]
  for (int i = 0; i < Items; i++)
 8007ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ffe:	3301      	adds	r3, #1
 8008000:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008002:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008006:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008008:	429a      	cmp	r2, r3
 800800a:	dbae      	blt.n	8007f6a <ATC_Receive+0x32>
  }
  va_end(args);

  if (Items > 0)
 800800c:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008010:	2b00      	cmp	r3, #0
 8008012:	d01f      	beq.n	8008054 <ATC_Receive+0x11c>
  {
    uint32_t start_time = HAL_GetTick();
 8008014:	f7fa f8f8 	bl	8002208 <HAL_GetTick>
 8008018:	6238      	str	r0, [r7, #32]
    hAtc->RespCount = Items;
 800801a:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 800801e:	b29a      	uxth	r2, r3
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	82da      	strh	r2, [r3, #22]
    while (HAL_GetTick() - start_time < RxTimeout)
 8008024:	e00e      	b.n	8008044 <ATC_Receive+0x10c>
    {
      ATC_Delay(1);
 8008026:	2001      	movs	r0, #1
 8008028:	f000 f89b 	bl	8008162 <ATC_Delay>
      uint8_t found_index = ATC_CheckResponse(hAtc, ppResp);
 800802c:	68b9      	ldr	r1, [r7, #8]
 800802e:	68f8      	ldr	r0, [r7, #12]
 8008030:	f7ff fd5c 	bl	8007aec <ATC_CheckResponse>
 8008034:	4603      	mov	r3, r0
 8008036:	77fb      	strb	r3, [r7, #31]
      if (found_index > 0)
 8008038:	7ffb      	ldrb	r3, [r7, #31]
 800803a:	2b00      	cmp	r3, #0
 800803c:	d002      	beq.n	8008044 <ATC_Receive+0x10c>
      {
        answer = found_index;
 800803e:	7ffb      	ldrb	r3, [r7, #31]
 8008040:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8008042:	e007      	b.n	8008054 <ATC_Receive+0x11c>
    while (HAL_GetTick() - start_time < RxTimeout)
 8008044:	f7fa f8e0 	bl	8002208 <HAL_GetTick>
 8008048:	4602      	mov	r2, r0
 800804a:	6a3b      	ldr	r3, [r7, #32]
 800804c:	1ad3      	subs	r3, r2, r3
 800804e:	687a      	ldr	r2, [r7, #4]
 8008050:	429a      	cmp	r2, r3
 8008052:	d8e8      	bhi.n	8008026 <ATC_Receive+0xee>
      }
    }
  }
  hAtc->RespCount = 0;
 8008054:	68fb      	ldr	r3, [r7, #12]
 8008056:	2200      	movs	r2, #0
 8008058:	82da      	strh	r2, [r3, #22]
  for (uint8_t i = 0; i < Items; i++)
 800805a:	2300      	movs	r3, #0
 800805c:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 8008060:	e00d      	b.n	800807e <ATC_Receive+0x146>
  {
    ATC_Free((void**)&hAtc->ppResp[i]);
 8008062:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008066:	330a      	adds	r3, #10
 8008068:	009b      	lsls	r3, r3, #2
 800806a:	68fa      	ldr	r2, [r7, #12]
 800806c:	4413      	add	r3, r2
 800806e:	4618      	mov	r0, r3
 8008070:	f7ff fc65 	bl	800793e <ATC_Free>
  for (uint8_t i = 0; i < Items; i++)
 8008074:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8008078:	3301      	adds	r3, #1
 800807a:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
 800807e:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 8008082:	f897 303c 	ldrb.w	r3, [r7, #60]	@ 0x3c
 8008086:	429a      	cmp	r2, r3
 8008088:	d3eb      	bcc.n	8008062 <ATC_Receive+0x12a>
  }
  return answer;
 800808a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800808c:	4618      	mov	r0, r3
 800808e:	3730      	adds	r7, #48	@ 0x30
 8008090:	46bd      	mov	sp, r7
 8008092:	e8bd 4090 	ldmia.w	sp!, {r4, r7, lr}
 8008096:	b001      	add	sp, #4
 8008098:	4770      	bx	lr

0800809a <ATC_IdleLineCallback>:
  * @param  hAtc: Pointer to the ATC handle.
  * @param  Len: Length of received data.
  * @retval None.
  */
inline void ATC_IdleLineCallback(ATC_HandleTypeDef* hAtc, uint16_t Len)
{
 800809a:	b580      	push	{r7, lr}
 800809c:	b082      	sub	sp, #8
 800809e:	af00      	add	r7, sp, #0
 80080a0:	6078      	str	r0, [r7, #4]
 80080a2:	460b      	mov	r3, r1
 80080a4:	807b      	strh	r3, [r7, #2]
  if (Len > hAtc->Size - hAtc->RxIndex)
 80080a6:	887a      	ldrh	r2, [r7, #2]
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	8a9b      	ldrh	r3, [r3, #20]
 80080ac:	4619      	mov	r1, r3
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	8b1b      	ldrh	r3, [r3, #24]
 80080b2:	1acb      	subs	r3, r1, r3
 80080b4:	429a      	cmp	r2, r3
 80080b6:	dd05      	ble.n	80080c4 <ATC_IdleLineCallback+0x2a>
  {
    Len = hAtc->Size - hAtc->RxIndex;
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	8a9a      	ldrh	r2, [r3, #20]
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8b1b      	ldrh	r3, [r3, #24]
 80080c0:	1ad3      	subs	r3, r2, r3
 80080c2:	807b      	strh	r3, [r7, #2]
  }
  memcpy(&hAtc->pReadBuff[hAtc->RxIndex], hAtc->pRxBuff, Len);
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80080c8:	687a      	ldr	r2, [r7, #4]
 80080ca:	8b12      	ldrh	r2, [r2, #24]
 80080cc:	1898      	adds	r0, r3, r2
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	69db      	ldr	r3, [r3, #28]
 80080d2:	887a      	ldrh	r2, [r7, #2]
 80080d4:	4619      	mov	r1, r3
 80080d6:	f000 fa29 	bl	800852c <memcpy>
  {
    dprintf("%c", hAtc->pRxBuff[i]);
  }
  dprintf("\r\n");
#endif
  hAtc->RxIndex += Len;
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	8b1a      	ldrh	r2, [r3, #24]
 80080de:	887b      	ldrh	r3, [r7, #2]
 80080e0:	4413      	add	r3, r2
 80080e2:	b29a      	uxth	r2, r3
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	831a      	strh	r2, [r3, #24]
  if (HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size) == HAL_OK)
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	6818      	ldr	r0, [r3, #0]
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	69d9      	ldr	r1, [r3, #28]
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	8a9b      	ldrh	r3, [r3, #20]
 80080f4:	461a      	mov	r2, r3
 80080f6:	f7ff f8ce 	bl	8007296 <HAL_UARTEx_ReceiveToIdle_DMA>
 80080fa:	4603      	mov	r3, r0
 80080fc:	2b00      	cmp	r3, #0
 80080fe:	d10c      	bne.n	800811a <ATC_IdleLineCallback+0x80>
  {
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8008100:	687b      	ldr	r3, [r7, #4]
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	f022 0208 	bic.w	r2, r2, #8
 8008116:	601a      	str	r2, [r3, #0]
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
    HAL_UART_AbortReceive(hAtc->hUart);
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
  }
}
 8008118:	e01f      	b.n	800815a <ATC_IdleLineCallback+0xc0>
    __HAL_UART_CLEAR_FLAG(hAtc->hUart, 0xFFFFFFFF);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	f04f 32ff 	mov.w	r2, #4294967295
 8008124:	621a      	str	r2, [r3, #32]
    HAL_UART_AbortReceive(hAtc->hUart);
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	4618      	mov	r0, r3
 800812c:	f7fd fdec 	bl	8005d08 <HAL_UART_AbortReceive>
    HAL_UARTEx_ReceiveToIdle_DMA(hAtc->hUart, hAtc->pRxBuff, hAtc->Size);
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	6818      	ldr	r0, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	69d9      	ldr	r1, [r3, #28]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	8a9b      	ldrh	r3, [r3, #20]
 800813c:	461a      	mov	r2, r3
 800813e:	f7ff f8aa 	bl	8007296 <HAL_UARTEx_ReceiveToIdle_DMA>
    __HAL_DMA_DISABLE_IT(hAtc->hUart->hdmarx, DMA_IT_HT);
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	681a      	ldr	r2, [r3, #0]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	f022 0208 	bic.w	r2, r2, #8
 8008158:	601a      	str	r2, [r3, #0]
}
 800815a:	bf00      	nop
 800815c:	3708      	adds	r7, #8
 800815e:	46bd      	mov	sp, r7
 8008160:	bd80      	pop	{r7, pc}

08008162 <ATC_Delay>:
  * @brief  Delay function.
  * @param  Delay: delay in milisecond..
  * @retval None.
  */
void ATC_Delay(uint32_t Delay)
{
 8008162:	b580      	push	{r7, lr}
 8008164:	b082      	sub	sp, #8
 8008166:	af00      	add	r7, sp, #0
 8008168:	6078      	str	r0, [r7, #4]
#if ATC_RTOS == ATC_RTOS_DISABLE
  HAL_Delay(Delay);
 800816a:	6878      	ldr	r0, [r7, #4]
 800816c:	f7fa f858 	bl	8002220 <HAL_Delay>
  uint32_t d = (TX_TIMER_TICKS_PER_SECOND * Delay) / 1000;
  if (d == 0)
    d = 1;
  tx_thread_sleep(d);
#endif
}
 8008170:	bf00      	nop
 8008172:	3708      	adds	r7, #8
 8008174:	46bd      	mov	sp, r7
 8008176:	bd80      	pop	{r7, pc}

08008178 <atoi>:
 8008178:	220a      	movs	r2, #10
 800817a:	2100      	movs	r1, #0
 800817c:	f000 b938 	b.w	80083f0 <strtol>

08008180 <malloc>:
 8008180:	4b02      	ldr	r3, [pc, #8]	@ (800818c <malloc+0xc>)
 8008182:	4601      	mov	r1, r0
 8008184:	6818      	ldr	r0, [r3, #0]
 8008186:	f000 b82d 	b.w	80081e4 <_malloc_r>
 800818a:	bf00      	nop
 800818c:	2000000c 	.word	0x2000000c

08008190 <free>:
 8008190:	4b02      	ldr	r3, [pc, #8]	@ (800819c <free+0xc>)
 8008192:	4601      	mov	r1, r0
 8008194:	6818      	ldr	r0, [r3, #0]
 8008196:	f000 b9d7 	b.w	8008548 <_free_r>
 800819a:	bf00      	nop
 800819c:	2000000c 	.word	0x2000000c

080081a0 <sbrk_aligned>:
 80081a0:	b570      	push	{r4, r5, r6, lr}
 80081a2:	4e0f      	ldr	r6, [pc, #60]	@ (80081e0 <sbrk_aligned+0x40>)
 80081a4:	460c      	mov	r4, r1
 80081a6:	6831      	ldr	r1, [r6, #0]
 80081a8:	4605      	mov	r5, r0
 80081aa:	b911      	cbnz	r1, 80081b2 <sbrk_aligned+0x12>
 80081ac:	f000 f97a 	bl	80084a4 <_sbrk_r>
 80081b0:	6030      	str	r0, [r6, #0]
 80081b2:	4621      	mov	r1, r4
 80081b4:	4628      	mov	r0, r5
 80081b6:	f000 f975 	bl	80084a4 <_sbrk_r>
 80081ba:	1c43      	adds	r3, r0, #1
 80081bc:	d103      	bne.n	80081c6 <sbrk_aligned+0x26>
 80081be:	f04f 34ff 	mov.w	r4, #4294967295
 80081c2:	4620      	mov	r0, r4
 80081c4:	bd70      	pop	{r4, r5, r6, pc}
 80081c6:	1cc4      	adds	r4, r0, #3
 80081c8:	f024 0403 	bic.w	r4, r4, #3
 80081cc:	42a0      	cmp	r0, r4
 80081ce:	d0f8      	beq.n	80081c2 <sbrk_aligned+0x22>
 80081d0:	1a21      	subs	r1, r4, r0
 80081d2:	4628      	mov	r0, r5
 80081d4:	f000 f966 	bl	80084a4 <_sbrk_r>
 80081d8:	3001      	adds	r0, #1
 80081da:	d1f2      	bne.n	80081c2 <sbrk_aligned+0x22>
 80081dc:	e7ef      	b.n	80081be <sbrk_aligned+0x1e>
 80081de:	bf00      	nop
 80081e0:	20000a00 	.word	0x20000a00

080081e4 <_malloc_r>:
 80081e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081e8:	1ccd      	adds	r5, r1, #3
 80081ea:	f025 0503 	bic.w	r5, r5, #3
 80081ee:	3508      	adds	r5, #8
 80081f0:	2d0c      	cmp	r5, #12
 80081f2:	bf38      	it	cc
 80081f4:	250c      	movcc	r5, #12
 80081f6:	2d00      	cmp	r5, #0
 80081f8:	4606      	mov	r6, r0
 80081fa:	db01      	blt.n	8008200 <_malloc_r+0x1c>
 80081fc:	42a9      	cmp	r1, r5
 80081fe:	d904      	bls.n	800820a <_malloc_r+0x26>
 8008200:	230c      	movs	r3, #12
 8008202:	6033      	str	r3, [r6, #0]
 8008204:	2000      	movs	r0, #0
 8008206:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800820a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80082e0 <_malloc_r+0xfc>
 800820e:	f000 f869 	bl	80082e4 <__malloc_lock>
 8008212:	f8d8 3000 	ldr.w	r3, [r8]
 8008216:	461c      	mov	r4, r3
 8008218:	bb44      	cbnz	r4, 800826c <_malloc_r+0x88>
 800821a:	4629      	mov	r1, r5
 800821c:	4630      	mov	r0, r6
 800821e:	f7ff ffbf 	bl	80081a0 <sbrk_aligned>
 8008222:	1c43      	adds	r3, r0, #1
 8008224:	4604      	mov	r4, r0
 8008226:	d158      	bne.n	80082da <_malloc_r+0xf6>
 8008228:	f8d8 4000 	ldr.w	r4, [r8]
 800822c:	4627      	mov	r7, r4
 800822e:	2f00      	cmp	r7, #0
 8008230:	d143      	bne.n	80082ba <_malloc_r+0xd6>
 8008232:	2c00      	cmp	r4, #0
 8008234:	d04b      	beq.n	80082ce <_malloc_r+0xea>
 8008236:	6823      	ldr	r3, [r4, #0]
 8008238:	4639      	mov	r1, r7
 800823a:	4630      	mov	r0, r6
 800823c:	eb04 0903 	add.w	r9, r4, r3
 8008240:	f000 f930 	bl	80084a4 <_sbrk_r>
 8008244:	4581      	cmp	r9, r0
 8008246:	d142      	bne.n	80082ce <_malloc_r+0xea>
 8008248:	6821      	ldr	r1, [r4, #0]
 800824a:	1a6d      	subs	r5, r5, r1
 800824c:	4629      	mov	r1, r5
 800824e:	4630      	mov	r0, r6
 8008250:	f7ff ffa6 	bl	80081a0 <sbrk_aligned>
 8008254:	3001      	adds	r0, #1
 8008256:	d03a      	beq.n	80082ce <_malloc_r+0xea>
 8008258:	6823      	ldr	r3, [r4, #0]
 800825a:	442b      	add	r3, r5
 800825c:	6023      	str	r3, [r4, #0]
 800825e:	f8d8 3000 	ldr.w	r3, [r8]
 8008262:	685a      	ldr	r2, [r3, #4]
 8008264:	bb62      	cbnz	r2, 80082c0 <_malloc_r+0xdc>
 8008266:	f8c8 7000 	str.w	r7, [r8]
 800826a:	e00f      	b.n	800828c <_malloc_r+0xa8>
 800826c:	6822      	ldr	r2, [r4, #0]
 800826e:	1b52      	subs	r2, r2, r5
 8008270:	d420      	bmi.n	80082b4 <_malloc_r+0xd0>
 8008272:	2a0b      	cmp	r2, #11
 8008274:	d917      	bls.n	80082a6 <_malloc_r+0xc2>
 8008276:	1961      	adds	r1, r4, r5
 8008278:	42a3      	cmp	r3, r4
 800827a:	6025      	str	r5, [r4, #0]
 800827c:	bf18      	it	ne
 800827e:	6059      	strne	r1, [r3, #4]
 8008280:	6863      	ldr	r3, [r4, #4]
 8008282:	bf08      	it	eq
 8008284:	f8c8 1000 	streq.w	r1, [r8]
 8008288:	5162      	str	r2, [r4, r5]
 800828a:	604b      	str	r3, [r1, #4]
 800828c:	4630      	mov	r0, r6
 800828e:	f000 f82f 	bl	80082f0 <__malloc_unlock>
 8008292:	f104 000b 	add.w	r0, r4, #11
 8008296:	1d23      	adds	r3, r4, #4
 8008298:	f020 0007 	bic.w	r0, r0, #7
 800829c:	1ac2      	subs	r2, r0, r3
 800829e:	bf1c      	itt	ne
 80082a0:	1a1b      	subne	r3, r3, r0
 80082a2:	50a3      	strne	r3, [r4, r2]
 80082a4:	e7af      	b.n	8008206 <_malloc_r+0x22>
 80082a6:	6862      	ldr	r2, [r4, #4]
 80082a8:	42a3      	cmp	r3, r4
 80082aa:	bf0c      	ite	eq
 80082ac:	f8c8 2000 	streq.w	r2, [r8]
 80082b0:	605a      	strne	r2, [r3, #4]
 80082b2:	e7eb      	b.n	800828c <_malloc_r+0xa8>
 80082b4:	4623      	mov	r3, r4
 80082b6:	6864      	ldr	r4, [r4, #4]
 80082b8:	e7ae      	b.n	8008218 <_malloc_r+0x34>
 80082ba:	463c      	mov	r4, r7
 80082bc:	687f      	ldr	r7, [r7, #4]
 80082be:	e7b6      	b.n	800822e <_malloc_r+0x4a>
 80082c0:	461a      	mov	r2, r3
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	42a3      	cmp	r3, r4
 80082c6:	d1fb      	bne.n	80082c0 <_malloc_r+0xdc>
 80082c8:	2300      	movs	r3, #0
 80082ca:	6053      	str	r3, [r2, #4]
 80082cc:	e7de      	b.n	800828c <_malloc_r+0xa8>
 80082ce:	230c      	movs	r3, #12
 80082d0:	6033      	str	r3, [r6, #0]
 80082d2:	4630      	mov	r0, r6
 80082d4:	f000 f80c 	bl	80082f0 <__malloc_unlock>
 80082d8:	e794      	b.n	8008204 <_malloc_r+0x20>
 80082da:	6005      	str	r5, [r0, #0]
 80082dc:	e7d6      	b.n	800828c <_malloc_r+0xa8>
 80082de:	bf00      	nop
 80082e0:	20000a04 	.word	0x20000a04

080082e4 <__malloc_lock>:
 80082e4:	4801      	ldr	r0, [pc, #4]	@ (80082ec <__malloc_lock+0x8>)
 80082e6:	f000 b917 	b.w	8008518 <__retarget_lock_acquire_recursive>
 80082ea:	bf00      	nop
 80082ec:	20000b44 	.word	0x20000b44

080082f0 <__malloc_unlock>:
 80082f0:	4801      	ldr	r0, [pc, #4]	@ (80082f8 <__malloc_unlock+0x8>)
 80082f2:	f000 b912 	b.w	800851a <__retarget_lock_release_recursive>
 80082f6:	bf00      	nop
 80082f8:	20000b44 	.word	0x20000b44

080082fc <_strtol_l.constprop.0>:
 80082fc:	2b24      	cmp	r3, #36	@ 0x24
 80082fe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008302:	4686      	mov	lr, r0
 8008304:	4690      	mov	r8, r2
 8008306:	d801      	bhi.n	800830c <_strtol_l.constprop.0+0x10>
 8008308:	2b01      	cmp	r3, #1
 800830a:	d106      	bne.n	800831a <_strtol_l.constprop.0+0x1e>
 800830c:	f000 f8da 	bl	80084c4 <__errno>
 8008310:	2316      	movs	r3, #22
 8008312:	6003      	str	r3, [r0, #0]
 8008314:	2000      	movs	r0, #0
 8008316:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800831a:	4834      	ldr	r0, [pc, #208]	@ (80083ec <_strtol_l.constprop.0+0xf0>)
 800831c:	460d      	mov	r5, r1
 800831e:	462a      	mov	r2, r5
 8008320:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008324:	5d06      	ldrb	r6, [r0, r4]
 8008326:	f016 0608 	ands.w	r6, r6, #8
 800832a:	d1f8      	bne.n	800831e <_strtol_l.constprop.0+0x22>
 800832c:	2c2d      	cmp	r4, #45	@ 0x2d
 800832e:	d12d      	bne.n	800838c <_strtol_l.constprop.0+0x90>
 8008330:	782c      	ldrb	r4, [r5, #0]
 8008332:	2601      	movs	r6, #1
 8008334:	1c95      	adds	r5, r2, #2
 8008336:	f033 0210 	bics.w	r2, r3, #16
 800833a:	d109      	bne.n	8008350 <_strtol_l.constprop.0+0x54>
 800833c:	2c30      	cmp	r4, #48	@ 0x30
 800833e:	d12a      	bne.n	8008396 <_strtol_l.constprop.0+0x9a>
 8008340:	782a      	ldrb	r2, [r5, #0]
 8008342:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8008346:	2a58      	cmp	r2, #88	@ 0x58
 8008348:	d125      	bne.n	8008396 <_strtol_l.constprop.0+0x9a>
 800834a:	786c      	ldrb	r4, [r5, #1]
 800834c:	2310      	movs	r3, #16
 800834e:	3502      	adds	r5, #2
 8008350:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8008354:	f10c 3cff 	add.w	ip, ip, #4294967295
 8008358:	2200      	movs	r2, #0
 800835a:	fbbc f9f3 	udiv	r9, ip, r3
 800835e:	4610      	mov	r0, r2
 8008360:	fb03 ca19 	mls	sl, r3, r9, ip
 8008364:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8008368:	2f09      	cmp	r7, #9
 800836a:	d81b      	bhi.n	80083a4 <_strtol_l.constprop.0+0xa8>
 800836c:	463c      	mov	r4, r7
 800836e:	42a3      	cmp	r3, r4
 8008370:	dd27      	ble.n	80083c2 <_strtol_l.constprop.0+0xc6>
 8008372:	1c57      	adds	r7, r2, #1
 8008374:	d007      	beq.n	8008386 <_strtol_l.constprop.0+0x8a>
 8008376:	4581      	cmp	r9, r0
 8008378:	d320      	bcc.n	80083bc <_strtol_l.constprop.0+0xc0>
 800837a:	d101      	bne.n	8008380 <_strtol_l.constprop.0+0x84>
 800837c:	45a2      	cmp	sl, r4
 800837e:	db1d      	blt.n	80083bc <_strtol_l.constprop.0+0xc0>
 8008380:	fb00 4003 	mla	r0, r0, r3, r4
 8008384:	2201      	movs	r2, #1
 8008386:	f815 4b01 	ldrb.w	r4, [r5], #1
 800838a:	e7eb      	b.n	8008364 <_strtol_l.constprop.0+0x68>
 800838c:	2c2b      	cmp	r4, #43	@ 0x2b
 800838e:	bf04      	itt	eq
 8008390:	782c      	ldrbeq	r4, [r5, #0]
 8008392:	1c95      	addeq	r5, r2, #2
 8008394:	e7cf      	b.n	8008336 <_strtol_l.constprop.0+0x3a>
 8008396:	2b00      	cmp	r3, #0
 8008398:	d1da      	bne.n	8008350 <_strtol_l.constprop.0+0x54>
 800839a:	2c30      	cmp	r4, #48	@ 0x30
 800839c:	bf0c      	ite	eq
 800839e:	2308      	moveq	r3, #8
 80083a0:	230a      	movne	r3, #10
 80083a2:	e7d5      	b.n	8008350 <_strtol_l.constprop.0+0x54>
 80083a4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 80083a8:	2f19      	cmp	r7, #25
 80083aa:	d801      	bhi.n	80083b0 <_strtol_l.constprop.0+0xb4>
 80083ac:	3c37      	subs	r4, #55	@ 0x37
 80083ae:	e7de      	b.n	800836e <_strtol_l.constprop.0+0x72>
 80083b0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 80083b4:	2f19      	cmp	r7, #25
 80083b6:	d804      	bhi.n	80083c2 <_strtol_l.constprop.0+0xc6>
 80083b8:	3c57      	subs	r4, #87	@ 0x57
 80083ba:	e7d8      	b.n	800836e <_strtol_l.constprop.0+0x72>
 80083bc:	f04f 32ff 	mov.w	r2, #4294967295
 80083c0:	e7e1      	b.n	8008386 <_strtol_l.constprop.0+0x8a>
 80083c2:	1c53      	adds	r3, r2, #1
 80083c4:	d108      	bne.n	80083d8 <_strtol_l.constprop.0+0xdc>
 80083c6:	2322      	movs	r3, #34	@ 0x22
 80083c8:	f8ce 3000 	str.w	r3, [lr]
 80083cc:	4660      	mov	r0, ip
 80083ce:	f1b8 0f00 	cmp.w	r8, #0
 80083d2:	d0a0      	beq.n	8008316 <_strtol_l.constprop.0+0x1a>
 80083d4:	1e69      	subs	r1, r5, #1
 80083d6:	e006      	b.n	80083e6 <_strtol_l.constprop.0+0xea>
 80083d8:	b106      	cbz	r6, 80083dc <_strtol_l.constprop.0+0xe0>
 80083da:	4240      	negs	r0, r0
 80083dc:	f1b8 0f00 	cmp.w	r8, #0
 80083e0:	d099      	beq.n	8008316 <_strtol_l.constprop.0+0x1a>
 80083e2:	2a00      	cmp	r2, #0
 80083e4:	d1f6      	bne.n	80083d4 <_strtol_l.constprop.0+0xd8>
 80083e6:	f8c8 1000 	str.w	r1, [r8]
 80083ea:	e794      	b.n	8008316 <_strtol_l.constprop.0+0x1a>
 80083ec:	080087b1 	.word	0x080087b1

080083f0 <strtol>:
 80083f0:	4613      	mov	r3, r2
 80083f2:	460a      	mov	r2, r1
 80083f4:	4601      	mov	r1, r0
 80083f6:	4802      	ldr	r0, [pc, #8]	@ (8008400 <strtol+0x10>)
 80083f8:	6800      	ldr	r0, [r0, #0]
 80083fa:	f7ff bf7f 	b.w	80082fc <_strtol_l.constprop.0>
 80083fe:	bf00      	nop
 8008400:	2000000c 	.word	0x2000000c

08008404 <memset>:
 8008404:	4402      	add	r2, r0
 8008406:	4603      	mov	r3, r0
 8008408:	4293      	cmp	r3, r2
 800840a:	d100      	bne.n	800840e <memset+0xa>
 800840c:	4770      	bx	lr
 800840e:	f803 1b01 	strb.w	r1, [r3], #1
 8008412:	e7f9      	b.n	8008408 <memset+0x4>

08008414 <strchr>:
 8008414:	b2c9      	uxtb	r1, r1
 8008416:	4603      	mov	r3, r0
 8008418:	4618      	mov	r0, r3
 800841a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800841e:	b112      	cbz	r2, 8008426 <strchr+0x12>
 8008420:	428a      	cmp	r2, r1
 8008422:	d1f9      	bne.n	8008418 <strchr+0x4>
 8008424:	4770      	bx	lr
 8008426:	2900      	cmp	r1, #0
 8008428:	bf18      	it	ne
 800842a:	2000      	movne	r0, #0
 800842c:	4770      	bx	lr

0800842e <strncmp>:
 800842e:	b510      	push	{r4, lr}
 8008430:	b16a      	cbz	r2, 800844e <strncmp+0x20>
 8008432:	3901      	subs	r1, #1
 8008434:	1884      	adds	r4, r0, r2
 8008436:	f810 2b01 	ldrb.w	r2, [r0], #1
 800843a:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800843e:	429a      	cmp	r2, r3
 8008440:	d103      	bne.n	800844a <strncmp+0x1c>
 8008442:	42a0      	cmp	r0, r4
 8008444:	d001      	beq.n	800844a <strncmp+0x1c>
 8008446:	2a00      	cmp	r2, #0
 8008448:	d1f5      	bne.n	8008436 <strncmp+0x8>
 800844a:	1ad0      	subs	r0, r2, r3
 800844c:	bd10      	pop	{r4, pc}
 800844e:	4610      	mov	r0, r2
 8008450:	e7fc      	b.n	800844c <strncmp+0x1e>

08008452 <strncpy>:
 8008452:	b510      	push	{r4, lr}
 8008454:	3901      	subs	r1, #1
 8008456:	4603      	mov	r3, r0
 8008458:	b132      	cbz	r2, 8008468 <strncpy+0x16>
 800845a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800845e:	f803 4b01 	strb.w	r4, [r3], #1
 8008462:	3a01      	subs	r2, #1
 8008464:	2c00      	cmp	r4, #0
 8008466:	d1f7      	bne.n	8008458 <strncpy+0x6>
 8008468:	441a      	add	r2, r3
 800846a:	2100      	movs	r1, #0
 800846c:	4293      	cmp	r3, r2
 800846e:	d100      	bne.n	8008472 <strncpy+0x20>
 8008470:	bd10      	pop	{r4, pc}
 8008472:	f803 1b01 	strb.w	r1, [r3], #1
 8008476:	e7f9      	b.n	800846c <strncpy+0x1a>

08008478 <strstr>:
 8008478:	780a      	ldrb	r2, [r1, #0]
 800847a:	b570      	push	{r4, r5, r6, lr}
 800847c:	b96a      	cbnz	r2, 800849a <strstr+0x22>
 800847e:	bd70      	pop	{r4, r5, r6, pc}
 8008480:	429a      	cmp	r2, r3
 8008482:	d109      	bne.n	8008498 <strstr+0x20>
 8008484:	460c      	mov	r4, r1
 8008486:	4605      	mov	r5, r0
 8008488:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800848c:	2b00      	cmp	r3, #0
 800848e:	d0f6      	beq.n	800847e <strstr+0x6>
 8008490:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008494:	429e      	cmp	r6, r3
 8008496:	d0f7      	beq.n	8008488 <strstr+0x10>
 8008498:	3001      	adds	r0, #1
 800849a:	7803      	ldrb	r3, [r0, #0]
 800849c:	2b00      	cmp	r3, #0
 800849e:	d1ef      	bne.n	8008480 <strstr+0x8>
 80084a0:	4618      	mov	r0, r3
 80084a2:	e7ec      	b.n	800847e <strstr+0x6>

080084a4 <_sbrk_r>:
 80084a4:	b538      	push	{r3, r4, r5, lr}
 80084a6:	4d06      	ldr	r5, [pc, #24]	@ (80084c0 <_sbrk_r+0x1c>)
 80084a8:	2300      	movs	r3, #0
 80084aa:	4604      	mov	r4, r0
 80084ac:	4608      	mov	r0, r1
 80084ae:	602b      	str	r3, [r5, #0]
 80084b0:	f7f8 feb6 	bl	8001220 <_sbrk>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_sbrk_r+0x1a>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_sbrk_r+0x1a>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	20000b40 	.word	0x20000b40

080084c4 <__errno>:
 80084c4:	4b01      	ldr	r3, [pc, #4]	@ (80084cc <__errno+0x8>)
 80084c6:	6818      	ldr	r0, [r3, #0]
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	2000000c 	.word	0x2000000c

080084d0 <__libc_init_array>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008508 <__libc_init_array+0x38>)
 80084d4:	4c0d      	ldr	r4, [pc, #52]	@ (800850c <__libc_init_array+0x3c>)
 80084d6:	1b64      	subs	r4, r4, r5
 80084d8:	10a4      	asrs	r4, r4, #2
 80084da:	2600      	movs	r6, #0
 80084dc:	42a6      	cmp	r6, r4
 80084de:	d109      	bne.n	80084f4 <__libc_init_array+0x24>
 80084e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008510 <__libc_init_array+0x40>)
 80084e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008514 <__libc_init_array+0x44>)
 80084e4:	f000 f87a 	bl	80085dc <_init>
 80084e8:	1b64      	subs	r4, r4, r5
 80084ea:	10a4      	asrs	r4, r4, #2
 80084ec:	2600      	movs	r6, #0
 80084ee:	42a6      	cmp	r6, r4
 80084f0:	d105      	bne.n	80084fe <__libc_init_array+0x2e>
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f8:	4798      	blx	r3
 80084fa:	3601      	adds	r6, #1
 80084fc:	e7ee      	b.n	80084dc <__libc_init_array+0xc>
 80084fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008502:	4798      	blx	r3
 8008504:	3601      	adds	r6, #1
 8008506:	e7f2      	b.n	80084ee <__libc_init_array+0x1e>
 8008508:	080088bc 	.word	0x080088bc
 800850c:	080088bc 	.word	0x080088bc
 8008510:	080088bc 	.word	0x080088bc
 8008514:	080088c0 	.word	0x080088c0

08008518 <__retarget_lock_acquire_recursive>:
 8008518:	4770      	bx	lr

0800851a <__retarget_lock_release_recursive>:
 800851a:	4770      	bx	lr

0800851c <strcpy>:
 800851c:	4603      	mov	r3, r0
 800851e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008522:	f803 2b01 	strb.w	r2, [r3], #1
 8008526:	2a00      	cmp	r2, #0
 8008528:	d1f9      	bne.n	800851e <strcpy+0x2>
 800852a:	4770      	bx	lr

0800852c <memcpy>:
 800852c:	440a      	add	r2, r1
 800852e:	4291      	cmp	r1, r2
 8008530:	f100 33ff 	add.w	r3, r0, #4294967295
 8008534:	d100      	bne.n	8008538 <memcpy+0xc>
 8008536:	4770      	bx	lr
 8008538:	b510      	push	{r4, lr}
 800853a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800853e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008542:	4291      	cmp	r1, r2
 8008544:	d1f9      	bne.n	800853a <memcpy+0xe>
 8008546:	bd10      	pop	{r4, pc}

08008548 <_free_r>:
 8008548:	b538      	push	{r3, r4, r5, lr}
 800854a:	4605      	mov	r5, r0
 800854c:	2900      	cmp	r1, #0
 800854e:	d041      	beq.n	80085d4 <_free_r+0x8c>
 8008550:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008554:	1f0c      	subs	r4, r1, #4
 8008556:	2b00      	cmp	r3, #0
 8008558:	bfb8      	it	lt
 800855a:	18e4      	addlt	r4, r4, r3
 800855c:	f7ff fec2 	bl	80082e4 <__malloc_lock>
 8008560:	4a1d      	ldr	r2, [pc, #116]	@ (80085d8 <_free_r+0x90>)
 8008562:	6813      	ldr	r3, [r2, #0]
 8008564:	b933      	cbnz	r3, 8008574 <_free_r+0x2c>
 8008566:	6063      	str	r3, [r4, #4]
 8008568:	6014      	str	r4, [r2, #0]
 800856a:	4628      	mov	r0, r5
 800856c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008570:	f7ff bebe 	b.w	80082f0 <__malloc_unlock>
 8008574:	42a3      	cmp	r3, r4
 8008576:	d908      	bls.n	800858a <_free_r+0x42>
 8008578:	6820      	ldr	r0, [r4, #0]
 800857a:	1821      	adds	r1, r4, r0
 800857c:	428b      	cmp	r3, r1
 800857e:	bf01      	itttt	eq
 8008580:	6819      	ldreq	r1, [r3, #0]
 8008582:	685b      	ldreq	r3, [r3, #4]
 8008584:	1809      	addeq	r1, r1, r0
 8008586:	6021      	streq	r1, [r4, #0]
 8008588:	e7ed      	b.n	8008566 <_free_r+0x1e>
 800858a:	461a      	mov	r2, r3
 800858c:	685b      	ldr	r3, [r3, #4]
 800858e:	b10b      	cbz	r3, 8008594 <_free_r+0x4c>
 8008590:	42a3      	cmp	r3, r4
 8008592:	d9fa      	bls.n	800858a <_free_r+0x42>
 8008594:	6811      	ldr	r1, [r2, #0]
 8008596:	1850      	adds	r0, r2, r1
 8008598:	42a0      	cmp	r0, r4
 800859a:	d10b      	bne.n	80085b4 <_free_r+0x6c>
 800859c:	6820      	ldr	r0, [r4, #0]
 800859e:	4401      	add	r1, r0
 80085a0:	1850      	adds	r0, r2, r1
 80085a2:	4283      	cmp	r3, r0
 80085a4:	6011      	str	r1, [r2, #0]
 80085a6:	d1e0      	bne.n	800856a <_free_r+0x22>
 80085a8:	6818      	ldr	r0, [r3, #0]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	6053      	str	r3, [r2, #4]
 80085ae:	4408      	add	r0, r1
 80085b0:	6010      	str	r0, [r2, #0]
 80085b2:	e7da      	b.n	800856a <_free_r+0x22>
 80085b4:	d902      	bls.n	80085bc <_free_r+0x74>
 80085b6:	230c      	movs	r3, #12
 80085b8:	602b      	str	r3, [r5, #0]
 80085ba:	e7d6      	b.n	800856a <_free_r+0x22>
 80085bc:	6820      	ldr	r0, [r4, #0]
 80085be:	1821      	adds	r1, r4, r0
 80085c0:	428b      	cmp	r3, r1
 80085c2:	bf04      	itt	eq
 80085c4:	6819      	ldreq	r1, [r3, #0]
 80085c6:	685b      	ldreq	r3, [r3, #4]
 80085c8:	6063      	str	r3, [r4, #4]
 80085ca:	bf04      	itt	eq
 80085cc:	1809      	addeq	r1, r1, r0
 80085ce:	6021      	streq	r1, [r4, #0]
 80085d0:	6054      	str	r4, [r2, #4]
 80085d2:	e7ca      	b.n	800856a <_free_r+0x22>
 80085d4:	bd38      	pop	{r3, r4, r5, pc}
 80085d6:	bf00      	nop
 80085d8:	20000a04 	.word	0x20000a04

080085dc <_init>:
 80085dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085de:	bf00      	nop
 80085e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085e2:	bc08      	pop	{r3}
 80085e4:	469e      	mov	lr, r3
 80085e6:	4770      	bx	lr

080085e8 <_fini>:
 80085e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085ea:	bf00      	nop
 80085ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ee:	bc08      	pop	{r3}
 80085f0:	469e      	mov	lr, r3
 80085f2:	4770      	bx	lr
